<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "html" "">
<html xmlns="http://www.w3.org/1999/xhtml" class="no-js" lang="en">
  <head>
    <meta charset="utf-8"/>
    <title>Symfony2 - Symfony\Bridge\Doctrine\DependencyInjection\AbstractDoctrineExtension - API Documentation</title>
    <link href="../css/normalize.css" rel="stylesheet" type="text/css" media="all"/>
    <link href="../css/styles.css" rel="stylesheet" type="text/css" media="all"/>
  </head>
  <body>
    <div class="wrapper clearfix">
      <div class="topbar clearfix">
        <h1>
          <a class="brand" href="../index.xhtml">Symfony2 - API Documentation</a>
        </h1>
        <ul class="nav">
          <li class="active">
            <a href="../index.xhtml">Overview</a>
          </li>
        </ul>
      </div>
      <div class="navigation">
        <h3>Members</h3>
        <ul>
          <li>
            <a href="#aliasMap">$aliasMap</a>
          </li>
          <li>
            <a href="#drivers">$drivers</a>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul>
          <li>
            <a href="#addClassesToCompile">addClassesToCompile</a>
          </li>
          <li>
            <a href="#assertValidMappingConfiguration">assertValidMappingConfiguration</a>
          </li>
          <li>
            <a href="#detectMetadataDriver">detectMetadataDriver</a>
          </li>
          <li>
            <a href="#getAlias">getAlias</a>
          </li>
          <li>
            <a href="#getClassesToCompile">getClassesToCompile</a>
          </li>
          <li>
            <a href="#getConfiguration">getConfiguration</a>
          </li>
          <li>
            <a href="#getMappingDriverBundleConfigDefaults">getMappingDriverBundleConfigDefaults</a>
          </li>
          <li>
            <a href="#getMappingObjectDefaultName">getMappingObjectDefaultName</a>
          </li>
          <li>
            <a href="#getMappingResourceConfigDirectory">getMappingResourceConfigDirectory</a>
          </li>
          <li>
            <a href="#getMappingResourceExtension">getMappingResourceExtension</a>
          </li>
          <li>
            <a href="#getNamespace">getNamespace</a>
          </li>
          <li>
            <a href="#getObjectManagerElementName">getObjectManagerElementName</a>
          </li>
          <li>
            <a href="#getXsdValidationBasePath">getXsdValidationBasePath</a>
          </li>
          <li>
            <a href="#isConfigEnabled">isConfigEnabled</a>
          </li>
          <li>
            <a href="#loadMappingInformation">loadMappingInformation</a>
          </li>
          <li>
            <a href="#loadObjectManagerCacheDriver">loadObjectManagerCacheDriver</a>
          </li>
          <li>
            <a href="#processConfiguration">processConfiguration</a>
          </li>
          <li>
            <a href="#registerMappingDrivers">registerMappingDrivers</a>
          </li>
          <li>
            <a href="#setMappingDriverAlias">setMappingDriverAlias</a>
          </li>
          <li>
            <a href="#setMappingDriverConfig">setMappingDriverConfig</a>
          </li>
        </ul>
      </div>
      <div class="content">
        <h2><span style="font-size:60%">Symfony\Bridge\Doctrine\DependencyInjection\</span>AbstractDoctrineExtension</h2>
        <div class="file-notice">
          <p>This abstract classes groups common code that Doctrine Object Manager extensions (ORM, MongoDB, CouchDB) need.</p>
        </div>
        <ul class="fileinfos">
          <li><b>Author: </b>Benjamin Eberlei &lt;kontakt@beberlei.de&gt;</li>
        </ul>
        <h3>Members</h3>
        <ul class="varlist">
          <li>
            <a name="aliasMap"/>
            <h4><span class="label protected">protected</span>array 
                
                $aliasMap</h4>
            <ul class="varlist">
              <li>Used inside metadata driver method to simplify aggregation of data.</li>
            </ul>
          </li>
          <li>
            <a name="drivers"/>
            <h4><span class="label protected">protected</span>array 
                
                $drivers</h4>
            <ul class="varlist">
              <li>Used inside metadata driver method to simplify aggregation of data.</li>
            </ul>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul class="varlist">
          <li>
            <a name="addClassesToCompile"/>
            <h4><span class="label public">public</span>addClassesToCompile<span style="font-size:90%;">( <span class="param-type">Array</span><strong> $classes</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Adds classes to the class cache.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$classes</code> - An array of classes</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getAlias"/>
            <h4><span class="label public">public</span>getAlias<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the recommended alias to use in XML.<pre>This alias is also the mandatory prefix to use when using YAML.

This convention is to remove the "Extension" postfix from the class
name and then lowercase and underscore the result. So:

    AcmeHelloExtension

becomes

    acme_hello

This can be overridden in a sub-class to specify the alias manually.</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The alias</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>BadMethodCallException When the extension name does not follow conventions</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getClassesToCompile"/>
            <h4><span class="label public">public</span>getClassesToCompile<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the classes to cache.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>An array of classes</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getConfiguration"/>
            <h4><span class="label public">public</span>getConfiguration<span style="font-size:90%;">( <span class="param-type">Array</span><strong> $config</strong>, <span class="param-type"><a href="../classes/Symfony_Component_DependencyInjection_ContainerBuilder.xhtml">Symfony\Component\DependencyInjection\ContainerBuilder</a></span><strong> $container</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>{@inheritDoc}</li>
            </p>
          </li>
          <li>
            <a name="getNamespace"/>
            <h4><span class="label public">public</span>getNamespace<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the namespace to be used for this extension (XML namespace).</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The XML namespace</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getXsdValidationBasePath"/>
            <h4><span class="label public">public</span>getXsdValidationBasePath<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the base path for the XSD files.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The XSD base path</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="assertValidMappingConfiguration"/>
            <h4><span class="label protected">protected</span>assertValidMappingConfiguration<span style="font-size:90%;">( <span class="param-type">Array</span><strong> $mappingConfig</strong>, <span class="param-type">string</span><strong> $objectManagerName</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Assertion if the specified mapping information is valid.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$mappingConfig</code> - </li>
                <li><code>$objectManagerName</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\InvalidArgumentException</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="detectMetadataDriver"/>
            <h4><span class="label protected">protected</span>detectMetadataDriver<span style="font-size:90%;">( <span class="param-type">string</span><strong> $dir</strong>, <span class="param-type"><a href="../classes/Symfony_Component_DependencyInjection_ContainerBuilder.xhtml">Symfony\Component\DependencyInjection\ContainerBuilder</a></span><strong> $container</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Detects what metadata driver to use for the supplied directory.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$dir</code> - A directory path</li>
                <li><code>$container</code> - A ContainerBuilder instance</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>A metadata driver short name, if one can be detected</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getMappingDriverBundleConfigDefaults"/>
            <h4><span class="label protected">protected</span>getMappingDriverBundleConfigDefaults<span style="font-size:90%;">( <span class="param-type">Array</span><strong> $bundleConfig</strong>, <span class="param-type"><a href="../classes/ReflectionClass.xhtml">ReflectionClass</a></span><strong> $bundle</strong>, <span class="param-type"><a href="../classes/Symfony_Component_DependencyInjection_ContainerBuilder.xhtml">Symfony\Component\DependencyInjection\ContainerBuilder</a></span><strong> $container</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>If this is a bundle controlled mapping all the missing information can be autodetected by this method.<pre>Returns false when autodetection failed, an array of the completed information otherwise.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$bundleConfig</code> - </li>
                <li><code>$bundle</code> - </li>
                <li><code>$container</code> - A ContainerBuilder instance</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getMappingObjectDefaultName"/>
            <h4><span class="label true">true</span><span class="label protected">protected</span>getMappingObjectDefaultName<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Noun that describes the mapped objects such as Entity or Document.<pre>Will be used for autodetection of persistent objects directory.</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getMappingResourceConfigDirectory"/>
            <h4><span class="label true">true</span><span class="label protected">protected</span>getMappingResourceConfigDirectory<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Relative path from the bundle root to the directory where mapping files reside.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getMappingResourceExtension"/>
            <h4><span class="label true">true</span><span class="label protected">protected</span>getMappingResourceExtension<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Extension used by the mapping files.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getObjectManagerElementName"/>
            <h4><span class="label true">true</span><span class="label protected">protected</span>getObjectManagerElementName<span style="font-size:90%;">( <span class="param-type">string</span><strong> $name</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Prefixes the relative dependency injection container path with the object manager prefix.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="isConfigEnabled"/>
            <h4><span class="label protected">protected</span>isConfigEnabled<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_DependencyInjection_ContainerBuilder.xhtml">Symfony\Component\DependencyInjection\ContainerBuilder</a></span><strong> $container</strong>, <span class="param-type">Array</span><strong> $config</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li/>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$container</code> - </li>
                <li><code>$config</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>Whether the configuration is enabled</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>InvalidArgumentException When the config is not enableable</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="loadMappingInformation"/>
            <h4><span class="label protected">protected</span>loadMappingInformation<span style="font-size:90%;">( <span class="param-type">Array</span><strong> $objectManager</strong>, <span class="param-type"><a href="../classes/Symfony_Component_DependencyInjection_ContainerBuilder.xhtml">Symfony\Component\DependencyInjection\ContainerBuilder</a></span><strong> $container</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li/>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$objectManager</code> - A configured object manager.</li>
                <li><code>$container</code> - A ContainerBuilder instance</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\InvalidArgumentException</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="loadObjectManagerCacheDriver"/>
            <h4><span class="label protected">protected</span>loadObjectManagerCacheDriver<span style="font-size:90%;">( <span class="param-type">Array</span><strong> $objectManager</strong>, <span class="param-type"><a href="../classes/Symfony_Component_DependencyInjection_ContainerBuilder.xhtml">Symfony\Component\DependencyInjection\ContainerBuilder</a></span><strong> $container</strong>, <span class="param-type">string</span><strong> $cacheName</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Loads a configured object manager metadata, query or result cache driver.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$objectManager</code> - A configured object manager.</li>
                <li><code>$container</code> - A ContainerBuilder instance.</li>
                <li><code>$cacheName</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\InvalidArgumentException In case of unknown driver type.</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="processConfiguration"/>
            <h4><span class="label true">true</span><span class="label protected">protected</span>processConfiguration<span style="font-size:90%;">( <span class="param-type"><a href="../interfaces/Symfony_Component_Config_Definition_ConfigurationInterface.xhtml">Symfony\Component\Config\Definition\ConfigurationInterface</a></span><strong> $configuration</strong>, <span class="param-type">Array</span><strong> $configs</strong> )</span></h4>
          </li>
          <li>
            <a name="registerMappingDrivers"/>
            <h4><span class="label protected">protected</span>registerMappingDrivers<span style="font-size:90%;">( <span class="param-type">array</span><strong> $objectManager</strong>, <span class="param-type"><a href="../classes/Symfony_Component_DependencyInjection_ContainerBuilder.xhtml">Symfony\Component\DependencyInjection\ContainerBuilder</a></span><strong> $container</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Register all the collected mapping information with the object manager by registering the appropriate mapping drivers.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$objectManager</code> - </li>
                <li><code>$container</code> - A ContainerBuilder instance</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setMappingDriverAlias"/>
            <h4><span class="label protected">protected</span>setMappingDriverAlias<span style="font-size:90%;">( <span class="param-type">array</span><strong> $mappingConfig</strong>, <span class="param-type">string</span><strong> $mappingName</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Register the alias for this mapping driver.<pre>Aliases can be used in the Query languages of all the Doctrine object managers to simplify writing tasks.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$mappingConfig</code> - </li>
                <li><code>$mappingName</code> - </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setMappingDriverConfig"/>
            <h4><span class="label protected">protected</span>setMappingDriverConfig<span style="font-size:90%;">( <span class="param-type">Array</span><strong> $mappingConfig</strong>, <span class="param-type">string</span><strong> $mappingName</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Register the mapping driver configuration for later use with the object managers metadata driver chain.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$mappingConfig</code> - </li>
                <li><code>$mappingName</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\InvalidArgumentException</code>
                </li>
              </ul>
            </ul>
          </li>
        </ul>
        <div class="footer">Generated using phpDox 0.5-40-g758636e - Copyright (C) 2010 - 2013 by Arne Blankerts</div>
      </div>
    </div>
  </body>
</html>
