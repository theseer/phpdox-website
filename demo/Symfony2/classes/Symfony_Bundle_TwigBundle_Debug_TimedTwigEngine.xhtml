<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "html" "">
<html xmlns="http://www.w3.org/1999/xhtml" class="no-js" lang="en">
  <head>
    <meta charset="utf-8"/>
    <title>Symfony2 - Symfony\Bundle\TwigBundle\Debug\TimedTwigEngine - API Documentation</title>
    <link href="../css/normalize.css" rel="stylesheet" type="text/css" media="all"/>
    <link href="../css/styles.css" rel="stylesheet" type="text/css" media="all"/>
  </head>
  <body>
    <div class="wrapper clearfix">
      <div class="topbar clearfix">
        <h1>
          <a class="brand" href="../index.xhtml">Symfony2 - API Documentation</a>
        </h1>
        <ul class="nav">
          <li class="active">
            <a href="../index.xhtml">Overview</a>
          </li>
        </ul>
      </div>
      <div class="navigation">
        <h3>Members</h3>
        <ul>
          <li>
            <a href="#stopwatch">$stopwatch</a>
          </li>
          <li>
            <a href="#locator">$locator</a>
          </li>
          <li>
            <a href="#environment">$environment</a>
          </li>
          <li>
            <a href="#parser">$parser</a>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul>
          <li>
            <a href="#__construct">__construct</a>
          </li>
          <li>
            <a href="#exists">exists</a>
          </li>
          <li>
            <a href="#guessDefaultEscapingStrategy">guessDefaultEscapingStrategy</a>
          </li>
          <li>
            <a href="#load">load</a>
          </li>
          <li>
            <a href="#render">render</a>
          </li>
          <li>
            <a href="#render">render</a>
          </li>
          <li>
            <a href="#render">render</a>
          </li>
          <li>
            <a href="#renderResponse">renderResponse</a>
          </li>
          <li>
            <a href="#setDefaultEscapingStrategy">setDefaultEscapingStrategy</a>
          </li>
          <li>
            <a href="#stream">stream</a>
          </li>
          <li>
            <a href="#supports">supports</a>
          </li>
        </ul>
      </div>
      <div class="content">
        <h2><span style="font-size:60%">Symfony\Bundle\TwigBundle\Debug\</span>TimedTwigEngine</h2>
        <div class="file-notice">
          <p>Times the time spent to render a template.</p>
        </div>
        <ul class="fileinfos">
          <li><b>Author: </b>Fabien Potencier &lt;fabien@symfony.com&gt;</li>
        </ul>
        <h3>Members</h3>
        <ul class="varlist">
          <li>
            <a name="stopwatch"/>
            <h4><span class="label protected">protected</span>
                $stopwatch</h4>
          </li>
        </ul>
        <h3>Constructor</h3>
        <ul class="varlist">
          <li>
            <a name="__construct"/>
            <h4><span class="label public">public</span>__construct<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Twig_Environment.xhtml">Twig_Environment</a></span><strong> $environment</strong>, <span class="param-type"><a href="../interfaces/Symfony_Component_Templating_TemplateNameParserInterface.xhtml">Symfony\Component\Templating\TemplateNameParserInterface</a></span><strong> $parser</strong>, <span class="param-type"><a href="../interfaces/Symfony_Component_Config_FileLocatorInterface.xhtml">Symfony\Component\Config\FileLocatorInterface</a></span><strong> $locator</strong>, <span class="param-type"><a href="../classes/Symfony_Component_Stopwatch_Stopwatch.xhtml">Symfony\Component\Stopwatch\Stopwatch</a></span><strong> $stopwatch</strong>, <span class="param-type"><a href="../classes/Symfony_Bundle_FrameworkBundle_Templating_GlobalVariables.xhtml">Symfony\Bundle\FrameworkBundle\Templating\GlobalVariables</a></span><strong> $globals</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Constructor.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$environment</code> - A \Twig_Environment instance</li>
                <li><code>$parser</code> - A TemplateNameParserInterface instance</li>
                <li><code>$locator</code> - A FileLocatorInterface instance</li>
                <li><code>$stopwatch</code> - A Stopwatch instance</li>
                <li><code>$globals</code> - A GlobalVariables instance</li>
              </ul>
            </ul>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul class="varlist">
          <li>
            <a name="exists"/>
            <h4><span class="label public">public</span>exists<span style="font-size:90%;">( <span class="param-type">mixed</span><strong> $name</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns true if the template exists.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - A template name</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>true if the template exists, false otherwise</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="guessDefaultEscapingStrategy"/>
            <h4><span class="label public">public</span>guessDefaultEscapingStrategy<span style="font-size:90%;">( <span class="param-type"/><strong> $filename</strong> )</span></h4>
          </li>
          <li>
            <a name="render"/>
            <h4><span class="label public">public</span>render<span style="font-size:90%;">( <span class="param-type"/><strong> $name</strong>, <span class="param-type">Array</span><strong> $parameters</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>{@inheritdoc}</li>
            </p>
          </li>
          <li>
            <a name="render"/>
            <h4><span class="label public">public</span>render<span style="font-size:90%;">( <span class="param-type">mixed</span><strong> $name</strong>, <span class="param-type">Array</span><strong> $parameters</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Renders a template.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - A template name</li>
                <li><code>$parameters</code> - An array of parameters to pass to the template</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The evaluated template as a string</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\InvalidArgumentException if the template does not exist</code>
                </li>
                <li>
                  <code>\RuntimeException         if the template cannot be rendered</code>
                </li>
                <li>
                  <code>\Twig_Error</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="render"/>
            <h4><span class="label public">public</span>render<span style="font-size:90%;">( <span class="param-type">mixed</span><strong> $name</strong>, <span class="param-type">Array</span><strong> $parameters</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Renders a template.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - A template name</li>
                <li><code>$parameters</code> - An array of parameters to pass to the template</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The evaluated template as a string</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\InvalidArgumentException if the template does not exist</code>
                </li>
                <li>
                  <code>\RuntimeException         if the template cannot be rendered</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="renderResponse"/>
            <h4><span class="label public">public</span>renderResponse<span style="font-size:90%;">( <span class="param-type">string</span><strong> $view</strong>, <span class="param-type">Array</span><strong> $parameters</strong>, <span class="param-type"><a href="../classes/Symfony_Component_HttpFoundation_Response.xhtml">Symfony\Component\HttpFoundation\Response</a></span><strong> $response</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Renders a view and returns a Response.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$view</code> - The view name</li>
                <li><code>$parameters</code> - An array of parameters to pass to the view</li>
                <li><code>$response</code> - A Response instance</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>A Response instance</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setDefaultEscapingStrategy"/>
            <h4><span class="label public">public</span>setDefaultEscapingStrategy<span style="font-size:90%;">( <span class="param-type"/><strong> $strategy</strong> )</span></h4>
          </li>
          <li>
            <a name="stream"/>
            <h4><span class="label public">public</span>stream<span style="font-size:90%;">( <span class="param-type">mixed</span><strong> $name</strong>, <span class="param-type">Array</span><strong> $parameters</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Streams a template.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - A template name or a TemplateReferenceInterface instance</li>
                <li><code>$parameters</code> - An array of parameters to pass to the template</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\RuntimeException if the template cannot be rendered</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="supports"/>
            <h4><span class="label public">public</span>supports<span style="font-size:90%;">( <span class="param-type">string</span><strong> $name</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns true if this class is able to render the given template.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - A template name</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>True if this class supports the given resource, false otherwise</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="load"/>
            <h4><span class="label protected">protected</span>load<span style="font-size:90%;">( <span class="param-type">mixed</span><strong> $name</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Loads the given template.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - A template name or an instance of Twig_Template</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>A \Twig_TemplateInterface instance</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\InvalidArgumentException if the template does not exist</code>
                </li>
              </ul>
            </ul>
          </li>
        </ul>
        <div class="footer">Generated using phpDox 0.5-40-g758636e - Copyright (C) 2010 - 2013 by Arne Blankerts</div>
      </div>
    </div>
  </body>
</html>
