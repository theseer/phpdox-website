<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "html" "">
<html xmlns="http://www.w3.org/1999/xhtml" class="no-js" lang="en">
  <head>
    <meta charset="utf-8"/>
    <title>Symfony2 - Symfony\Component\HttpKernel\KernelEvents - API Documentation</title>
    <link href="../css/normalize.css" rel="stylesheet" type="text/css" media="all"/>
    <link href="../css/styles.css" rel="stylesheet" type="text/css" media="all"/>
  </head>
  <body>
    <div class="wrapper clearfix">
      <div class="topbar clearfix">
        <h1>
          <a class="brand" href="../index.xhtml">Symfony2 - API Documentation</a>
        </h1>
        <ul class="nav">
          <li class="active">
            <a href="../index.xhtml">Overview</a>
          </li>
        </ul>
      </div>
      <div class="navigation">
        <h3>Constants</h3>
        <ul>
          <li>
            <a href="#REQUEST">REQUEST</a>
          </li>
          <li>
            <a href="#EXCEPTION">EXCEPTION</a>
          </li>
          <li>
            <a href="#VIEW">VIEW</a>
          </li>
          <li>
            <a href="#CONTROLLER">CONTROLLER</a>
          </li>
          <li>
            <a href="#RESPONSE">RESPONSE</a>
          </li>
          <li>
            <a href="#TERMINATE">TERMINATE</a>
          </li>
        </ul>
      </div>
      <div class="content">
        <h2><span style="font-size:60%">Symfony\Component\HttpKernel\</span>KernelEvents</h2>
        <div class="file-notice">
          <p>Contains all events thrown in the HttpKernel component</p>
        </div>
        <ul class="fileinfos">
          <li><b>Author: </b>Bernhard Schussek &lt;bschussek@gmail.com&gt;</li>
        </ul>
        <h3>Constants</h3>
        <ul class="varlist">
          <li><a name="REQUEST"/>REQUEST = 'kernel.request'<em> string</em><p><li>The REQUEST event occurs at the very beginning of request dispatching<pre>This event allows you to create a response for a request before any
other code in the framework is executed. The event listener method
receives a Symfony\Component\HttpKernel\Event\GetResponseEvent
instance.</pre></li></p><hr/></li>
          <li><a name="EXCEPTION"/>EXCEPTION = 'kernel.exception'<em> string</em><p><li>The EXCEPTION event occurs when an uncaught exception appears<pre>This event allows you to create a response for a thrown exception or
to modify the thrown exception. The event listener method receives
a Symfony\Component\HttpKernel\Event\GetResponseForExceptionEvent
instance.</pre></li></p><hr/></li>
          <li><a name="VIEW"/>VIEW = 'kernel.view'<em> string</em><p><li>The VIEW event occurs when the return value of a controller is not a Response instance<pre>This event allows you to create a response for the return value of the
controller. The event listener method receives a
Symfony\Component\HttpKernel\Event\GetResponseForControllerResultEvent
instance.</pre></li></p><hr/></li>
          <li><a name="CONTROLLER"/>CONTROLLER = 'kernel.controller'<em> string</em><p><li>The CONTROLLER event occurs once a controller was found for handling a request<pre>This event allows you to change the controller that will handle the
request. The event listener method receives a
Symfony\Component\HttpKernel\Event\FilterControllerEvent instance.</pre></li></p><hr/></li>
          <li><a name="RESPONSE"/>RESPONSE = 'kernel.response'<em> string</em><p><li>The RESPONSE event occurs once a response was created for replying to a request<pre>This event allows you to modify or replace the response that will be
replied. The event listener method receives a
Symfony\Component\HttpKernel\Event\FilterResponseEvent instance.</pre></li></p><hr/></li>
          <li><a name="TERMINATE"/>TERMINATE = 'kernel.terminate'<em> string</em><p><li>The TERMINATE event occurs once a response was sent<pre>This event allows you to run expensive post-response jobs.
The event listener method receives a
Symfony\Component\HttpKernel\Event\PostResponseEvent instance.</pre></li></p><hr/></li>
        </ul>
        <div class="footer">Generated using phpDox 0.5-40-g758636e - Copyright (C) 2010 - 2013 by Arne Blankerts</div>
      </div>
    </div>
  </body>
</html>
