<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "html" "">
<html xmlns="http://www.w3.org/1999/xhtml" class="no-js" lang="en">
  <head>
    <meta charset="utf-8"/>
    <title>Symfony2 - Doctrine\DBAL\Types\TextType - API Documentation</title>
    <link href="../css/normalize.css" rel="stylesheet" type="text/css" media="all"/>
    <link href="../css/styles.css" rel="stylesheet" type="text/css" media="all"/>
  </head>
  <body>
    <div class="wrapper clearfix">
      <div class="topbar clearfix">
        <h1>
          <a class="brand" href="../index.xhtml">Symfony2 - API Documentation</a>
        </h1>
        <ul class="nav">
          <li class="active">
            <a href="../index.xhtml">Overview</a>
          </li>
        </ul>
      </div>
      <div class="navigation">
        <h3>Methods</h3>
        <ul>
          <li>
            <a href="#__toString">__toString</a>
          </li>
          <li>
            <a href="#addType">addType</a>
          </li>
          <li>
            <a href="#canRequireSQLConversion">canRequireSQLConversion</a>
          </li>
          <li>
            <a href="#convertToDatabaseValue">convertToDatabaseValue</a>
          </li>
          <li>
            <a href="#convertToDatabaseValueSQL">convertToDatabaseValueSQL</a>
          </li>
          <li>
            <a href="#convertToPHPValue">convertToPHPValue</a>
          </li>
          <li>
            <a href="#convertToPHPValue">convertToPHPValue</a>
          </li>
          <li>
            <a href="#convertToPHPValueSQL">convertToPHPValueSQL</a>
          </li>
          <li>
            <a href="#getBindingType">getBindingType</a>
          </li>
          <li>
            <a href="#getDefaultLength">getDefaultLength</a>
          </li>
          <li>
            <a href="#getMappedDatabaseTypes">getMappedDatabaseTypes</a>
          </li>
          <li>
            <a href="#getName">getName</a>
          </li>
          <li>
            <a href="#getName">getName</a>
          </li>
          <li>
            <a href="#getSQLDeclaration">getSQLDeclaration</a>
          </li>
          <li>
            <a href="#getSQLDeclaration">getSQLDeclaration</a>
          </li>
          <li>
            <a href="#getType">getType</a>
          </li>
          <li>
            <a href="#getTypesMap">getTypesMap</a>
          </li>
          <li>
            <a href="#hasType">hasType</a>
          </li>
          <li>
            <a href="#overrideType">overrideType</a>
          </li>
          <li>
            <a href="#requiresSQLCommentHint">requiresSQLCommentHint</a>
          </li>
        </ul>
      </div>
      <div class="content">
        <h2><span style="font-size:60%">Doctrine\DBAL\Types\</span>TextType</h2>
        <div class="file-notice">
          <p>Type that maps an SQL CLOB to a PHP string.</p>
        </div>
        <ul class="fileinfos"/>
        <h3>Constants</h3>
        <ul class="varlist"/>
        <h3>Methods</h3>
        <ul class="varlist">
          <li>
            <a name="__toString"/>
            <h4><span class="label public">public</span>__toString<span style="font-size:90%;">(  )</span></h4>
          </li>
          <li>
            <a name="addType"/>
            <h4><span class="label true">true</span><span class="label public">public</span>addType<span style="font-size:90%;">( <span class="param-type">string</span><strong> $name</strong>, <span class="param-type">string</span><strong> $className</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Adds a custom type to the type map.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - Name of the type. This should correspond to what getName() returns.</li>
                <li><code>$className</code> - The class name of the custom type.</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>DBALException</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="canRequireSQLConversion"/>
            <h4><span class="label public">public</span>canRequireSQLConversion<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Does working with this column require SQL conversion functions?<pre>This is a metadata function that is required for example in the ORM.
Usage of  and
 works for any type and mostly
does nothing. This method can additionally be used for optimization purposes.
</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="convertToDatabaseValue"/>
            <h4><span class="label public">public</span>convertToDatabaseValue<span style="font-size:90%;">( <span class="param-type">mixed</span><strong> $value</strong>, <span class="param-type"><a href="../classes/Doctrine_DBAL_Platforms_AbstractPlatform.xhtml">Doctrine\DBAL\Platforms\AbstractPlatform</a></span><strong> $platform</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Converts a value from its PHP representation to its database representation of this type.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$value</code> - The value to convert.</li>
                <li><code>$platform</code> - The currently used database platform.</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The database representation of the value.</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="convertToDatabaseValueSQL"/>
            <h4><span class="label public">public</span>convertToDatabaseValueSQL<span style="font-size:90%;">( <span class="param-type">string</span><strong> $sqlExpr</strong>, <span class="param-type"><a href="../classes/Doctrine_DBAL_Platforms_AbstractPlatform.xhtml">Doctrine\DBAL\Platforms\AbstractPlatform</a></span><strong> $platform</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Modifies the SQL expression (identifier, parameter) to convert to a database value.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$sqlExpr</code> - </li>
                <li><code>$platform</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="convertToPHPValue"/>
            <h4><span class="label public">public</span>convertToPHPValue<span style="font-size:90%;">( <span class="param-type">mixed</span><strong> $value</strong>, <span class="param-type"><a href="../classes/Doctrine_DBAL_Platforms_AbstractPlatform.xhtml">Doctrine\DBAL\Platforms\AbstractPlatform</a></span><strong> $platform</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Converts a value from its database representation to its PHP representation of this type.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$value</code> - The value to convert.</li>
                <li><code>$platform</code> - The currently used database platform.</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The PHP representation of the value.</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="convertToPHPValue"/>
            <h4><span class="label public">public</span>convertToPHPValue<span style="font-size:90%;">( <span class="param-type">mixed</span><strong> $value</strong>, <span class="param-type"><a href="../classes/Doctrine_DBAL_Platforms_AbstractPlatform.xhtml">Doctrine\DBAL\Platforms\AbstractPlatform</a></span><strong> $platform</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Converts a value from its database representation to its PHP representation of this type.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$value</code> - The value to convert.</li>
                <li><code>$platform</code> - The currently used database platform.</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The PHP representation of the value.</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="convertToPHPValueSQL"/>
            <h4><span class="label public">public</span>convertToPHPValueSQL<span style="font-size:90%;">( <span class="param-type">string</span><strong> $sqlExpr</strong>, <span class="param-type"><a href="../classes/Doctrine_DBAL_Platforms_AbstractPlatform.xhtml">Doctrine\DBAL\Platforms\AbstractPlatform</a></span><strong> $platform</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Modifies the SQL expression (identifier, parameter) to convert to a PHP value.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$sqlExpr</code> - </li>
                <li><code>$platform</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getBindingType"/>
            <h4><span class="label public">public</span>getBindingType<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the (preferred) binding type for values of this type that can be used when binding parameters to prepared statements.<pre>This method should return one of the PDO::PARAM_* constants, that is, one of:

PDO::PARAM_BOOL
PDO::PARAM_NULL
PDO::PARAM_INT
PDO::PARAM_STR
PDO::PARAM_LOB</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getDefaultLength"/>
            <h4><span class="label public">public</span>getDefaultLength<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Doctrine_DBAL_Platforms_AbstractPlatform.xhtml">Doctrine\DBAL\Platforms\AbstractPlatform</a></span><strong> $platform</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the default length of this type.</li>
            </p>
          </li>
          <li>
            <a name="getMappedDatabaseTypes"/>
            <h4><span class="label public">public</span>getMappedDatabaseTypes<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Doctrine_DBAL_Platforms_AbstractPlatform.xhtml">Doctrine\DBAL\Platforms\AbstractPlatform</a></span><strong> $platform</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Get an array of database types that map to this Doctrine type.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$platform</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getName"/>
            <h4><span class="label public">public</span>getName<span style="font-size:90%;">(  )</span></h4>
          </li>
          <li>
            <a name="getName"/>
            <h4><span class="label true">true</span><span class="label public">public</span>getName<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the name of this type.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getSQLDeclaration"/>
            <h4><span class="label public">public</span>getSQLDeclaration<span style="font-size:90%;">( <span class="param-type">Array</span><strong> $fieldDeclaration</strong>, <span class="param-type"><a href="../classes/Doctrine_DBAL_Platforms_AbstractPlatform.xhtml">Doctrine\DBAL\Platforms\AbstractPlatform</a></span><strong> $platform</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;"/>
          </li>
          <li>
            <a name="getSQLDeclaration"/>
            <h4><span class="label true">true</span><span class="label public">public</span>getSQLDeclaration<span style="font-size:90%;">( <span class="param-type">Array</span><strong> $fieldDeclaration</strong>, <span class="param-type"><a href="../classes/Doctrine_DBAL_Platforms_AbstractPlatform.xhtml">Doctrine\DBAL\Platforms\AbstractPlatform</a></span><strong> $platform</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the SQL declaration snippet for a field of this type.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$fieldDeclaration</code> - The field declaration.</li>
                <li><code>$platform</code> - The currently used database platform.</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getType"/>
            <h4><span class="label true">true</span><span class="label public">public</span>getType<span style="font-size:90%;">( <span class="param-type">string</span><strong> $name</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Factory method to create type instances.<pre>Type instances are implemented as flyweights.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - The name of the type (as returned by getName()).</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>DBALException</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getTypesMap"/>
            <h4><span class="label true">true</span><span class="label public">public</span>getTypesMap<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Get the types array map which holds all registered types and the corresponding type class</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>$typesMap</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="hasType"/>
            <h4><span class="label true">true</span><span class="label public">public</span>hasType<span style="font-size:90%;">( <span class="param-type">string</span><strong> $name</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Checks if exists support for a type.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - Name of the type</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>TRUE if type is supported; FALSE otherwise</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="overrideType"/>
            <h4><span class="label true">true</span><span class="label public">public</span>overrideType<span style="font-size:90%;">( <span class="param-type">string</span><strong> $name</strong>, <span class="param-type">string</span><strong> $className</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Overrides an already defined type to use a different implementation.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - </li>
                <li><code>$className</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>DBALException</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="requiresSQLCommentHint"/>
            <h4><span class="label public">public</span>requiresSQLCommentHint<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Doctrine_DBAL_Platforms_AbstractPlatform.xhtml">Doctrine\DBAL\Platforms\AbstractPlatform</a></span><strong> $platform</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>If this Doctrine Type maps to an already mapped database type, reverse schema engineering can't take them apart. You need to mark one of those types as commented, which will have Doctrine use an SQL comment to typehint the actual Doctrine Type.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$platform</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
        </ul>
        <div class="footer">Generated using phpDox 0.5-40-g758636e - Copyright (C) 2010 - 2013 by Arne Blankerts</div>
      </div>
    </div>
  </body>
</html>
