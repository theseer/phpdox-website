<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "html" "">
<html xmlns="http://www.w3.org/1999/xhtml" class="no-js" lang="en">
  <head>
    <meta charset="utf-8"/>
    <title>Symfony2 - Symfony\Component\Form\Forms - API Documentation</title>
    <link href="../css/normalize.css" rel="stylesheet" type="text/css" media="all"/>
    <link href="../css/styles.css" rel="stylesheet" type="text/css" media="all"/>
  </head>
  <body>
    <div class="wrapper clearfix">
      <div class="topbar clearfix">
        <h1>
          <a class="brand" href="../index.xhtml">Symfony2 - API Documentation</a>
        </h1>
        <ul class="nav">
          <li class="active">
            <a href="../index.xhtml">Overview</a>
          </li>
        </ul>
      </div>
      <div class="navigation">
        <h3>Methods</h3>
        <ul>
          <li>
            <a href="#__construct">__construct</a>
          </li>
          <li>
            <a href="#createFormFactory">createFormFactory</a>
          </li>
          <li>
            <a href="#createFormFactoryBuilder">createFormFactoryBuilder</a>
          </li>
        </ul>
      </div>
      <div class="content">
        <h2><span style="font-size:60%">Symfony\Component\Form\</span>Forms</h2>
        <div class="file-notice">
          <p>Entry point of the Form component.</p>
          <p>
            <pre>Use this class to conveniently create new form factories:

&lt;code&gt;
use Symfony\Component\Form\Forms;

$formFactory = Forms::createFormFactory();

$form = $formFactory-&gt;createBuilder()
    -&gt;add('firstName', 'text')
    -&gt;add('lastName', 'text')
    -&gt;add('age', 'integer')
    -&gt;add('gender', 'choice', array(
        'choices' =&gt; array('m' =&gt; 'Male', 'f' =&gt; 'Female'),
    ))
    -&gt;getForm();
&lt;/code&gt;

You can also add custom extensions to the form factory:

&lt;code&gt;
$formFactory = Forms::createFormFactoryBuilder()
    -&gt;addExtension(new AcmeExtension())
    -&gt;getFormFactory();
&lt;/code&gt;

If you create custom form types or type extensions, it is
generally recommended to create your own extensions that lazily
load these types and type extensions. In projects where performance
does not matter that much, you can also pass them directly to the
form factory:

&lt;code&gt;
$formFactory = Forms::createFormFactoryBuilder()
    -&gt;addType(new PersonType())
    -&gt;addType(new PhoneNumberType())
    -&gt;addTypeExtension(new FormTypeHelpTextExtension())
    -&gt;getFormFactory();
&lt;/code&gt;

Support for CSRF protection is provided by the CsrfExtension.
This extension needs a CSRF provider with a strong secret
(e.g. a 20 character long random string). The default
implementation for this is DefaultCsrfProvider:

&lt;code&gt;
use Symfony\Component\Form\Extension\Csrf\CsrfExtension;
use Symfony\Component\Form\Extension\Csrf\CsrfProvider\DefaultCsrfProvider;

$secret = 'V8a5Z97e...';
$formFactory = Forms::createFormFactoryBuilder()
    -&gt;addExtension(new CsrfExtension(new DefaultCsrfProvider($secret)))
    -&gt;getFormFactory();
&lt;/code&gt;

Support for the HttpFoundation is provided by the
HttpFoundationExtension. You are also advised to load the CSRF
extension with the driver for HttpFoundation's Session class:

&lt;code&gt;
use Symfony\Component\HttpFoundation\Session\Session;
use Symfony\Component\Form\Extension\HttpFoundation\HttpFoundationExtension;
use Symfony\Component\Form\Extension\Csrf\CsrfExtension;
use Symfony\Component\Form\Extension\Csrf\CsrfProvider\SessionCsrfProvider;

$session = new Session();
$secret = 'V8a5Z97e...';
$formFactory = Forms::createFormFactoryBuilder()
    -&gt;addExtension(new HttpFoundationExtension())
    -&gt;addExtension(new CsrfExtension(new SessionCsrfProvider($session, $secret)))
    -&gt;getFormFactory();
&lt;/code&gt;

Support for the Validator component is provided by ValidatorExtension.
This extension needs a validator object to function properly:

&lt;code&gt;
use Symfony\Component\Validator\Validation;
use Symfony\Component\Form\Extension\Validator\ValidatorExtension;

$validator = Validation::createValidator();
$formFactory = Forms::createFormFactoryBuilder()
    -&gt;addExtension(new ValidatorExtension($validator))
    -&gt;getFormFactory();
&lt;/code&gt;

Support for the Templating component is provided by TemplatingExtension.
This extension needs a PhpEngine object for rendering forms. As second
argument you should pass the names of the default themes. Here is an
example for using the default layout with "&lt;div&gt;" tags:

&lt;code&gt;
use Symfony\Component\Form\Extension\Templating\TemplatingExtension;

$formFactory = Forms::createFormFactoryBuilder()
    -&gt;addExtension(new TemplatingExtension($engine, null, array(
        'FrameworkBundle:Form',
    )))
    -&gt;getFormFactory();
&lt;/code&gt;

The next example shows how to include the "&lt;table&gt;" layout:

&lt;code&gt;
use Symfony\Component\Form\Extension\Templating\TemplatingExtension;

$formFactory = Forms::createFormFactoryBuilder()
    -&gt;addExtension(new TemplatingExtension($engine, null, array(
        'FrameworkBundle:Form',
        'FrameworkBundle:FormTable',
    )))
    -&gt;getFormFactory();
&lt;/code&gt;

If you also loaded the CsrfExtension, you should pass the CSRF provider
to the extension so that you can render CSRF tokens in your templates
more easily:

&lt;code&gt;
use Symfony\Component\Form\Extension\Csrf\CsrfExtension;
use Symfony\Component\Form\Extension\Csrf\CsrfProvider\DefaultCsrfProvider;
use Symfony\Component\Form\Extension\Templating\TemplatingExtension;


$secret = 'V8a5Z97e...';
$csrfProvider = new DefaultCsrfProvider($secret);
$formFactory = Forms::createFormFactoryBuilder()
    -&gt;addExtension(new CsrfExtension($csrfProvider))
    -&gt;addExtension(new TemplatingExtension($engine, $csrfProvider, array(
        'FrameworkBundle:Form',
    )))
    -&gt;getFormFactory();
&lt;/code&gt;</pre>
          </p>
        </div>
        <ul class="fileinfos">
          <li><b>Author: </b>Bernhard Schussek &lt;bschussek@gmail.com&gt;</li>
        </ul>
        <h3>Constructor</h3>
        <ul class="varlist">
          <li>
            <a name="__construct"/>
            <h4><span class="label private">private</span>__construct<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>This class cannot be instantiated.</li>
            </p>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul class="varlist">
          <li>
            <a name="createFormFactory"/>
            <h4><span class="label true">true</span><span class="label public">public</span>createFormFactory<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Creates a form factory with the default configuration.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The form factory.</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="createFormFactoryBuilder"/>
            <h4><span class="label true">true</span><span class="label public">public</span>createFormFactoryBuilder<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Creates a form factory builder with the default configuration.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The form factory builder.</li>
              </ul>
            </ul>
          </li>
        </ul>
        <div class="footer">Generated using phpDox 0.5-40-g758636e - Copyright (C) 2010 - 2013 by Arne Blankerts</div>
      </div>
    </div>
  </body>
</html>
