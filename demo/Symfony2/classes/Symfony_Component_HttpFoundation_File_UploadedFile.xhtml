<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "html" "">
<html xmlns="http://www.w3.org/1999/xhtml" class="no-js" lang="en">
  <head>
    <meta charset="utf-8"/>
    <title>Symfony2 - Symfony\Component\HttpFoundation\File\UploadedFile - API Documentation</title>
    <link href="../css/normalize.css" rel="stylesheet" type="text/css" media="all"/>
    <link href="../css/styles.css" rel="stylesheet" type="text/css" media="all"/>
  </head>
  <body>
    <div class="wrapper clearfix">
      <div class="topbar clearfix">
        <h1>
          <a class="brand" href="../index.xhtml">Symfony2 - API Documentation</a>
        </h1>
        <ul class="nav">
          <li class="active">
            <a href="../index.xhtml">Overview</a>
          </li>
        </ul>
      </div>
      <div class="navigation">
        <h3>Members</h3>
        <ul>
          <li>
            <a href="#test">$test</a>
          </li>
          <li>
            <a href="#originalName">$originalName</a>
          </li>
          <li>
            <a href="#mimeType">$mimeType</a>
          </li>
          <li>
            <a href="#size">$size</a>
          </li>
          <li>
            <a href="#error">$error</a>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul>
          <li>
            <a href="#__construct">__construct</a>
          </li>
          <li>
            <a href="#__toString">__toString</a>
          </li>
          <li>
            <a href="#getATime">getATime</a>
          </li>
          <li>
            <a href="#getBasename">getBasename</a>
          </li>
          <li>
            <a href="#getCTime">getCTime</a>
          </li>
          <li>
            <a href="#getClientMimeType">getClientMimeType</a>
          </li>
          <li>
            <a href="#getClientOriginalExtension">getClientOriginalExtension</a>
          </li>
          <li>
            <a href="#getClientOriginalName">getClientOriginalName</a>
          </li>
          <li>
            <a href="#getClientSize">getClientSize</a>
          </li>
          <li>
            <a href="#getError">getError</a>
          </li>
          <li>
            <a href="#getErrorMessage">getErrorMessage</a>
          </li>
          <li>
            <a href="#getExtension">getExtension</a>
          </li>
          <li>
            <a href="#getExtension">getExtension</a>
          </li>
          <li>
            <a href="#getFileInfo">getFileInfo</a>
          </li>
          <li>
            <a href="#getFilename">getFilename</a>
          </li>
          <li>
            <a href="#getGroup">getGroup</a>
          </li>
          <li>
            <a href="#getInode">getInode</a>
          </li>
          <li>
            <a href="#getLinkTarget">getLinkTarget</a>
          </li>
          <li>
            <a href="#getMTime">getMTime</a>
          </li>
          <li>
            <a href="#getMaxFilesize">getMaxFilesize</a>
          </li>
          <li>
            <a href="#getMimeType">getMimeType</a>
          </li>
          <li>
            <a href="#getName">getName</a>
          </li>
          <li>
            <a href="#getOwner">getOwner</a>
          </li>
          <li>
            <a href="#getPath">getPath</a>
          </li>
          <li>
            <a href="#getPathInfo">getPathInfo</a>
          </li>
          <li>
            <a href="#getPathname">getPathname</a>
          </li>
          <li>
            <a href="#getPerms">getPerms</a>
          </li>
          <li>
            <a href="#getRealPath">getRealPath</a>
          </li>
          <li>
            <a href="#getSize">getSize</a>
          </li>
          <li>
            <a href="#getTargetFile">getTargetFile</a>
          </li>
          <li>
            <a href="#getType">getType</a>
          </li>
          <li>
            <a href="#guessClientExtension">guessClientExtension</a>
          </li>
          <li>
            <a href="#guessExtension">guessExtension</a>
          </li>
          <li>
            <a href="#isDir">isDir</a>
          </li>
          <li>
            <a href="#isExecutable">isExecutable</a>
          </li>
          <li>
            <a href="#isFile">isFile</a>
          </li>
          <li>
            <a href="#isLink">isLink</a>
          </li>
          <li>
            <a href="#isReadable">isReadable</a>
          </li>
          <li>
            <a href="#isValid">isValid</a>
          </li>
          <li>
            <a href="#isWritable">isWritable</a>
          </li>
          <li>
            <a href="#move">move</a>
          </li>
          <li>
            <a href="#move">move</a>
          </li>
          <li>
            <a href="#openFile">openFile</a>
          </li>
          <li>
            <a href="#setFileClass">setFileClass</a>
          </li>
          <li>
            <a href="#setInfoClass">setInfoClass</a>
          </li>
        </ul>
      </div>
      <div class="content">
        <h2><span style="font-size:60%">Symfony\Component\HttpFoundation\File\</span>UploadedFile</h2>
        <div class="file-notice">
          <p>A file uploaded through a form.</p>
        </div>
        <ul class="fileinfos">
          <li><b>Author: </b>Bernhard Schussek &lt;bschussek@gmail.com&gt;</li>
          <li><b>Author: </b>Florian Eckerstorfer &lt;florian@eckerstorfer.org&gt;</li>
          <li><b>Author: </b>Fabien Potencier &lt;fabien@symfony.com&gt;</li>
        </ul>
        <h3>Members</h3>
        <ul class="varlist">
          <li>
            <a name="test"/>
            <h4><span class="label private">private</span>object 
                
                $test</h4>
            <ul class="varlist">
              <li>Whether the test mode is activated.<pre>Local files are used in test mode hence the code should not enforce HTTP uploads.</pre></li>
            </ul>
          </li>
          <li>
            <a name="originalName"/>
            <h4><span class="label private">private</span>string 
                
                $originalName</h4>
            <ul class="varlist">
              <li>The original name of the uploaded file.</li>
            </ul>
          </li>
          <li>
            <a name="mimeType"/>
            <h4><span class="label private">private</span>string 
                
                $mimeType</h4>
            <ul class="varlist">
              <li>The mime type provided by the uploader.</li>
            </ul>
          </li>
          <li>
            <a name="size"/>
            <h4><span class="label private">private</span>string 
                
                $size</h4>
            <ul class="varlist">
              <li>The file size provided by the uploader.</li>
            </ul>
          </li>
          <li>
            <a name="error"/>
            <h4><span class="label private">private</span>integer 
                
                $error</h4>
            <ul class="varlist">
              <li>The UPLOAD_ERR_XXX constant provided by the uploader.</li>
            </ul>
          </li>
        </ul>
        <h3>Constructor</h3>
        <ul class="varlist">
          <li>
            <a name="__construct"/>
            <h4><span class="label public">public</span>__construct<span style="font-size:90%;">( <span class="param-type">string</span><strong> $path</strong>, <span class="param-type">string</span><strong> $originalName</strong>, <span class="param-type">string</span><strong> $mimeType</strong>, <span class="param-type">integer</span><strong> $size</strong>, <span class="param-type">integer</span><strong> $error</strong>, <span class="param-type"><span title="Boolean">Boolean</span></span><strong> $test</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Accepts the information of the uploaded file as provided by the PHP global $_FILES.<pre>The file object is only created when the uploaded file is valid (i.e. when the
isValid() method returns true). Otherwise the only methods that could be called
on an UploadedFile instance are:

  * getClientOriginalName,
  * getClientMimeType,
  * isValid,
  * getError.

Calling any other method on an non-valid instance will cause an unpredictable result.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$path</code> - The full temporary path to the file</li>
                <li><code>$originalName</code> - The original file name</li>
                <li><code>$mimeType</code> - The type of the file as provided by PHP</li>
                <li><code>$size</code> - The file size</li>
                <li><code>$error</code> - The error constant of the upload (one of PHP's UPLOAD_ERR_XXX constants)</li>
                <li><code>$test</code> - Whether the test mode is active</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>FileException         If file_uploads is disabled</code>
                </li>
                <li>
                  <code>FileNotFoundException If the file does not exist</code>
                </li>
              </ul>
            </ul>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul class="varlist">
          <li>
            <a name="__toString"/>
            <h4><span class="label public">public</span>__toString<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the path to the file as a string</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getATime"/>
            <h4><span class="label public">public</span>getATime<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets last access time of the file</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getBasename"/>
            <h4><span class="label public">public</span>getBasename<span style="font-size:90%;">( [<span class="param-type">string</span><strong> $suffix</strong> ] )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the base name of the file</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getCTime"/>
            <h4><span class="label public">public</span>getCTime<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the inode change time</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getClientMimeType"/>
            <h4><span class="label public">public</span>getClientMimeType<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the file mime type.<pre>The client mime type is extracted from the request from which the file
was uploaded, so it should not be considered as a safe value.

For a trusted mime type, use getMimeType() instead (which guesses the mime
type based on the file content).</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The mime type</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getClientOriginalExtension"/>
            <h4><span class="label public">public</span>getClientOriginalExtension<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the original file extension<pre>It is extracted from the original file name that was uploaded.
Then is should not be considered as a safe value.</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The extension</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getClientOriginalName"/>
            <h4><span class="label public">public</span>getClientOriginalName<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the original file name.<pre>It is extracted from the request from which the file has been uploaded.
Then is should not be considered as a safe value.</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The original name</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getClientSize"/>
            <h4><span class="label public">public</span>getClientSize<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the file size.<pre>It is extracted from the request from which the file has been uploaded.
Then is should not be considered as a safe value.</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The file size</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getError"/>
            <h4><span class="label public">public</span>getError<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the upload error.<pre>If the upload was successful, the constant UPLOAD_ERR_OK is returned.
Otherwise one of the other UPLOAD_ERR_XXX constants is returned.</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The upload error</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getExtension"/>
            <h4><span class="label public">public</span>getExtension<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the extension of the file.<pre>\SplFileInfo::getExtension() is not available before PHP 5.3.6</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The extension</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getExtension"/>
            <h4><span class="label public">public</span>getExtension<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the file extension</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getFileInfo"/>
            <h4><span class="label public">public</span>getFileInfo<span style="font-size:90%;">( [<span class="param-type">string</span><strong> $class_name</strong> ] )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets an SplFileInfo object for the file</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getFilename"/>
            <h4><span class="label public">public</span>getFilename<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the filename</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getGroup"/>
            <h4><span class="label public">public</span>getGroup<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the file group</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getInode"/>
            <h4><span class="label public">public</span>getInode<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the inode for the file</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getLinkTarget"/>
            <h4><span class="label public">public</span>getLinkTarget<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the target of a link<pre>Gets the target of a filesystem link.</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getMTime"/>
            <h4><span class="label public">public</span>getMTime<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the last modified time</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getMaxFilesize"/>
            <h4><span class="label true">true</span><span class="label public">public</span>getMaxFilesize<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the maximum size of an uploaded file as configured in php.ini</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The maximum size of an uploaded file in bytes</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getMimeType"/>
            <h4><span class="label public">public</span>getMimeType<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the mime type of the file.<pre>The mime type is guessed using a MimeTypeGuesser instance, which uses finfo(),
mime_content_type() and the system binary "file" (in this order), depending on
which of those are available.</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The guessed mime type (i.e. "application/pdf")</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getOwner"/>
            <h4><span class="label public">public</span>getOwner<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the owner of the file</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getPath"/>
            <h4><span class="label public">public</span>getPath<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the path without filename</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getPathInfo"/>
            <h4><span class="label public">public</span>getPathInfo<span style="font-size:90%;">( [<span class="param-type">string</span><strong> $class_name</strong> ] )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets an SplFileInfo object for the path</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getPathname"/>
            <h4><span class="label public">public</span>getPathname<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the path to the file</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getPerms"/>
            <h4><span class="label public">public</span>getPerms<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets file permissions</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getRealPath"/>
            <h4><span class="label public">public</span>getRealPath<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets absolute path to file</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getSize"/>
            <h4><span class="label public">public</span>getSize<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets file size</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getType"/>
            <h4><span class="label public">public</span>getType<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets file type</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="guessClientExtension"/>
            <h4><span class="label public">public</span>guessClientExtension<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the extension based on the client mime type.<pre>If the mime type is unknown, returns null.

This method uses the mime type as guessed by getClientMimeType()
to guess the file extension. As such, the extension returned
by this method cannot be trusted.

For a trusted extension, use guessExtension() instead (which guesses
the extension based on the guessed mime type for the file).</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The guessed extension or null if it cannot be guessed</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="guessExtension"/>
            <h4><span class="label public">public</span>guessExtension<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the extension based on the mime type.<pre>If the mime type is unknown, returns null.

This method uses the mime type as guessed by getMimeType()
to guess the file extension.</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The guessed extension or null if it cannot be guessed</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="isDir"/>
            <h4><span class="label public">public</span>isDir<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Tells if the file is a directory</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="isExecutable"/>
            <h4><span class="label public">public</span>isExecutable<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Tells if the file is executable</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="isFile"/>
            <h4><span class="label public">public</span>isFile<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Tells if the object references a regular file</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="isLink"/>
            <h4><span class="label public">public</span>isLink<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Tells if the file is a link</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="isReadable"/>
            <h4><span class="label public">public</span>isReadable<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Tells if file is readable</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="isValid"/>
            <h4><span class="label public">public</span>isValid<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns whether the file was uploaded successfully.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>True if the file has been uploaded with HTTP and no error occurred.</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="isWritable"/>
            <h4><span class="label public">public</span>isWritable<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Tells if the entry is writable</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="move"/>
            <h4><span class="label public">public</span>move<span style="font-size:90%;">( <span class="param-type">string</span><strong> $directory</strong>, <span class="param-type">string</span><strong> $name</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Moves the file to a new location.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$directory</code> - The destination folder</li>
                <li><code>$name</code> - The new file name</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>A File object representing the new file</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>FileException if, for any reason, the file could not have been moved</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="move"/>
            <h4><span class="label public">public</span>move<span style="font-size:90%;">( <span class="param-type">string</span><strong> $directory</strong>, <span class="param-type">string</span><strong> $name</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Moves the file to a new location.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$directory</code> - The destination folder</li>
                <li><code>$name</code> - The new file name</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>A File object representing the new file</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>FileException if the target file could not be created</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="openFile"/>
            <h4><span class="label public">public</span>openFile<span style="font-size:90%;">( [<span class="param-type">string</span><strong> $open_mode</strong>, [<span class="param-type">invalid method call</span><strong> $use_include_path</strong>, [<span class="param-type">invalid method call</span><strong> $context</strong> ] ] ] )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets an SplFileObject object for the file</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setFileClass"/>
            <h4><span class="label public">public</span>setFileClass<span style="font-size:90%;">( [<span class="param-type">string</span><strong> $class_name</strong> ] )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sets the class name used with SplFileInfo::openFile</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setInfoClass"/>
            <h4><span class="label public">public</span>setInfoClass<span style="font-size:90%;">( [<span class="param-type">string</span><strong> $class_name</strong> ] )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sets the class used with getFileInfo and getPathInfo</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getName"/>
            <h4><span class="label protected">protected</span>getName<span style="font-size:90%;">( <span class="param-type">string</span><strong> $name</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns locale independent base name of the given path.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - The new file name</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>containing</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getTargetFile"/>
            <h4><span class="label protected">protected</span>getTargetFile<span style="font-size:90%;">( <span class="param-type"/><strong> $directory</strong>, <span class="param-type"/><strong> $name</strong> )</span></h4>
          </li>
          <li>
            <a name="getErrorMessage"/>
            <h4><span class="label private">private</span>getErrorMessage<span style="font-size:90%;">( <span class="param-type"/><strong> $errorCode</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns an informative upload error message.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$code</code> - The error code returned by an upload attempt</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The error message regarding the specified error code</li>
              </ul>
            </ul>
          </li>
        </ul>
        <div class="footer">Generated using phpDox 0.5-40-g758636e - Copyright (C) 2010 - 2013 by Arne Blankerts</div>
      </div>
    </div>
  </body>
</html>
