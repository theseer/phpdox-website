<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "html" "">
<html xmlns="http://www.w3.org/1999/xhtml" class="no-js" lang="en">
  <head>
    <meta charset="utf-8"/>
    <title>Symfony2 - Twig_Template - API Documentation</title>
    <link href="../css/normalize.css" rel="stylesheet" type="text/css" media="all"/>
    <link href="../css/styles.css" rel="stylesheet" type="text/css" media="all"/>
  </head>
  <body>
    <div class="wrapper clearfix">
      <div class="topbar clearfix">
        <h1>
          <a class="brand" href="../index.xhtml">Symfony2 - API Documentation</a>
        </h1>
        <ul class="nav">
          <li class="active">
            <a href="../index.xhtml">Overview</a>
          </li>
        </ul>
      </div>
      <div class="navigation">
        <h3>Members</h3>
        <ul>
          <li>
            <a href="#cache">$cache</a>
          </li>
          <li>
            <a href="#parent">$parent</a>
          </li>
          <li>
            <a href="#parents">$parents</a>
          </li>
          <li>
            <a href="#env">$env</a>
          </li>
          <li>
            <a href="#blocks">$blocks</a>
          </li>
          <li>
            <a href="#traits">$traits</a>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul>
          <li>
            <a href="#__construct">__construct</a>
          </li>
          <li>
            <a href="#clearCache">clearCache</a>
          </li>
          <li>
            <a href="#display">display</a>
          </li>
          <li>
            <a href="#displayBlock">displayBlock</a>
          </li>
          <li>
            <a href="#displayParentBlock">displayParentBlock</a>
          </li>
          <li>
            <a href="#displayWithErrorHandling">displayWithErrorHandling</a>
          </li>
          <li>
            <a href="#doDisplay">doDisplay</a>
          </li>
          <li>
            <a href="#doGetParent">doGetParent</a>
          </li>
          <li>
            <a href="#getAttribute">getAttribute</a>
          </li>
          <li>
            <a href="#getBlockNames">getBlockNames</a>
          </li>
          <li>
            <a href="#getBlocks">getBlocks</a>
          </li>
          <li>
            <a href="#getContext">getContext</a>
          </li>
          <li>
            <a href="#getEnvironment">getEnvironment</a>
          </li>
          <li>
            <a href="#getParent">getParent</a>
          </li>
          <li>
            <a href="#getTemplateName">getTemplateName</a>
          </li>
          <li>
            <a href="#hasBlock">hasBlock</a>
          </li>
          <li>
            <a href="#isTraitable">isTraitable</a>
          </li>
          <li>
            <a href="#render">render</a>
          </li>
          <li>
            <a href="#renderBlock">renderBlock</a>
          </li>
          <li>
            <a href="#renderParentBlock">renderParentBlock</a>
          </li>
        </ul>
      </div>
      <div class="content">
        <h2><span style="font-size:60%">\</span>Twig_Template</h2>
        <div class="file-notice">
          <p>Default base class for compiled templates.</p>
        </div>
        <ul class="fileinfos">
          <li><b>Author: </b>Fabien Potencier &lt;fabien@symfony.com&gt;</li>
        </ul>
        <h3>Implements</h3>
        <ul class="varlist">
          <li>
            <a href="../interfaces/Twig_TemplateInterface.xhtml">Twig_TemplateInterface</a>
          </li>
        </ul>
        <h3>Members</h3>
        <ul class="varlist">
          <li>
            <a name="cache"/>
            <h4><span class="label protected">protected</span>
                $cache</h4>
          </li>
          <li>
            <a name="parent"/>
            <h4><span class="label protected">protected</span>
                $parent</h4>
          </li>
          <li>
            <a name="parents"/>
            <h4><span class="label protected">protected</span>
                $parents</h4>
          </li>
          <li>
            <a name="env"/>
            <h4><span class="label protected">protected</span>
                $env</h4>
          </li>
          <li>
            <a name="blocks"/>
            <h4><span class="label protected">protected</span>
                $blocks</h4>
          </li>
          <li>
            <a name="traits"/>
            <h4><span class="label protected">protected</span>
                $traits</h4>
          </li>
        </ul>
        <h3>Constructor</h3>
        <ul class="varlist">
          <li>
            <a name="__construct"/>
            <h4><span class="label public">public</span>__construct<span style="font-size:90%;">( <span class="param-type"><span title="\\Twig_Environment">Twig_Environment</span></span><strong> $env</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Constructor.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$env</code> - A Twig_Environment instance</li>
              </ul>
            </ul>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul class="varlist">
          <li>
            <a name="clearCache"/>
            <h4><span class="label true">true</span><span class="label public">public</span>clearCache<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>This method is only useful when testing Twig. Do not use it.</li>
            </p>
          </li>
          <li>
            <a name="display"/>
            <h4><span class="label public">public</span>display<span style="font-size:90%;">( <span class="param-type">Array</span><strong> $context</strong>, <span class="param-type">Array</span><strong> $blocks</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>{@inheritdoc}</li>
            </p>
          </li>
          <li>
            <a name="displayBlock"/>
            <h4><span class="label public">public</span>displayBlock<span style="font-size:90%;">( <span class="param-type">string</span><strong> $name</strong>, <span class="param-type">Array</span><strong> $context</strong>, <span class="param-type">Array</span><strong> $blocks</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Displays a block.<pre>This method is for internal use only and should never be called
directly.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - The block name to display</li>
                <li><code>$context</code> - The context</li>
                <li><code>$blocks</code> - The current set of blocks</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="displayParentBlock"/>
            <h4><span class="label public">public</span>displayParentBlock<span style="font-size:90%;">( <span class="param-type">string</span><strong> $name</strong>, <span class="param-type">Array</span><strong> $context</strong>, <span class="param-type">Array</span><strong> $blocks</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Displays a parent block.<pre>This method is for internal use only and should never be called
directly.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - The block name to display from the parent</li>
                <li><code>$context</code> - The context</li>
                <li><code>$blocks</code> - The current set of blocks</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getBlockNames"/>
            <h4><span class="label public">public</span>getBlockNames<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns all block names.<pre>This method is for internal use only and should never be called
directly.</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>An array of block names</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getBlocks"/>
            <h4><span class="label public">public</span>getBlocks<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns all blocks.<pre>This method is for internal use only and should never be called
directly.</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>An array of blocks</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getEnvironment"/>
            <h4><span class="label public">public</span>getEnvironment<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>{@inheritdoc}</li>
            </p>
          </li>
          <li>
            <a name="getParent"/>
            <h4><span class="label public">public</span>getParent<span style="font-size:90%;">( <span class="param-type">Array</span><strong> $context</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the parent template.<pre>This method is for internal use only and should never be called
directly.</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The parent template or false if there is no parent</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getTemplateName"/>
            <h4><span class="label true">true</span><span class="label public">public</span>getTemplateName<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the template name.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The template name</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="hasBlock"/>
            <h4><span class="label public">public</span>hasBlock<span style="font-size:90%;">( <span class="param-type">string</span><strong> $name</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns whether a block exists or not.<pre>This method is for internal use only and should never be called
directly.

This method does only return blocks defined in the current template
or defined in "used" traits.

It does not return blocks from parent templates as the parent
template name can be dynamic, which is only known based on the
current context.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - The block name</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>true if the block exists, false otherwise</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="isTraitable"/>
            <h4><span class="label public">public</span>isTraitable<span style="font-size:90%;">(  )</span></h4>
          </li>
          <li>
            <a name="render"/>
            <h4><span class="label public">public</span>render<span style="font-size:90%;">( <span class="param-type">Array</span><strong> $context</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>{@inheritdoc}</li>
            </p>
          </li>
          <li>
            <a name="renderBlock"/>
            <h4><span class="label public">public</span>renderBlock<span style="font-size:90%;">( <span class="param-type">string</span><strong> $name</strong>, <span class="param-type">Array</span><strong> $context</strong>, <span class="param-type">Array</span><strong> $blocks</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Renders a block.<pre>This method is for internal use only and should never be called
directly.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - The block name to render</li>
                <li><code>$context</code> - The context</li>
                <li><code>$blocks</code> - The current set of blocks</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The rendered block</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="renderParentBlock"/>
            <h4><span class="label public">public</span>renderParentBlock<span style="font-size:90%;">( <span class="param-type">string</span><strong> $name</strong>, <span class="param-type">Array</span><strong> $context</strong>, <span class="param-type">Array</span><strong> $blocks</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Renders a parent block.<pre>This method is for internal use only and should never be called
directly.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - The block name to render from the parent</li>
                <li><code>$context</code> - The context</li>
                <li><code>$blocks</code> - The current set of blocks</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The rendered block</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="displayWithErrorHandling"/>
            <h4><span class="label protected">protected</span>displayWithErrorHandling<span style="font-size:90%;">( <span class="param-type">Array</span><strong> $context</strong>, <span class="param-type">Array</span><strong> $blocks</strong> )</span></h4>
          </li>
          <li>
            <a name="doDisplay"/>
            <h4><span class="label true">true</span><span class="label protected">protected</span>doDisplay<span style="font-size:90%;">( <span class="param-type">Array</span><strong> $context</strong>, <span class="param-type">Array</span><strong> $blocks</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Auto-generated method to display the template with the given context.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$context</code> - An array of parameters to pass to the template</li>
                <li><code>$blocks</code> - An array of blocks to pass to the template</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="doGetParent"/>
            <h4><span class="label protected">protected</span>doGetParent<span style="font-size:90%;">( <span class="param-type">Array</span><strong> $context</strong> )</span></h4>
          </li>
          <li>
            <a name="getAttribute"/>
            <h4><span class="label protected">protected</span>getAttribute<span style="font-size:90%;">( <span class="param-type">mixed</span><strong> $object</strong>, <span class="param-type">mixed</span><strong> $item</strong>, <span class="param-type">Array</span><strong> $arguments</strong>, <span class="param-type">string</span><strong> $type</strong>, <span class="param-type"><span title="Boolean">Boolean</span></span><strong> $isDefinedTest</strong>, <span class="param-type"><span title="Boolean">Boolean</span></span><strong> $ignoreStrictCheck</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the attribute value for a given array/object.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$object</code> - The object or array from where to get the item</li>
                <li><code>$item</code> - The item to get from the array or object</li>
                <li><code>$arguments</code> - An array of arguments to pass if the item is an object method</li>
                <li><code>$type</code> - The type of attribute (@see Twig_TemplateInterface)</li>
                <li><code>$isDefinedTest</code> - Whether this is only a defined check</li>
                <li><code>$ignoreStrictCheck</code> - Whether to ignore the strict attribute check or not</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The attribute value, or a Boolean when $isDefinedTest is true, or null when the attribute is not set and $ignoreStrictCheck is true</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Twig_Error_Runtime if the attribute does not exist and Twig is running in strict mode and $isDefinedTest is false</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getContext"/>
            <h4><span class="label true">true</span><span class="label protected">protected</span>getContext<span style="font-size:90%;">( <span class="param-type">array</span><strong> $context</strong>, <span class="param-type">string</span><strong> $item</strong>, <span class="param-type"><span title="Boolean">Boolean</span></span><strong> $ignoreStrictCheck</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns a variable from the context.<pre>This method is for internal use only and should never be called
directly.

This method should not be overridden in a sub-class as this is an
implementation detail that has been introduced to optimize variable
access for versions of PHP before 5.4. This is not a way to override
the way to get a variable value.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$context</code> - The context</li>
                <li><code>$item</code> - The variable to return from the context</li>
                <li><code>$ignoreStrictCheck</code> - Whether to ignore the strict variable check or not</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>content of the context variable</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Twig_Error_Runtime if the variable does not exist and Twig is running in strict mode</code>
                </li>
              </ul>
            </ul>
          </li>
        </ul>
        <div class="footer">Generated using phpDox 0.5-40-g758636e - Copyright (C) 2010 - 2013 by Arne Blankerts</div>
      </div>
    </div>
  </body>
</html>
