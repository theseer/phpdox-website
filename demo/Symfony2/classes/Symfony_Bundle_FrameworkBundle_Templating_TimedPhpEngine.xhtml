<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "html" "">
<html xmlns="http://www.w3.org/1999/xhtml" class="no-js" lang="en">
  <head>
    <meta charset="utf-8"/>
    <title>Symfony2 - Symfony\Bundle\FrameworkBundle\Templating\TimedPhpEngine - API Documentation</title>
    <link href="../css/normalize.css" rel="stylesheet" type="text/css" media="all"/>
    <link href="../css/styles.css" rel="stylesheet" type="text/css" media="all"/>
  </head>
  <body>
    <div class="wrapper clearfix">
      <div class="topbar clearfix">
        <h1>
          <a class="brand" href="../index.xhtml">Symfony2 - API Documentation</a>
        </h1>
        <ul class="nav">
          <li class="active">
            <a href="../index.xhtml">Overview</a>
          </li>
        </ul>
      </div>
      <div class="navigation">
        <h3>Members</h3>
        <ul>
          <li>
            <a href="#stopwatch">$stopwatch</a>
          </li>
          <li>
            <a href="#container">$container</a>
          </li>
          <li>
            <a href="#loader">$loader</a>
          </li>
          <li>
            <a href="#current">$current</a>
          </li>
          <li>
            <a href="#helpers">$helpers</a>
          </li>
          <li>
            <a href="#parents">$parents</a>
          </li>
          <li>
            <a href="#stack">$stack</a>
          </li>
          <li>
            <a href="#charset">$charset</a>
          </li>
          <li>
            <a href="#cache">$cache</a>
          </li>
          <li>
            <a href="#escapers">$escapers</a>
          </li>
          <li>
            <a href="#escaperCache">$escaperCache</a>
          </li>
          <li>
            <a href="#globals">$globals</a>
          </li>
          <li>
            <a href="#parser">$parser</a>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul>
          <li>
            <a href="#__construct">__construct</a>
          </li>
          <li>
            <a href="#addGlobal">addGlobal</a>
          </li>
          <li>
            <a href="#addHelpers">addHelpers</a>
          </li>
          <li>
            <a href="#convertEncoding">convertEncoding</a>
          </li>
          <li>
            <a href="#escape">escape</a>
          </li>
          <li>
            <a href="#evaluate">evaluate</a>
          </li>
          <li>
            <a href="#exists">exists</a>
          </li>
          <li>
            <a href="#extend">extend</a>
          </li>
          <li>
            <a href="#get">get</a>
          </li>
          <li>
            <a href="#get">get</a>
          </li>
          <li>
            <a href="#getCharset">getCharset</a>
          </li>
          <li>
            <a href="#getEscaper">getEscaper</a>
          </li>
          <li>
            <a href="#getGlobals">getGlobals</a>
          </li>
          <li>
            <a href="#getLoader">getLoader</a>
          </li>
          <li>
            <a href="#has">has</a>
          </li>
          <li>
            <a href="#initializeEscapers">initializeEscapers</a>
          </li>
          <li>
            <a href="#load">load</a>
          </li>
          <li>
            <a href="#offsetExists">offsetExists</a>
          </li>
          <li>
            <a href="#offsetGet">offsetGet</a>
          </li>
          <li>
            <a href="#offsetSet">offsetSet</a>
          </li>
          <li>
            <a href="#offsetUnset">offsetUnset</a>
          </li>
          <li>
            <a href="#render">render</a>
          </li>
          <li>
            <a href="#render">render</a>
          </li>
          <li>
            <a href="#renderResponse">renderResponse</a>
          </li>
          <li>
            <a href="#set">set</a>
          </li>
          <li>
            <a href="#setCharset">setCharset</a>
          </li>
          <li>
            <a href="#setEscaper">setEscaper</a>
          </li>
          <li>
            <a href="#setHelpers">setHelpers</a>
          </li>
          <li>
            <a href="#setHelpers">setHelpers</a>
          </li>
          <li>
            <a href="#supports">supports</a>
          </li>
        </ul>
      </div>
      <div class="content">
        <h2><span style="font-size:60%">Symfony\Bundle\FrameworkBundle\Templating\</span>TimedPhpEngine</h2>
        <div class="file-notice">
          <p>Times the time spent to render a template.</p>
        </div>
        <ul class="fileinfos">
          <li><b>Author: </b>Fabien Potencier &lt;fabien@symfony.com&gt;</li>
        </ul>
        <h3>Members</h3>
        <ul class="varlist">
          <li>
            <a name="stopwatch"/>
            <h4><span class="label protected">protected</span>
                $stopwatch</h4>
          </li>
        </ul>
        <h3>Constructor</h3>
        <ul class="varlist">
          <li>
            <a name="__construct"/>
            <h4><span class="label public">public</span>__construct<span style="font-size:90%;">( <span class="param-type"><a href="../interfaces/Symfony_Component_Templating_TemplateNameParserInterface.xhtml">Symfony\Component\Templating\TemplateNameParserInterface</a></span><strong> $parser</strong>, <span class="param-type"><a href="../interfaces/Symfony_Component_DependencyInjection_ContainerInterface.xhtml">Symfony\Component\DependencyInjection\ContainerInterface</a></span><strong> $container</strong>, <span class="param-type"><a href="../interfaces/Symfony_Component_Templating_Loader_LoaderInterface.xhtml">Symfony\Component\Templating\Loader\LoaderInterface</a></span><strong> $loader</strong>, <span class="param-type"><a href="../classes/Symfony_Component_Stopwatch_Stopwatch.xhtml">Symfony\Component\Stopwatch\Stopwatch</a></span><strong> $stopwatch</strong>, <span class="param-type"><a href="../classes/Symfony_Bundle_FrameworkBundle_Templating_GlobalVariables.xhtml">Symfony\Bundle\FrameworkBundle\Templating\GlobalVariables</a></span><strong> $globals</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Constructor.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$parser</code> - A TemplateNameParserInterface instance</li>
                <li><code>$container</code> - A ContainerInterface instance</li>
                <li><code>$loader</code> - A LoaderInterface instance</li>
                <li><code>$stopwatch</code> - A Stopwatch instance</li>
                <li><code>$globals</code> - A GlobalVariables instance</li>
              </ul>
            </ul>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul class="varlist">
          <li>
            <a name="addGlobal"/>
            <h4><span class="label public">public</span>addGlobal<span style="font-size:90%;">( <span class="param-type">string</span><strong> $name</strong>, <span class="param-type">mixed</span><strong> $value</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li/>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - </li>
                <li><code>$value</code> - </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="addHelpers"/>
            <h4><span class="label public">public</span>addHelpers<span style="font-size:90%;">( <span class="param-type">Array</span><strong> $helpers</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Adds some helpers.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$helpers</code> - An array of helper</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="convertEncoding"/>
            <h4><span class="label public">public</span>convertEncoding<span style="font-size:90%;">( <span class="param-type">string</span><strong> $string</strong>, <span class="param-type">string</span><strong> $to</strong>, <span class="param-type">string</span><strong> $from</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Convert a string from one encoding to another.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$string</code> - The string to convert</li>
                <li><code>$to</code> - The input encoding</li>
                <li><code>$from</code> - The output encoding</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The string with the new encoding</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\RuntimeException if no suitable encoding function is found (iconv or mbstring)</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="escape"/>
            <h4><span class="label public">public</span>escape<span style="font-size:90%;">( <span class="param-type">mixed</span><strong> $value</strong>, <span class="param-type">string</span><strong> $context</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Escapes a string by using the current charset.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$value</code> - A variable to escape</li>
                <li><code>$context</code> - The context name</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The escaped value</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="exists"/>
            <h4><span class="label public">public</span>exists<span style="font-size:90%;">( <span class="param-type">mixed</span><strong> $name</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns true if the template exists.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - A template name or a TemplateReferenceInterface instance</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>true if the template exists, false otherwise</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="extend"/>
            <h4><span class="label public">public</span>extend<span style="font-size:90%;">( <span class="param-type">string</span><strong> $template</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Decorates the current template with another one.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$template</code> - The decorator logical name</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="get"/>
            <h4><span class="label public">public</span>get<span style="font-size:90%;">( <span class="param-type"/><strong> $name</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li/>
            </p>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\InvalidArgumentException When the helper is not defined</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="get"/>
            <h4><span class="label public">public</span>get<span style="font-size:90%;">( <span class="param-type">string</span><strong> $name</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets a helper value.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - The helper name</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The helper instance</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\InvalidArgumentException if the helper is not defined</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getCharset"/>
            <h4><span class="label public">public</span>getCharset<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the current charset.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The current charset</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getEscaper"/>
            <h4><span class="label public">public</span>getEscaper<span style="font-size:90%;">( <span class="param-type">string</span><strong> $context</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets an escaper for a given context.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$context</code> - The context name</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>$escaper A PHP callable</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\InvalidArgumentException</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getGlobals"/>
            <h4><span class="label public">public</span>getGlobals<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the assigned globals.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getLoader"/>
            <h4><span class="label public">public</span>getLoader<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the loader associated with this engine.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>A LoaderInterface instance</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="has"/>
            <h4><span class="label public">public</span>has<span style="font-size:90%;">( <span class="param-type">string</span><strong> $name</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns true if the helper if defined.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - The helper name</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>true if the helper is defined, false otherwise</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="offsetExists"/>
            <h4><span class="label public">public</span>offsetExists<span style="font-size:90%;">( <span class="param-type">string</span><strong> $name</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns true if the helper is defined.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - The helper name</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>true if the helper is defined, false otherwise</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="offsetGet"/>
            <h4><span class="label public">public</span>offsetGet<span style="font-size:90%;">( <span class="param-type">string</span><strong> $name</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets a helper value.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - The helper name</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The helper value</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\InvalidArgumentException if the helper is not defined</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="offsetSet"/>
            <h4><span class="label public">public</span>offsetSet<span style="font-size:90%;">( <span class="param-type"><a href="../interfaces/Symfony_Component_Templating_Helper_HelperInterface.xhtml">Symfony\Component\Templating\Helper\HelperInterface</a></span><strong> $name</strong>, <span class="param-type">string</span><strong> $value</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sets a helper.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - The helper instance</li>
                <li><code>$value</code> - An alias</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="offsetUnset"/>
            <h4><span class="label public">public</span>offsetUnset<span style="font-size:90%;">( <span class="param-type">string</span><strong> $name</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Removes a helper.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - The helper name</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\LogicException</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="render"/>
            <h4><span class="label public">public</span>render<span style="font-size:90%;">( <span class="param-type"/><strong> $name</strong>, <span class="param-type">Array</span><strong> $parameters</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>{@inheritdoc}</li>
            </p>
          </li>
          <li>
            <a name="render"/>
            <h4><span class="label public">public</span>render<span style="font-size:90%;">( <span class="param-type">mixed</span><strong> $name</strong>, <span class="param-type">Array</span><strong> $parameters</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Renders a template.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - A template name or a TemplateReferenceInterface instance</li>
                <li><code>$parameters</code> - An array of parameters to pass to the template</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The evaluated template as a string</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\InvalidArgumentException if the template does not exist</code>
                </li>
                <li>
                  <code>\RuntimeException         if the template cannot be rendered</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="renderResponse"/>
            <h4><span class="label public">public</span>renderResponse<span style="font-size:90%;">( <span class="param-type">string</span><strong> $view</strong>, <span class="param-type">Array</span><strong> $parameters</strong>, <span class="param-type"><a href="../classes/Symfony_Component_HttpFoundation_Response.xhtml">Symfony\Component\HttpFoundation\Response</a></span><strong> $response</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Renders a view and returns a Response.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$view</code> - The view name</li>
                <li><code>$parameters</code> - An array of parameters to pass to the view</li>
                <li><code>$response</code> - A Response instance</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>A Response instance</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="set"/>
            <h4><span class="label public">public</span>set<span style="font-size:90%;">( <span class="param-type"><a href="../interfaces/Symfony_Component_Templating_Helper_HelperInterface.xhtml">Symfony\Component\Templating\Helper\HelperInterface</a></span><strong> $helper</strong>, <span class="param-type">string</span><strong> $alias</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sets a helper.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$helper</code> - The helper instance</li>
                <li><code>$alias</code> - An alias</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setCharset"/>
            <h4><span class="label public">public</span>setCharset<span style="font-size:90%;">( <span class="param-type">string</span><strong> $charset</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sets the charset to use.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$charset</code> - The charset</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setEscaper"/>
            <h4><span class="label public">public</span>setEscaper<span style="font-size:90%;">( <span class="param-type">string</span><strong> $context</strong>, <span class="param-type">mixed</span><strong> $escaper</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Adds an escaper for the given context.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$context</code> - The escaper context (html, js, ...)</li>
                <li><code>$escaper</code> - A PHP callable</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setHelpers"/>
            <h4><span class="label public">public</span>setHelpers<span style="font-size:90%;">( <span class="param-type">Array</span><strong> $helpers</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>{@inheritdoc}</li>
            </p>
          </li>
          <li>
            <a name="setHelpers"/>
            <h4><span class="label public">public</span>setHelpers<span style="font-size:90%;">( <span class="param-type">Array</span><strong> $helpers</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sets the helpers.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$helpers</code> - An array of helper</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="supports"/>
            <h4><span class="label public">public</span>supports<span style="font-size:90%;">( <span class="param-type">mixed</span><strong> $name</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns true if this class is able to render the given template.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - A template name or a TemplateReferenceInterface instance</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>true if this class supports the given resource, false otherwise</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="evaluate"/>
            <h4><span class="label protected">protected</span>evaluate<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_Templating_Storage_Storage.xhtml">Symfony\Component\Templating\Storage\Storage</a></span><strong> $template</strong>, <span class="param-type">Array</span><strong> $parameters</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Evaluates a template.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$template</code> - The template to render</li>
                <li><code>$parameters</code> - An array of parameters to pass to the template</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The evaluated template, or false if the engine is unable to render the template</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\InvalidArgumentException</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="initializeEscapers"/>
            <h4><span class="label protected">protected</span>initializeEscapers<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Initializes the built-in escapers.<pre>Each function specifies a way for applying a transformation to a string
passed to it. The purpose is for the string to be "escaped" so it is
suitable for the format it is being displayed in.

For example, the string: "It's required that you enter a username &amp; password.\n"
If this were to be displayed as HTML it would be sensible to turn the
ampersand into '&amp;amp;' and the apostrophe into '&amp;aps;'. However if it were
going to be used as a string in JavaScript to be displayed in an alert box
it would be right to leave the string as-is, but c-escape the apostrophe and
the new line.

For each function there is a define to avoid problems with strings being
incorrectly specified.</pre></li>
            </p>
          </li>
          <li>
            <a name="load"/>
            <h4><span class="label protected">protected</span>load<span style="font-size:90%;">( <span class="param-type">mixed</span><strong> $name</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Loads the given template.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - A template name or a TemplateReferenceInterface instance</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>A Storage instance</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\InvalidArgumentException if the template cannot be found</code>
                </li>
              </ul>
            </ul>
          </li>
        </ul>
        <div class="footer">Generated using phpDox 0.5-40-g758636e - Copyright (C) 2010 - 2013 by Arne Blankerts</div>
      </div>
    </div>
  </body>
</html>
