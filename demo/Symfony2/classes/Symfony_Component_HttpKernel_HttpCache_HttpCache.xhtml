<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "html" "">
<html xmlns="http://www.w3.org/1999/xhtml" class="no-js" lang="en">
  <head>
    <meta charset="utf-8"/>
    <title>Symfony2 - Symfony\Component\HttpKernel\HttpCache\HttpCache - API Documentation</title>
    <link href="../css/normalize.css" rel="stylesheet" type="text/css" media="all"/>
    <link href="../css/styles.css" rel="stylesheet" type="text/css" media="all"/>
  </head>
  <body>
    <div class="wrapper clearfix">
      <div class="topbar clearfix">
        <h1>
          <a class="brand" href="../index.xhtml">Symfony2 - API Documentation</a>
        </h1>
        <ul class="nav">
          <li class="active">
            <a href="../index.xhtml">Overview</a>
          </li>
        </ul>
      </div>
      <div class="navigation">
        <h3>Members</h3>
        <ul>
          <li>
            <a href="#kernel">$kernel</a>
          </li>
          <li>
            <a href="#store">$store</a>
          </li>
          <li>
            <a href="#request">$request</a>
          </li>
          <li>
            <a href="#esi">$esi</a>
          </li>
          <li>
            <a href="#esiCacheStrategy">$esiCacheStrategy</a>
          </li>
          <li>
            <a href="#traces">$traces</a>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul>
          <li>
            <a href="#__construct">__construct</a>
          </li>
          <li>
            <a href="#fetch">fetch</a>
          </li>
          <li>
            <a href="#forward">forward</a>
          </li>
          <li>
            <a href="#getEsi">getEsi</a>
          </li>
          <li>
            <a href="#getKernel">getKernel</a>
          </li>
          <li>
            <a href="#getLog">getLog</a>
          </li>
          <li>
            <a href="#getRequest">getRequest</a>
          </li>
          <li>
            <a href="#getStore">getStore</a>
          </li>
          <li>
            <a href="#getTraces">getTraces</a>
          </li>
          <li>
            <a href="#handle">handle</a>
          </li>
          <li>
            <a href="#invalidate">invalidate</a>
          </li>
          <li>
            <a href="#isFreshEnough">isFreshEnough</a>
          </li>
          <li>
            <a href="#isPrivateRequest">isPrivateRequest</a>
          </li>
          <li>
            <a href="#lock">lock</a>
          </li>
          <li>
            <a href="#lookup">lookup</a>
          </li>
          <li>
            <a href="#pass">pass</a>
          </li>
          <li>
            <a href="#processResponseBody">processResponseBody</a>
          </li>
          <li>
            <a href="#record">record</a>
          </li>
          <li>
            <a href="#restoreResponseBody">restoreResponseBody</a>
          </li>
          <li>
            <a href="#store">store</a>
          </li>
          <li>
            <a href="#terminate">terminate</a>
          </li>
          <li>
            <a href="#validate">validate</a>
          </li>
        </ul>
      </div>
      <div class="content">
        <h2><span style="font-size:60%">Symfony\Component\HttpKernel\HttpCache\</span>HttpCache</h2>
        <div class="file-notice">
          <p>Cache provides HTTP caching.</p>
        </div>
        <ul class="fileinfos">
          <li><b>Author: </b>Fabien Potencier &lt;fabien@symfony.com&gt;</li>
        </ul>
        <h3>Implements</h3>
        <ul class="varlist">
          <li>
            <a href="../interfaces/Symfony_Component_HttpKernel_HttpKernelInterface.xhtml">Symfony\Component\HttpKernel\HttpKernelInterface</a>
          </li>
          <li>
            <a href="../interfaces/Symfony_Component_HttpKernel_TerminableInterface.xhtml">Symfony\Component\HttpKernel\TerminableInterface</a>
          </li>
        </ul>
        <h3>Members</h3>
        <ul class="varlist">
          <li>
            <a name="kernel"/>
            <h4><span class="label private">private</span>
                $kernel</h4>
          </li>
          <li>
            <a name="store"/>
            <h4><span class="label private">private</span>
                $store</h4>
          </li>
          <li>
            <a name="request"/>
            <h4><span class="label private">private</span>
                $request</h4>
          </li>
          <li>
            <a name="esi"/>
            <h4><span class="label private">private</span>
                $esi</h4>
          </li>
          <li>
            <a name="esiCacheStrategy"/>
            <h4><span class="label private">private</span>
                $esiCacheStrategy</h4>
          </li>
          <li>
            <a name="traces"/>
            <h4><span class="label private">private</span>
                $traces</h4>
          </li>
        </ul>
        <h3>Constructor</h3>
        <ul class="varlist">
          <li>
            <a name="__construct"/>
            <h4><span class="label public">public</span>__construct<span style="font-size:90%;">( <span class="param-type"><a href="../interfaces/Symfony_Component_HttpKernel_HttpKernelInterface.xhtml">Symfony\Component\HttpKernel\HttpKernelInterface</a></span><strong> $kernel</strong>, <span class="param-type"><a href="../interfaces/Symfony_Component_HttpKernel_HttpCache_StoreInterface.xhtml">Symfony\Component\HttpKernel\HttpCache\StoreInterface</a></span><strong> $store</strong>, <span class="param-type"><a href="../classes/Symfony_Component_HttpKernel_HttpCache_Esi.xhtml">Symfony\Component\HttpKernel\HttpCache\Esi</a></span><strong> $esi</strong>, <span class="param-type">Array</span><strong> $options</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Constructor.<pre>The available options are:

  * debug:                 If true, the traces are added as a HTTP header to ease debugging

  * default_ttl            The number of seconds that a cache entry should be considered
                           fresh when no explicit freshness information is provided in
                           a response. Explicit Cache-Control or Expires headers
                           override this value. (default: 0)

  * private_headers        Set of request headers that trigger "private" cache-control behavior
                           on responses that don't explicitly state whether the response is
                           public or private via a Cache-Control directive. (default: Authorization and Cookie)

  * allow_reload           Specifies whether the client can force a cache reload by including a
                           Cache-Control "no-cache" directive in the request. Set it to ``true``
                           for compliance with RFC 2616. (default: false)

  * allow_revalidate       Specifies whether the client can force a cache revalidate by including
                           a Cache-Control "max-age=0" directive in the request. Set it to ``true``
                           for compliance with RFC 2616. (default: false)

  * stale_while_revalidate Specifies the default number of seconds (the granularity is the second as the
                           Response TTL precision is a second) during which the cache can immediately return
                           a stale response while it revalidates it in the background (default: 2).
                           This setting is overridden by the stale-while-revalidate HTTP Cache-Control
                           extension (see RFC 5861).

  * stale_if_error         Specifies the default number of seconds (the granularity is the second) during which
                           the cache can serve a stale response when an error is encountered (default: 60).
                           This setting is overridden by the stale-if-error HTTP Cache-Control extension
                           (see RFC 5861).</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$kernel</code> - An HttpKernelInterface instance</li>
                <li><code>$store</code> - A Store instance</li>
                <li><code>$esi</code> - An Esi instance</li>
                <li><code>$options</code> - An array of options</li>
              </ul>
            </ul>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul class="varlist">
          <li>
            <a name="getEsi"/>
            <h4><span class="label public">public</span>getEsi<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the Esi instance</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>An Esi instance</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getKernel"/>
            <h4><span class="label public">public</span>getKernel<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the Kernel instance</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>An HttpKernelInterface instance</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getLog"/>
            <h4><span class="label public">public</span>getLog<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns a log message for the events of the last request processing.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>A log message</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getRequest"/>
            <h4><span class="label public">public</span>getRequest<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the Request instance associated with the master request.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>A Request instance</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getStore"/>
            <h4><span class="label public">public</span>getStore<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the current store.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>$store A StoreInterface instance</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getTraces"/>
            <h4><span class="label public">public</span>getTraces<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns an array of events that took place during processing of the last request.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>An array of events</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="handle"/>
            <h4><span class="label public">public</span>handle<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_HttpFoundation_Request.xhtml">Symfony\Component\HttpFoundation\Request</a></span><strong> $request</strong>, <span class="param-type"/><strong> $type</strong>, <span class="param-type"/><strong> $catch</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>{@inheritdoc}</li>
            </p>
          </li>
          <li>
            <a name="terminate"/>
            <h4><span class="label public">public</span>terminate<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_HttpFoundation_Request.xhtml">Symfony\Component\HttpFoundation\Request</a></span><strong> $request</strong>, <span class="param-type"><a href="../classes/Symfony_Component_HttpFoundation_Response.xhtml">Symfony\Component\HttpFoundation\Response</a></span><strong> $response</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>{@inheritdoc}</li>
            </p>
          </li>
          <li>
            <a name="fetch"/>
            <h4><span class="label protected">protected</span>fetch<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_HttpFoundation_Request.xhtml">Symfony\Component\HttpFoundation\Request</a></span><strong> $request</strong>, <span class="param-type"><span title="Boolean">Boolean</span></span><strong> $catch</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Forwards the Request to the backend and determines whether the response should be stored.<pre>This methods is triggered when the cache missed or a reload is required.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$request</code> - A Request instance</li>
                <li><code>$catch</code> - whether to process exceptions</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>A Response instance</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="forward"/>
            <h4><span class="label protected">protected</span>forward<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_HttpFoundation_Request.xhtml">Symfony\Component\HttpFoundation\Request</a></span><strong> $request</strong>, <span class="param-type"><span title="Boolean">Boolean</span></span><strong> $catch</strong>, <span class="param-type"><a href="../classes/Symfony_Component_HttpFoundation_Response.xhtml">Symfony\Component\HttpFoundation\Response</a></span><strong> $entry</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Forwards the Request to the backend and returns the Response.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$request</code> - A Request instance</li>
                <li><code>$catch</code> - Whether to catch exceptions or not</li>
                <li><code>$entry</code> - A Response instance (the stale entry if present, null otherwise)</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>A Response instance</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="invalidate"/>
            <h4><span class="label protected">protected</span>invalidate<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_HttpFoundation_Request.xhtml">Symfony\Component\HttpFoundation\Request</a></span><strong> $request</strong>, <span class="param-type"><span title="Boolean">Boolean</span></span><strong> $catch</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Invalidates non-safe methods (like POST, PUT, and DELETE).</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$request</code> - A Request instance</li>
                <li><code>$catch</code> - Whether to process exceptions</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>A Response instance</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\Exception</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="isFreshEnough"/>
            <h4><span class="label protected">protected</span>isFreshEnough<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_HttpFoundation_Request.xhtml">Symfony\Component\HttpFoundation\Request</a></span><strong> $request</strong>, <span class="param-type"><a href="../classes/Symfony_Component_HttpFoundation_Response.xhtml">Symfony\Component\HttpFoundation\Response</a></span><strong> $entry</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Checks whether the cache entry is "fresh enough" to satisfy the Request.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$request</code> - A Request instance</li>
                <li><code>$entry</code> - A Response instance</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>true if the cache entry if fresh enough, false otherwise</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="lock"/>
            <h4><span class="label protected">protected</span>lock<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_HttpFoundation_Request.xhtml">Symfony\Component\HttpFoundation\Request</a></span><strong> $request</strong>, <span class="param-type"><a href="../classes/Symfony_Component_HttpFoundation_Response.xhtml">Symfony\Component\HttpFoundation\Response</a></span><strong> $entry</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Locks a Request during the call to the backend.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$request</code> - A Request instance</li>
                <li><code>$entry</code> - A Response instance</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>true if the cache entry can be returned even if it is staled, false otherwise</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="lookup"/>
            <h4><span class="label protected">protected</span>lookup<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_HttpFoundation_Request.xhtml">Symfony\Component\HttpFoundation\Request</a></span><strong> $request</strong>, <span class="param-type"><span title="Boolean">Boolean</span></span><strong> $catch</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Lookups a Response from the cache for the given Request.<pre>When a matching cache entry is found and is fresh, it uses it as the
response without forwarding any request to the backend. When a matching
cache entry is found but is stale, it attempts to "validate" the entry with
the backend using conditional GET. When no matching cache entry is found,
it triggers "miss" processing.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$request</code> - A Request instance</li>
                <li><code>$catch</code> - whether to process exceptions</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>A Response instance</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\Exception</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="pass"/>
            <h4><span class="label protected">protected</span>pass<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_HttpFoundation_Request.xhtml">Symfony\Component\HttpFoundation\Request</a></span><strong> $request</strong>, <span class="param-type"><span title="Boolean">Boolean</span></span><strong> $catch</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Forwards the Request to the backend without storing the Response in the cache.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$request</code> - A Request instance</li>
                <li><code>$catch</code> - Whether to process exceptions</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>A Response instance</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="processResponseBody"/>
            <h4><span class="label protected">protected</span>processResponseBody<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_HttpFoundation_Request.xhtml">Symfony\Component\HttpFoundation\Request</a></span><strong> $request</strong>, <span class="param-type"><a href="../classes/Symfony_Component_HttpFoundation_Response.xhtml">Symfony\Component\HttpFoundation\Response</a></span><strong> $response</strong> )</span></h4>
          </li>
          <li>
            <a name="store"/>
            <h4><span class="label protected">protected</span>store<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_HttpFoundation_Request.xhtml">Symfony\Component\HttpFoundation\Request</a></span><strong> $request</strong>, <span class="param-type"><a href="../classes/Symfony_Component_HttpFoundation_Response.xhtml">Symfony\Component\HttpFoundation\Response</a></span><strong> $response</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Writes the Response to the cache.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$request</code> - A Request instance</li>
                <li><code>$response</code> - A Response instance</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\Exception</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="validate"/>
            <h4><span class="label protected">protected</span>validate<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_HttpFoundation_Request.xhtml">Symfony\Component\HttpFoundation\Request</a></span><strong> $request</strong>, <span class="param-type"><a href="../classes/Symfony_Component_HttpFoundation_Response.xhtml">Symfony\Component\HttpFoundation\Response</a></span><strong> $entry</strong>, <span class="param-type"><span title="Boolean">Boolean</span></span><strong> $catch</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Validates that a cache entry is fresh.<pre>The original request is used as a template for a conditional
GET request with the backend.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$request</code> - A Request instance</li>
                <li><code>$entry</code> - A Response instance to validate</li>
                <li><code>$catch</code> - Whether to process exceptions</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>A Response instance</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="isPrivateRequest"/>
            <h4><span class="label private">private</span>isPrivateRequest<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_HttpFoundation_Request.xhtml">Symfony\Component\HttpFoundation\Request</a></span><strong> $request</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Checks if the Request includes authorization or other sensitive information that should cause the Response to be considered private by default.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$request</code> - A Request instance</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>true if the Request is private, false otherwise</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="record"/>
            <h4><span class="label private">private</span>record<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_HttpFoundation_Request.xhtml">Symfony\Component\HttpFoundation\Request</a></span><strong> $request</strong>, <span class="param-type">string</span><strong> $event</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Records that an event took place.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$request</code> - A Request instance</li>
                <li><code>$event</code> - The event name</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="restoreResponseBody"/>
            <h4><span class="label private">private</span>restoreResponseBody<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_HttpFoundation_Request.xhtml">Symfony\Component\HttpFoundation\Request</a></span><strong> $request</strong>, <span class="param-type"><a href="../classes/Symfony_Component_HttpFoundation_Response.xhtml">Symfony\Component\HttpFoundation\Response</a></span><strong> $response</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Restores the Response body.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$request</code> - A Request instance</li>
                <li><code>$response</code> - A Response instance</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>A Response instance</li>
              </ul>
            </ul>
          </li>
        </ul>
        <div class="footer">Generated using phpDox 0.5-40-g758636e - Copyright (C) 2010 - 2013 by Arne Blankerts</div>
      </div>
    </div>
  </body>
</html>
