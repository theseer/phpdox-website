<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "html" "">
<html xmlns="http://www.w3.org/1999/xhtml" class="no-js" lang="en">
  <head>
    <meta charset="utf-8"/>
    <title>Symfony2 - Symfony\Component\Console\Tests\Fixtures\DescriptorApplication2 - API Documentation</title>
    <link href="../css/normalize.css" rel="stylesheet" type="text/css" media="all"/>
    <link href="../css/styles.css" rel="stylesheet" type="text/css" media="all"/>
  </head>
  <body>
    <div class="wrapper clearfix">
      <div class="topbar clearfix">
        <h1>
          <a class="brand" href="../index.xhtml">Symfony2 - API Documentation</a>
        </h1>
        <ul class="nav">
          <li class="active">
            <a href="../index.xhtml">Overview</a>
          </li>
        </ul>
      </div>
      <div class="navigation">
        <h3>Methods</h3>
        <ul>
          <li>
            <a href="#__construct">__construct</a>
          </li>
          <li>
            <a href="#add">add</a>
          </li>
          <li>
            <a href="#addCommands">addCommands</a>
          </li>
          <li>
            <a href="#all">all</a>
          </li>
          <li>
            <a href="#asText">asText</a>
          </li>
          <li>
            <a href="#asXml">asXml</a>
          </li>
          <li>
            <a href="#configureIO">configureIO</a>
          </li>
          <li>
            <a href="#doRun">doRun</a>
          </li>
          <li>
            <a href="#doRunCommand">doRunCommand</a>
          </li>
          <li>
            <a href="#extractNamespace">extractNamespace</a>
          </li>
          <li>
            <a href="#find">find</a>
          </li>
          <li>
            <a href="#findNamespace">findNamespace</a>
          </li>
          <li>
            <a href="#get">get</a>
          </li>
          <li>
            <a href="#getAbbreviations">getAbbreviations</a>
          </li>
          <li>
            <a href="#getCommandName">getCommandName</a>
          </li>
          <li>
            <a href="#getDefaultCommands">getDefaultCommands</a>
          </li>
          <li>
            <a href="#getDefaultHelperSet">getDefaultHelperSet</a>
          </li>
          <li>
            <a href="#getDefaultInputDefinition">getDefaultInputDefinition</a>
          </li>
          <li>
            <a href="#getDefinition">getDefinition</a>
          </li>
          <li>
            <a href="#getHelp">getHelp</a>
          </li>
          <li>
            <a href="#getHelperSet">getHelperSet</a>
          </li>
          <li>
            <a href="#getLongVersion">getLongVersion</a>
          </li>
          <li>
            <a href="#getName">getName</a>
          </li>
          <li>
            <a href="#getNamespaces">getNamespaces</a>
          </li>
          <li>
            <a href="#getTerminalDimensions">getTerminalDimensions</a>
          </li>
          <li>
            <a href="#getTerminalHeight">getTerminalHeight</a>
          </li>
          <li>
            <a href="#getTerminalWidth">getTerminalWidth</a>
          </li>
          <li>
            <a href="#getVersion">getVersion</a>
          </li>
          <li>
            <a href="#has">has</a>
          </li>
          <li>
            <a href="#register">register</a>
          </li>
          <li>
            <a href="#renderException">renderException</a>
          </li>
          <li>
            <a href="#run">run</a>
          </li>
          <li>
            <a href="#setAutoExit">setAutoExit</a>
          </li>
          <li>
            <a href="#setCatchExceptions">setCatchExceptions</a>
          </li>
          <li>
            <a href="#setDefinition">setDefinition</a>
          </li>
          <li>
            <a href="#setDispatcher">setDispatcher</a>
          </li>
          <li>
            <a href="#setHelperSet">setHelperSet</a>
          </li>
          <li>
            <a href="#setName">setName</a>
          </li>
          <li>
            <a href="#setVersion">setVersion</a>
          </li>
        </ul>
      </div>
      <div class="content">
        <h2><span style="font-size:60%">Symfony\Component\Console\Tests\Fixtures\</span>DescriptorApplication2</h2>
        <ul class="fileinfos"/>
        <h3>Constructor</h3>
        <ul class="varlist">
          <li>
            <a name="__construct"/>
            <h4><span class="label public">public</span>__construct<span style="font-size:90%;">(  )</span></h4>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul class="varlist">
          <li>
            <a name="add"/>
            <h4><span class="label public">public</span>add<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_Console_Command_Command.xhtml">Symfony\Component\Console\Command\Command</a></span><strong> $command</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Adds a command object.<pre>If a command with the same name already exists, it will be overridden.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$command</code> - A Command object</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The registered command</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="addCommands"/>
            <h4><span class="label public">public</span>addCommands<span style="font-size:90%;">( <span class="param-type">Array</span><strong> $commands</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Adds an array of command objects.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$commands</code> - An array of commands</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="all"/>
            <h4><span class="label public">public</span>all<span style="font-size:90%;">( <span class="param-type">string</span><strong> $namespace</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the commands (registered in the given namespace if provided).<pre>The array keys are the full names and the values the command instances.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$namespace</code> - A namespace name</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>An array of Command instances</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="asText"/>
            <h4><span class="label public">public</span>asText<span style="font-size:90%;">( <span class="param-type">string</span><strong> $namespace</strong>, <span class="param-type">boolean</span><strong> $raw</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns a text representation of the Application.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$namespace</code> - An optional namespace name</li>
                <li><code>$raw</code> - Whether to return raw command list</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>A string representing the Application</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="asXml"/>
            <h4><span class="label public">public</span>asXml<span style="font-size:90%;">( <span class="param-type">string</span><strong> $namespace</strong>, <span class="param-type"><span title="Boolean">Boolean</span></span><strong> $asDom</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns an XML representation of the Application.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$namespace</code> - An optional namespace name</li>
                <li><code>$asDom</code> - Whether to return a DOM or an XML string</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>An XML string representing the Application</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="doRun"/>
            <h4><span class="label public">public</span>doRun<span style="font-size:90%;">( <span class="param-type"><a href="../interfaces/Symfony_Component_Console_Input_InputInterface.xhtml">Symfony\Component\Console\Input\InputInterface</a></span><strong> $input</strong>, <span class="param-type"><a href="../interfaces/Symfony_Component_Console_Output_OutputInterface.xhtml">Symfony\Component\Console\Output\OutputInterface</a></span><strong> $output</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Runs the current application.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$input</code> - An Input instance</li>
                <li><code>$output</code> - An Output instance</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>0 if everything went fine, or an error code</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="extractNamespace"/>
            <h4><span class="label public">public</span>extractNamespace<span style="font-size:90%;">( <span class="param-type">string</span><strong> $name</strong>, <span class="param-type">string</span><strong> $limit</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the namespace part of the command name.<pre>This method is not part of public API and should not be used directly.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - The full name of the command</li>
                <li><code>$limit</code> - The maximum number of parts of the namespace</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The namespace of the command</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="find"/>
            <h4><span class="label public">public</span>find<span style="font-size:90%;">( <span class="param-type">string</span><strong> $name</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Finds a command by name or alias.<pre>Contrary to get, this command tries to find the best
match if you give it an abbreviation of a name or alias.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - A command name or a command alias</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>A Command instance</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\InvalidArgumentException When command name is incorrect or ambiguous</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="findNamespace"/>
            <h4><span class="label public">public</span>findNamespace<span style="font-size:90%;">( <span class="param-type">string</span><strong> $namespace</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Finds a registered namespace by a name or an abbreviation.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$namespace</code> - A namespace or abbreviation to search for</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>A registered namespace</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\InvalidArgumentException When namespace is incorrect or ambiguous</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="get"/>
            <h4><span class="label public">public</span>get<span style="font-size:90%;">( <span class="param-type">string</span><strong> $name</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns a registered command by name or alias.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - The command name or alias</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>A Command object</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\InvalidArgumentException When command name given does not exist</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getAbbreviations"/>
            <h4><span class="label true">true</span><span class="label public">public</span>getAbbreviations<span style="font-size:90%;">( <span class="param-type">array</span><strong> $names</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns an array of possible abbreviations given a set of names.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$names</code> - An array of names</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>An array of abbreviations</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getDefinition"/>
            <h4><span class="label public">public</span>getDefinition<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the InputDefinition related to this Application.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The InputDefinition instance</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getHelp"/>
            <h4><span class="label public">public</span>getHelp<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the help message.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>A help message.</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getHelperSet"/>
            <h4><span class="label public">public</span>getHelperSet<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Get the helper set associated with the command.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The HelperSet instance associated with this command</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getLongVersion"/>
            <h4><span class="label public">public</span>getLongVersion<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the long version of the application.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The long application version</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getName"/>
            <h4><span class="label public">public</span>getName<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the name of the application.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The application name</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getNamespaces"/>
            <h4><span class="label public">public</span>getNamespaces<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns an array of all unique namespaces used by currently registered commands.<pre>It does not returns the global namespace which always exists.</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>An array of namespaces</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getTerminalDimensions"/>
            <h4><span class="label public">public</span>getTerminalDimensions<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Tries to figure out the terminal dimensions based on the current environment</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>Array containing width and height</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getVersion"/>
            <h4><span class="label public">public</span>getVersion<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the application version.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The application version</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="has"/>
            <h4><span class="label public">public</span>has<span style="font-size:90%;">( <span class="param-type">string</span><strong> $name</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns true if the command exists, false otherwise.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - The command name or alias</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>true if the command exists, false otherwise</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="register"/>
            <h4><span class="label public">public</span>register<span style="font-size:90%;">( <span class="param-type">string</span><strong> $name</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Registers a new command.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - The command name</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The newly created command</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="renderException"/>
            <h4><span class="label public">public</span>renderException<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Exception.xhtml">Exception</a></span><strong> $e</strong>, <span class="param-type"><a href="../interfaces/Symfony_Component_Console_Output_OutputInterface.xhtml">Symfony\Component\Console\Output\OutputInterface</a></span><strong> $output</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Renders a caught exception.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$e</code> - An exception instance</li>
                <li><code>$output</code> - An OutputInterface instance</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="run"/>
            <h4><span class="label public">public</span>run<span style="font-size:90%;">( <span class="param-type"><a href="../interfaces/Symfony_Component_Console_Input_InputInterface.xhtml">Symfony\Component\Console\Input\InputInterface</a></span><strong> $input</strong>, <span class="param-type"><a href="../interfaces/Symfony_Component_Console_Output_OutputInterface.xhtml">Symfony\Component\Console\Output\OutputInterface</a></span><strong> $output</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Runs the current application.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$input</code> - An Input instance</li>
                <li><code>$output</code> - An Output instance</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>0 if everything went fine, or an error code</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\Exception When doRun returns Exception</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setAutoExit"/>
            <h4><span class="label public">public</span>setAutoExit<span style="font-size:90%;">( <span class="param-type"><span title="Boolean">Boolean</span></span><strong> $boolean</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sets whether to automatically exit after a command execution or not.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$boolean</code> - Whether to automatically exit after a command execution or not</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setCatchExceptions"/>
            <h4><span class="label public">public</span>setCatchExceptions<span style="font-size:90%;">( <span class="param-type"><span title="Boolean">Boolean</span></span><strong> $boolean</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sets whether to catch exceptions or not during commands execution.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$boolean</code> - Whether to catch exceptions or not during commands execution</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setDefinition"/>
            <h4><span class="label public">public</span>setDefinition<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_Console_Input_InputDefinition.xhtml">Symfony\Component\Console\Input\InputDefinition</a></span><strong> $definition</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Set an input definition set to be used with this application</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$definition</code> - The input definition</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setDispatcher"/>
            <h4><span class="label public">public</span>setDispatcher<span style="font-size:90%;">( <span class="param-type"><a href="../interfaces/Symfony_Component_EventDispatcher_EventDispatcherInterface.xhtml">Symfony\Component\EventDispatcher\EventDispatcherInterface</a></span><strong> $dispatcher</strong> )</span></h4>
          </li>
          <li>
            <a name="setHelperSet"/>
            <h4><span class="label public">public</span>setHelperSet<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_Console_Helper_HelperSet.xhtml">Symfony\Component\Console\Helper\HelperSet</a></span><strong> $helperSet</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Set a helper set to be used with the command.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$helperSet</code> - The helper set</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setName"/>
            <h4><span class="label public">public</span>setName<span style="font-size:90%;">( <span class="param-type">string</span><strong> $name</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sets the application name.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - The application name</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setVersion"/>
            <h4><span class="label public">public</span>setVersion<span style="font-size:90%;">( <span class="param-type">string</span><strong> $version</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sets the application version.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$version</code> - The application version</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="configureIO"/>
            <h4><span class="label protected">protected</span>configureIO<span style="font-size:90%;">( <span class="param-type"><a href="../interfaces/Symfony_Component_Console_Input_InputInterface.xhtml">Symfony\Component\Console\Input\InputInterface</a></span><strong> $input</strong>, <span class="param-type"><a href="../interfaces/Symfony_Component_Console_Output_OutputInterface.xhtml">Symfony\Component\Console\Output\OutputInterface</a></span><strong> $output</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Configures the input and output instances based on the user arguments and options.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$input</code> - An InputInterface instance</li>
                <li><code>$output</code> - An OutputInterface instance</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="doRunCommand"/>
            <h4><span class="label protected">protected</span>doRunCommand<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_Console_Command_Command.xhtml">Symfony\Component\Console\Command\Command</a></span><strong> $command</strong>, <span class="param-type"><a href="../interfaces/Symfony_Component_Console_Input_InputInterface.xhtml">Symfony\Component\Console\Input\InputInterface</a></span><strong> $input</strong>, <span class="param-type"><a href="../interfaces/Symfony_Component_Console_Output_OutputInterface.xhtml">Symfony\Component\Console\Output\OutputInterface</a></span><strong> $output</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Runs the current command.<pre>If an event dispatcher has been attached to the application,
events are also dispatched during the life-cycle of the command.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$command</code> - A Command instance</li>
                <li><code>$input</code> - An Input instance</li>
                <li><code>$output</code> - An Output instance</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>0 if everything went fine, or an error code</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getCommandName"/>
            <h4><span class="label protected">protected</span>getCommandName<span style="font-size:90%;">( <span class="param-type"><a href="../interfaces/Symfony_Component_Console_Input_InputInterface.xhtml">Symfony\Component\Console\Input\InputInterface</a></span><strong> $input</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the name of the command based on input.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$input</code> - The input interface</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The command name</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getDefaultCommands"/>
            <h4><span class="label protected">protected</span>getDefaultCommands<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the default commands that should always be available.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>An array of default Command instances</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getDefaultHelperSet"/>
            <h4><span class="label protected">protected</span>getDefaultHelperSet<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the default helper set with the helpers that should always be available.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>A HelperSet instance</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getDefaultInputDefinition"/>
            <h4><span class="label protected">protected</span>getDefaultInputDefinition<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the default input definition.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>An InputDefinition instance</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getTerminalHeight"/>
            <h4><span class="label protected">protected</span>getTerminalHeight<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Tries to figure out the terminal height in which this application runs</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getTerminalWidth"/>
            <h4><span class="label protected">protected</span>getTerminalWidth<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Tries to figure out the terminal width in which this application runs</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
        </ul>
        <div class="footer">Generated using phpDox 0.5-40-g758636e - Copyright (C) 2010 - 2013 by Arne Blankerts</div>
      </div>
    </div>
  </body>
</html>
