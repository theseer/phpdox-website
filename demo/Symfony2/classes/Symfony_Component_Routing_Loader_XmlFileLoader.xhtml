<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "html" "">
<html xmlns="http://www.w3.org/1999/xhtml" class="no-js" lang="en">
  <head>
    <meta charset="utf-8"/>
    <title>Symfony2 - Symfony\Component\Routing\Loader\XmlFileLoader - API Documentation</title>
    <link href="../css/normalize.css" rel="stylesheet" type="text/css" media="all"/>
    <link href="../css/styles.css" rel="stylesheet" type="text/css" media="all"/>
  </head>
  <body>
    <div class="wrapper clearfix">
      <div class="topbar clearfix">
        <h1>
          <a class="brand" href="../index.xhtml">Symfony2 - API Documentation</a>
        </h1>
        <ul class="nav">
          <li class="active">
            <a href="../index.xhtml">Overview</a>
          </li>
        </ul>
      </div>
      <div class="navigation">
        <h3>Constants</h3>
        <ul>
          <li>
            <a href="#NAMESPACE_URI">NAMESPACE_URI</a>
          </li>
          <li>
            <a href="#SCHEME_PATH">SCHEME_PATH</a>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul>
          <li>
            <a href="#__construct">__construct</a>
          </li>
          <li>
            <a href="#getLocator">getLocator</a>
          </li>
          <li>
            <a href="#getResolver">getResolver</a>
          </li>
          <li>
            <a href="#import">import</a>
          </li>
          <li>
            <a href="#import">import</a>
          </li>
          <li>
            <a href="#load">load</a>
          </li>
          <li>
            <a href="#loadFile">loadFile</a>
          </li>
          <li>
            <a href="#parseConfigs">parseConfigs</a>
          </li>
          <li>
            <a href="#parseImport">parseImport</a>
          </li>
          <li>
            <a href="#parseNode">parseNode</a>
          </li>
          <li>
            <a href="#parseRoute">parseRoute</a>
          </li>
          <li>
            <a href="#resolve">resolve</a>
          </li>
          <li>
            <a href="#setCurrentDir">setCurrentDir</a>
          </li>
          <li>
            <a href="#setResolver">setResolver</a>
          </li>
          <li>
            <a href="#supports">supports</a>
          </li>
        </ul>
      </div>
      <div class="content">
        <h2><span style="font-size:60%">Symfony\Component\Routing\Loader\</span>XmlFileLoader</h2>
        <div class="file-notice">
          <p>XmlFileLoader loads XML routing files.</p>
        </div>
        <ul class="fileinfos">
          <li><b>Author: </b>Fabien Potencier &lt;fabien@symfony.com&gt;</li>
          <li><b>Author: </b>Tobias Schultze &lt;http://tobion.de&gt;</li>
        </ul>
        <h3>Constants</h3>
        <ul class="varlist">
          <li><a name="NAMESPACE_URI"/>NAMESPACE_URI = 'http://symfony.com/schema/routing'<hr/></li>
          <li><a name="SCHEME_PATH"/>SCHEME_PATH = '/schema/routing/routing-1.0.xsd'<hr/></li>
        </ul>
        <h3>Members</h3>
        <ul class="varlist"/>
        <h3>Constructor</h3>
        <ul class="varlist">
          <li>
            <a name="__construct"/>
            <h4><span class="label public">public</span>__construct<span style="font-size:90%;">( <span class="param-type"><a href="../interfaces/Symfony_Component_Config_FileLocatorInterface.xhtml">Symfony\Component\Config\FileLocatorInterface</a></span><strong> $locator</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Constructor.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$locator</code> - A FileLocatorInterface instance</li>
              </ul>
            </ul>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul class="varlist">
          <li>
            <a name="getLocator"/>
            <h4><span class="label public">public</span>getLocator<span style="font-size:90%;">(  )</span></h4>
          </li>
          <li>
            <a name="getResolver"/>
            <h4><span class="label public">public</span>getResolver<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the loader resolver.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>A LoaderResolverInterface instance</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="import"/>
            <h4><span class="label public">public</span>import<span style="font-size:90%;">( <span class="param-type">mixed</span><strong> $resource</strong>, <span class="param-type">string</span><strong> $type</strong>, <span class="param-type"><span title="Boolean">Boolean</span></span><strong> $ignoreErrors</strong>, <span class="param-type">string</span><strong> $sourceResource</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Imports a resource.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$resource</code> - A Resource</li>
                <li><code>$type</code> - The resource type</li>
                <li><code>$ignoreErrors</code> - Whether to ignore import errors or not</li>
                <li><code>$sourceResource</code> - The original resource importing the new resource</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>FileLoaderLoadException</code>
                </li>
                <li>
                  <code>FileLoaderImportCircularReferenceException</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="import"/>
            <h4><span class="label public">public</span>import<span style="font-size:90%;">( <span class="param-type">mixed</span><strong> $resource</strong>, <span class="param-type">string</span><strong> $type</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Imports a resource.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$resource</code> - A Resource</li>
                <li><code>$type</code> - The resource type</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="load"/>
            <h4><span class="label public">public</span>load<span style="font-size:90%;">( <span class="param-type">string</span><strong> $file</strong>, <span class="param-type"><span title="string|null">string|null</span></span><strong> $type</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Loads an XML file.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$file</code> - An XML file path</li>
                <li><code>$type</code> - The resource type</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>A RouteCollection instance</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\InvalidArgumentException When the file cannot be loaded or when the XML cannot be</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="resolve"/>
            <h4><span class="label public">public</span>resolve<span style="font-size:90%;">( <span class="param-type">mixed</span><strong> $resource</strong>, <span class="param-type">string</span><strong> $type</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Finds a loader able to load an imported resource.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$resource</code> - A Resource</li>
                <li><code>$type</code> - The resource type</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>A LoaderInterface instance</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>FileLoaderLoadException if no loader is found</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setCurrentDir"/>
            <h4><span class="label public">public</span>setCurrentDir<span style="font-size:90%;">( <span class="param-type"/><strong> $dir</strong> )</span></h4>
          </li>
          <li>
            <a name="setResolver"/>
            <h4><span class="label public">public</span>setResolver<span style="font-size:90%;">( <span class="param-type"><a href="../interfaces/Symfony_Component_Config_Loader_LoaderResolverInterface.xhtml">Symfony\Component\Config\Loader\LoaderResolverInterface</a></span><strong> $resolver</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sets the loader resolver.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$resolver</code> - A LoaderResolverInterface instance</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="supports"/>
            <h4><span class="label public">public</span>supports<span style="font-size:90%;">( <span class="param-type"/><strong> $resource</strong>, <span class="param-type"/><strong> $type</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>{@inheritdoc}</li>
            </p>
          </li>
          <li>
            <a name="loadFile"/>
            <h4><span class="label protected">protected</span>loadFile<span style="font-size:90%;">( <span class="param-type">string</span><strong> $file</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Loads an XML file.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$file</code> - An XML file path</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\InvalidArgumentException When loading of XML file fails because of syntax errors</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="parseImport"/>
            <h4><span class="label protected">protected</span>parseImport<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_Routing_RouteCollection.xhtml">Symfony\Component\Routing\RouteCollection</a></span><strong> $collection</strong>, <span class="param-type"><span title="DOMElement">DOMElement</span></span><strong> $node</strong>, <span class="param-type">string</span><strong> $path</strong>, <span class="param-type">string</span><strong> $file</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Parses an import and adds the routes in the resource to the RouteCollection.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$collection</code> - RouteCollection instance</li>
                <li><code>$node</code> - Element to parse that represents a Route</li>
                <li><code>$path</code> - Full path of the XML file being processed</li>
                <li><code>$file</code> - Loaded file name</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\InvalidArgumentException When the XML is invalid</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="parseNode"/>
            <h4><span class="label protected">protected</span>parseNode<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_Routing_RouteCollection.xhtml">Symfony\Component\Routing\RouteCollection</a></span><strong> $collection</strong>, <span class="param-type"><span title="DOMElement">DOMElement</span></span><strong> $node</strong>, <span class="param-type">string</span><strong> $path</strong>, <span class="param-type">string</span><strong> $file</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Parses a node from a loaded XML file.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$collection</code> - Collection to associate with the node</li>
                <li><code>$node</code> - Element to parse</li>
                <li><code>$path</code> - Full path of the XML file being processed</li>
                <li><code>$file</code> - Loaded file name</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\InvalidArgumentException When the XML is invalid</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="parseRoute"/>
            <h4><span class="label protected">protected</span>parseRoute<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_Routing_RouteCollection.xhtml">Symfony\Component\Routing\RouteCollection</a></span><strong> $collection</strong>, <span class="param-type"><span title="DOMElement">DOMElement</span></span><strong> $node</strong>, <span class="param-type">string</span><strong> $path</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Parses a route and adds it to the RouteCollection.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$collection</code> - RouteCollection instance</li>
                <li><code>$node</code> - Element to parse that represents a Route</li>
                <li><code>$path</code> - Full path of the XML file being processed</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\InvalidArgumentException When the XML is invalid</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="parseConfigs"/>
            <h4><span class="label private">private</span>parseConfigs<span style="font-size:90%;">( <span class="param-type"><span title="DOMElement">DOMElement</span></span><strong> $node</strong>, <span class="param-type">string</span><strong> $path</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Parses the config elements (default, requirement, option).</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$node</code> - Element to parse that contains the configs</li>
                <li><code>$path</code> - Full path of the XML file being processed</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>An array with the defaults as first item, requirements as second and options as third.</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\InvalidArgumentException When the XML is invalid</code>
                </li>
              </ul>
            </ul>
          </li>
        </ul>
        <div class="footer">Generated using phpDox 0.5-40-g758636e - Copyright (C) 2010 - 2013 by Arne Blankerts</div>
      </div>
    </div>
  </body>
</html>
