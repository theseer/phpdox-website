<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "html" "">
<html xmlns="http://www.w3.org/1999/xhtml" class="no-js" lang="en">
  <head>
    <meta charset="utf-8"/>
    <title>Symfony2 - Symfony\Component\Console\Input\StringInput - API Documentation</title>
    <link href="../css/normalize.css" rel="stylesheet" type="text/css" media="all"/>
    <link href="../css/styles.css" rel="stylesheet" type="text/css" media="all"/>
  </head>
  <body>
    <div class="wrapper clearfix">
      <div class="topbar clearfix">
        <h1>
          <a class="brand" href="../index.xhtml">Symfony2 - API Documentation</a>
        </h1>
        <ul class="nav">
          <li class="active">
            <a href="../index.xhtml">Overview</a>
          </li>
        </ul>
      </div>
      <div class="navigation">
        <h3>Constants</h3>
        <ul>
          <li>
            <a href="#REGEX_STRING">REGEX_STRING</a>
          </li>
          <li>
            <a href="#REGEX_QUOTED_STRING">REGEX_QUOTED_STRING</a>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul>
          <li>
            <a href="#__construct">__construct</a>
          </li>
          <li>
            <a href="#__toString">__toString</a>
          </li>
          <li>
            <a href="#bind">bind</a>
          </li>
          <li>
            <a href="#escapeToken">escapeToken</a>
          </li>
          <li>
            <a href="#getArgument">getArgument</a>
          </li>
          <li>
            <a href="#getArguments">getArguments</a>
          </li>
          <li>
            <a href="#getFirstArgument">getFirstArgument</a>
          </li>
          <li>
            <a href="#getOption">getOption</a>
          </li>
          <li>
            <a href="#getOptions">getOptions</a>
          </li>
          <li>
            <a href="#getParameterOption">getParameterOption</a>
          </li>
          <li>
            <a href="#hasArgument">hasArgument</a>
          </li>
          <li>
            <a href="#hasOption">hasOption</a>
          </li>
          <li>
            <a href="#hasParameterOption">hasParameterOption</a>
          </li>
          <li>
            <a href="#isInteractive">isInteractive</a>
          </li>
          <li>
            <a href="#parse">parse</a>
          </li>
          <li>
            <a href="#parse">parse</a>
          </li>
          <li>
            <a href="#setArgument">setArgument</a>
          </li>
          <li>
            <a href="#setInteractive">setInteractive</a>
          </li>
          <li>
            <a href="#setOption">setOption</a>
          </li>
          <li>
            <a href="#setTokens">setTokens</a>
          </li>
          <li>
            <a href="#tokenize">tokenize</a>
          </li>
          <li>
            <a href="#validate">validate</a>
          </li>
        </ul>
      </div>
      <div class="content">
        <h2><span style="font-size:60%">Symfony\Component\Console\Input\</span>StringInput</h2>
        <div class="file-notice">
          <p>StringInput represents an input provided as a string.</p>
          <p>
            <pre>Usage:

    $input = new StringInput('foo --bar="foobar"');</pre>
          </p>
        </div>
        <ul class="fileinfos">
          <li><b>Author: </b>Fabien Potencier &lt;fabien@symfony.com&gt;</li>
        </ul>
        <h3>Constants</h3>
        <ul class="varlist">
          <li><a name="REGEX_STRING"/>REGEX_STRING = '([^\s]+?)(?:\s|(?&lt;!\\\\)"|(?&lt;!\\\\)\'|$)'<hr/></li>
          <li><a name="REGEX_QUOTED_STRING"/>REGEX_QUOTED_STRING = '(?:"([^"\\\\]*(?:\\\\.[^"\\\\]*)*)"|\'([^\'\\\\]*(?:\\\\.[^\'\\\\]*)*)\')'<hr/></li>
        </ul>
        <h3>Members</h3>
        <ul class="varlist"/>
        <h3>Constructor</h3>
        <ul class="varlist">
          <li>
            <a name="__construct"/>
            <h4><span class="label public">public</span>__construct<span style="font-size:90%;">( <span class="param-type">string</span><strong> $input</strong>, <span class="param-type"><a href="../classes/Symfony_Component_Console_Input_InputDefinition.xhtml">Symfony\Component\Console\Input\InputDefinition</a></span><strong> $definition</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Constructor.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$input</code> - An array of parameters from the CLI (in the argv format)</li>
                <li><code>$definition</code> - A InputDefinition instance</li>
              </ul>
            </ul>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul class="varlist">
          <li>
            <a name="__toString"/>
            <h4><span class="label public">public</span>__toString<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns a stringified representation of the args passed to the command</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="bind"/>
            <h4><span class="label public">public</span>bind<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_Console_Input_InputDefinition.xhtml">Symfony\Component\Console\Input\InputDefinition</a></span><strong> $definition</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Binds the current Input instance with the given arguments and options.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$definition</code> - A InputDefinition instance</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="escapeToken"/>
            <h4><span class="label public">public</span>escapeToken<span style="font-size:90%;">( <span class="param-type">string</span><strong> $token</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Escapes a token through escapeshellarg if it contains unsafe chars</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$token</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getArgument"/>
            <h4><span class="label public">public</span>getArgument<span style="font-size:90%;">( <span class="param-type">string</span><strong> $name</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the argument value for a given argument name.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - The argument name</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The argument value</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\InvalidArgumentException When argument given doesn't exist</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getArguments"/>
            <h4><span class="label public">public</span>getArguments<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the argument values.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>An array of argument values</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getFirstArgument"/>
            <h4><span class="label public">public</span>getFirstArgument<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the first argument from the raw parameters (not parsed).</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The value of the first argument or null otherwise</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getOption"/>
            <h4><span class="label public">public</span>getOption<span style="font-size:90%;">( <span class="param-type">string</span><strong> $name</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the option value for a given option name.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - The option name</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The option value</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\InvalidArgumentException When option given doesn't exist</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getOptions"/>
            <h4><span class="label public">public</span>getOptions<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the options values.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>An array of option values</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getParameterOption"/>
            <h4><span class="label public">public</span>getParameterOption<span style="font-size:90%;">( <span class="param-type"><span title="string|array">string|array</span></span><strong> $values</strong>, <span class="param-type">mixed</span><strong> $default</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the value of a raw option (not parsed).<pre>This method is to be used to introspect the input parameters
before they have been validated. It must be used carefully.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$values</code> - The value(s) to look for in the raw parameters (can be an array)</li>
                <li><code>$default</code> - The default value to return if no result is found</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The option value</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="hasArgument"/>
            <h4><span class="label public">public</span>hasArgument<span style="font-size:90%;">( <span class="param-type"><span title="string|integer">string|integer</span></span><strong> $name</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns true if an InputArgument object exists by name or position.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - The InputArgument name or position</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>true if the InputArgument object exists, false otherwise</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="hasOption"/>
            <h4><span class="label public">public</span>hasOption<span style="font-size:90%;">( <span class="param-type">string</span><strong> $name</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns true if an InputOption object exists by name.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - The InputOption name</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>true if the InputOption object exists, false otherwise</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="hasParameterOption"/>
            <h4><span class="label public">public</span>hasParameterOption<span style="font-size:90%;">( <span class="param-type"><span title="string|array">string|array</span></span><strong> $values</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns true if the raw parameters (not parsed) contain a value.<pre>This method is to be used to introspect the input parameters
before they have been validated. It must be used carefully.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$values</code> - The value(s) to look for in the raw parameters (can be an array)</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>true if the value is contained in the raw parameters</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="isInteractive"/>
            <h4><span class="label public">public</span>isInteractive<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Checks if the input is interactive.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>Returns true if the input is interactive</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setArgument"/>
            <h4><span class="label public">public</span>setArgument<span style="font-size:90%;">( <span class="param-type">string</span><strong> $name</strong>, <span class="param-type">string</span><strong> $value</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sets an argument value by name.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - The argument name</li>
                <li><code>$value</code> - The argument value</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\InvalidArgumentException When argument given doesn't exist</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setInteractive"/>
            <h4><span class="label public">public</span>setInteractive<span style="font-size:90%;">( <span class="param-type"><span title="Boolean">Boolean</span></span><strong> $interactive</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sets the input interactivity.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$interactive</code> - If the input should be interactive</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setOption"/>
            <h4><span class="label public">public</span>setOption<span style="font-size:90%;">( <span class="param-type">string</span><strong> $name</strong>, <span class="param-type">string</span><strong> $value</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sets an option value by name.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - The option name</li>
                <li><code>$value</code> - The option value</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\InvalidArgumentException When option given doesn't exist</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="validate"/>
            <h4><span class="label public">public</span>validate<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Validates the input.</li>
            </p>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\RuntimeException When not enough arguments are given</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="parse"/>
            <h4><span class="label protected">protected</span>parse<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Processes command line arguments.</li>
            </p>
          </li>
          <li>
            <a name="parse"/>
            <h4><span class="label true">true</span><span class="label protected">protected</span>parse<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Processes command line arguments.</li>
            </p>
          </li>
          <li>
            <a name="setTokens"/>
            <h4><span class="label protected">protected</span>setTokens<span style="font-size:90%;">( <span class="param-type">Array</span><strong> $tokens</strong> )</span></h4>
          </li>
          <li>
            <a name="tokenize"/>
            <h4><span class="label private">private</span>tokenize<span style="font-size:90%;">( <span class="param-type">string</span><strong> $input</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Tokenizes a string.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$input</code> - The input to tokenize</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>An array of tokens</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\InvalidArgumentException When unable to parse input (should never happen)</code>
                </li>
              </ul>
            </ul>
          </li>
        </ul>
        <div class="footer">Generated using phpDox 0.5-40-g758636e - Copyright (C) 2010 - 2013 by Arne Blankerts</div>
      </div>
    </div>
  </body>
</html>
