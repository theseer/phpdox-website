<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "html" "">
<html xmlns="http://www.w3.org/1999/xhtml" class="no-js" lang="en">
  <head>
    <meta charset="utf-8"/>
    <title>Symfony2 - Symfony\Component\DomCrawler\FormFieldRegistry - API Documentation</title>
    <link href="../css/normalize.css" rel="stylesheet" type="text/css" media="all"/>
    <link href="../css/styles.css" rel="stylesheet" type="text/css" media="all"/>
  </head>
  <body>
    <div class="wrapper clearfix">
      <div class="topbar clearfix">
        <h1>
          <a class="brand" href="../index.xhtml">Symfony2 - API Documentation</a>
        </h1>
        <ul class="nav">
          <li class="active">
            <a href="../index.xhtml">Overview</a>
          </li>
        </ul>
      </div>
      <div class="navigation">
        <h3>Members</h3>
        <ul>
          <li>
            <a href="#fields">$fields</a>
          </li>
          <li>
            <a href="#base">$base</a>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul>
          <li>
            <a href="#add">add</a>
          </li>
          <li>
            <a href="#all">all</a>
          </li>
          <li>
            <a href="#create">create</a>
          </li>
          <li>
            <a href="#get">get</a>
          </li>
          <li>
            <a href="#getSegments">getSegments</a>
          </li>
          <li>
            <a href="#has">has</a>
          </li>
          <li>
            <a href="#remove">remove</a>
          </li>
          <li>
            <a href="#set">set</a>
          </li>
          <li>
            <a href="#walk">walk</a>
          </li>
        </ul>
      </div>
      <div class="content">
        <h2><span style="font-size:60%">Symfony\Component\DomCrawler\</span>FormFieldRegistry</h2>
        <div class="file-notice">
          <p>This is an internal class that must not be used directly.</p>
        </div>
        <ul class="fileinfos"/>
        <h3>Members</h3>
        <ul class="varlist">
          <li>
            <a name="fields"/>
            <h4><span class="label private">private</span>
                $fields</h4>
          </li>
          <li>
            <a name="base"/>
            <h4><span class="label private">private</span>
                $base</h4>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul class="varlist">
          <li>
            <a name="add"/>
            <h4><span class="label public">public</span>add<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_DomCrawler_Field_FormField.xhtml">Symfony\Component\DomCrawler\Field\FormField</a></span><strong> $field</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Adds a field to the registry.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$field</code> - The field</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\InvalidArgumentException when the name is malformed</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="all"/>
            <h4><span class="label public">public</span>all<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the list of field with their value.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The list of fields as array((string) Fully qualified name =&gt; (mixed) value)</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="get"/>
            <h4><span class="label public">public</span>get<span style="font-size:90%;">( <span class="param-type">string</span><strong> $name</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the value of the field and its children.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - The fully qualified name of the field</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The value of the field</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\InvalidArgumentException when the name is malformed</code>
                </li>
                <li>
                  <code>\InvalidArgumentException if the field does not exist</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="has"/>
            <h4><span class="label public">public</span>has<span style="font-size:90%;">( <span class="param-type">string</span><strong> $name</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Tests whether the form has the given field.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - The fully qualified name of the field</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>Whether the form has the given field</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="remove"/>
            <h4><span class="label public">public</span>remove<span style="font-size:90%;">( <span class="param-type">string</span><strong> $name</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Removes a field and its children from the registry.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - The fully qualified name of the base field</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\InvalidArgumentException when the name is malformed</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="set"/>
            <h4><span class="label public">public</span>set<span style="font-size:90%;">( <span class="param-type">string</span><strong> $name</strong>, <span class="param-type">mixed</span><strong> $value</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Set the value of a field and its children.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - The fully qualified name of the field</li>
                <li><code>$value</code> - The value</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\InvalidArgumentException when the name is malformed</code>
                </li>
                <li>
                  <code>\InvalidArgumentException if the field does not exist</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="create"/>
            <h4><span class="label true">true</span><span class="label private">private</span>create<span style="font-size:90%;">( <span class="param-type">string</span><strong> $base</strong>, <span class="param-type">Array</span><strong> $values</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Creates an instance of the class.<pre>This function is made private because it allows overriding the $base and
the $values properties without any type checking.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$base</code> - The fully qualified name of the base field</li>
                <li><code>$values</code> - The values of the fields</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getSegments"/>
            <h4><span class="label private">private</span>getSegments<span style="font-size:90%;">( <span class="param-type">string</span><strong> $name</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Splits a field name into segments as a web browser would do.<pre>&lt;code&gt;
    getSegments('base[foo][3][]') = array('base', 'foo, '3', '');
&lt;/code&gt;</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - The name of the field</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The list of segments</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\InvalidArgumentException when the name is malformed</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="walk"/>
            <h4><span class="label private">private</span>walk<span style="font-size:90%;">( <span class="param-type">Array</span><strong> $array</strong>, <span class="param-type">string</span><strong> $base</strong>, <span class="param-type">Array</span><strong> &amp;$output</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Transforms a PHP array in a list of fully qualified name / value.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$array</code> - The PHP array</li>
                <li><code>$base</code> - The name of the base field</li>
                <li><code>$output</code> - The initial values</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The list of fields as array((string) Fully qualified name =&gt; (mixed) value)</li>
              </ul>
            </ul>
          </li>
        </ul>
        <div class="footer">Generated using phpDox 0.5-40-g758636e - Copyright (C) 2010 - 2013 by Arne Blankerts</div>
      </div>
    </div>
  </body>
</html>
