<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "html" "">
<html xmlns="http://www.w3.org/1999/xhtml" class="no-js" lang="en">
  <head>
    <meta charset="utf-8"/>
    <title>Symfony2 - Doctrine\ORM\QueryBuilder - API Documentation</title>
    <link href="../css/normalize.css" rel="stylesheet" type="text/css" media="all"/>
    <link href="../css/styles.css" rel="stylesheet" type="text/css" media="all"/>
  </head>
  <body>
    <div class="wrapper clearfix">
      <div class="topbar clearfix">
        <h1>
          <a class="brand" href="../index.xhtml">Symfony2 - API Documentation</a>
        </h1>
        <ul class="nav">
          <li class="active">
            <a href="../index.xhtml">Overview</a>
          </li>
        </ul>
      </div>
      <div class="navigation">
        <h3>Constants</h3>
        <ul>
          <li>
            <a href="#SELECT">SELECT</a>
          </li>
          <li>
            <a href="#DELETE">DELETE</a>
          </li>
          <li>
            <a href="#UPDATE">UPDATE</a>
          </li>
          <li>
            <a href="#STATE_DIRTY">STATE_DIRTY</a>
          </li>
          <li>
            <a href="#STATE_CLEAN">STATE_CLEAN</a>
          </li>
        </ul>
        <h3>Members</h3>
        <ul>
          <li>
            <a href="#_em">$_em</a>
          </li>
          <li>
            <a href="#_dqlParts">$_dqlParts</a>
          </li>
          <li>
            <a href="#_type">$_type</a>
          </li>
          <li>
            <a href="#_state">$_state</a>
          </li>
          <li>
            <a href="#_dql">$_dql</a>
          </li>
          <li>
            <a href="#parameters">$parameters</a>
          </li>
          <li>
            <a href="#_firstResult">$_firstResult</a>
          </li>
          <li>
            <a href="#_maxResults">$_maxResults</a>
          </li>
          <li>
            <a href="#joinRootAliases">$joinRootAliases</a>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul>
          <li>
            <a href="#__clone">__clone</a>
          </li>
          <li>
            <a href="#__construct">__construct</a>
          </li>
          <li>
            <a href="#__toString">__toString</a>
          </li>
          <li>
            <a href="#_getDQLForDelete">_getDQLForDelete</a>
          </li>
          <li>
            <a href="#_getDQLForSelect">_getDQLForSelect</a>
          </li>
          <li>
            <a href="#_getDQLForUpdate">_getDQLForUpdate</a>
          </li>
          <li>
            <a href="#_getReducedDQLQueryPart">_getReducedDQLQueryPart</a>
          </li>
          <li>
            <a href="#add">add</a>
          </li>
          <li>
            <a href="#addGroupBy">addGroupBy</a>
          </li>
          <li>
            <a href="#addOrderBy">addOrderBy</a>
          </li>
          <li>
            <a href="#addSelect">addSelect</a>
          </li>
          <li>
            <a href="#andHaving">andHaving</a>
          </li>
          <li>
            <a href="#andWhere">andWhere</a>
          </li>
          <li>
            <a href="#delete">delete</a>
          </li>
          <li>
            <a href="#distinct">distinct</a>
          </li>
          <li>
            <a href="#expr">expr</a>
          </li>
          <li>
            <a href="#findRootAlias">findRootAlias</a>
          </li>
          <li>
            <a href="#from">from</a>
          </li>
          <li>
            <a href="#getDQL">getDQL</a>
          </li>
          <li>
            <a href="#getDQLPart">getDQLPart</a>
          </li>
          <li>
            <a href="#getDQLParts">getDQLParts</a>
          </li>
          <li>
            <a href="#getEntityManager">getEntityManager</a>
          </li>
          <li>
            <a href="#getFirstResult">getFirstResult</a>
          </li>
          <li>
            <a href="#getMaxResults">getMaxResults</a>
          </li>
          <li>
            <a href="#getParameter">getParameter</a>
          </li>
          <li>
            <a href="#getParameters">getParameters</a>
          </li>
          <li>
            <a href="#getQuery">getQuery</a>
          </li>
          <li>
            <a href="#getRootAlias">getRootAlias</a>
          </li>
          <li>
            <a href="#getRootAliases">getRootAliases</a>
          </li>
          <li>
            <a href="#getRootEntities">getRootEntities</a>
          </li>
          <li>
            <a href="#getState">getState</a>
          </li>
          <li>
            <a href="#getType">getType</a>
          </li>
          <li>
            <a href="#groupBy">groupBy</a>
          </li>
          <li>
            <a href="#having">having</a>
          </li>
          <li>
            <a href="#innerJoin">innerJoin</a>
          </li>
          <li>
            <a href="#join">join</a>
          </li>
          <li>
            <a href="#leftJoin">leftJoin</a>
          </li>
          <li>
            <a href="#orHaving">orHaving</a>
          </li>
          <li>
            <a href="#orWhere">orWhere</a>
          </li>
          <li>
            <a href="#orderBy">orderBy</a>
          </li>
          <li>
            <a href="#resetDQLPart">resetDQLPart</a>
          </li>
          <li>
            <a href="#resetDQLParts">resetDQLParts</a>
          </li>
          <li>
            <a href="#select">select</a>
          </li>
          <li>
            <a href="#set">set</a>
          </li>
          <li>
            <a href="#setFirstResult">setFirstResult</a>
          </li>
          <li>
            <a href="#setMaxResults">setMaxResults</a>
          </li>
          <li>
            <a href="#setParameter">setParameter</a>
          </li>
          <li>
            <a href="#setParameters">setParameters</a>
          </li>
          <li>
            <a href="#update">update</a>
          </li>
          <li>
            <a href="#where">where</a>
          </li>
        </ul>
      </div>
      <div class="content">
        <h2><span style="font-size:60%">Doctrine\ORM\</span>QueryBuilder</h2>
        <div class="file-notice">
          <p>This class is responsible for building DQL query strings via an object oriented PHP interface.</p>
        </div>
        <ul class="fileinfos">
          <li><b>Author: </b>Guilherme Blanco &lt;guilhermeblanco@hotmail.com&gt;</li>
          <li><b>Author: </b>Jonathan Wage &lt;jonwage@gmail.com&gt;</li>
          <li><b>Author: </b>Roman Borschel &lt;roman@code-factory.org&gt;</li>
        </ul>
        <h3>Constants</h3>
        <ul class="varlist">
          <li><a name="SELECT"/>SELECT = 0<hr/></li>
          <li><a name="DELETE"/>DELETE = 1<hr/></li>
          <li><a name="UPDATE"/>UPDATE = 2<hr/></li>
          <li><a name="STATE_DIRTY"/>STATE_DIRTY = 0<em> </em><p><li>The builder states.</li></p><hr/></li>
          <li><a name="STATE_CLEAN"/>STATE_CLEAN = 1<hr/></li>
        </ul>
        <h3>Members</h3>
        <ul class="varlist">
          <li>
            <a name="_em"/>
            <h4><span class="label private">private</span>object 
                
                $_em</h4>
            <ul class="varlist">
              <li/>
            </ul>
          </li>
          <li>
            <a name="_dqlParts"/>
            <h4><span class="label private">private</span>array 
                
                $_dqlParts</h4>
            <ul class="varlist">
              <li/>
            </ul>
          </li>
          <li>
            <a name="_type"/>
            <h4><span class="label private">private</span>integer 
                
                $_type</h4>
            <ul class="varlist">
              <li/>
            </ul>
          </li>
          <li>
            <a name="_state"/>
            <h4><span class="label private">private</span>integer 
                
                $_state</h4>
            <ul class="varlist">
              <li/>
            </ul>
          </li>
          <li>
            <a name="_dql"/>
            <h4><span class="label private">private</span>string 
                
                $_dql</h4>
            <ul class="varlist">
              <li/>
            </ul>
          </li>
          <li>
            <a name="parameters"/>
            <h4><span class="label private">private</span>object 
                
                $parameters</h4>
            <ul class="varlist">
              <li/>
            </ul>
          </li>
          <li>
            <a name="_firstResult"/>
            <h4><span class="label private">private</span>integer 
                
                $_firstResult</h4>
            <ul class="varlist">
              <li/>
            </ul>
          </li>
          <li>
            <a name="_maxResults"/>
            <h4><span class="label private">private</span>integer 
                
                $_maxResults</h4>
            <ul class="varlist">
              <li/>
            </ul>
          </li>
          <li>
            <a name="joinRootAliases"/>
            <h4><span class="label private">private</span>array 
                
                $joinRootAliases</h4>
            <ul class="varlist">
              <li/>
            </ul>
          </li>
        </ul>
        <h3>Constructor</h3>
        <ul class="varlist">
          <li>
            <a name="__construct"/>
            <h4><span class="label public">public</span>__construct<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Doctrine_ORM_EntityManager.xhtml">Doctrine\ORM\EntityManager</a></span><strong> $em</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Initializes a new &lt;tt&gt;QueryBuilder&lt;/tt&gt; that uses the given &lt;tt&gt;EntityManager&lt;/tt&gt;.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$em</code> - The EntityManager to use.</li>
              </ul>
            </ul>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul class="varlist">
          <li>
            <a name="__clone"/>
            <h4><span class="label public">public</span>__clone<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Deep clone of all expression objects in the DQL parts.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="__toString"/>
            <h4><span class="label public">public</span>__toString<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets a string representation of this QueryBuilder which corresponds to the final DQL query being constructed.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The string representation of this QueryBuilder.</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="add"/>
            <h4><span class="label public">public</span>add<span style="font-size:90%;">( <span class="param-type">string</span><strong> $dqlPartName</strong>, <span class="param-type">string</span><strong> $dqlPart</strong>, <span class="param-type">string</span><strong> $append</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Either appends to or replaces a single, generic query part.<pre>The available parts are: 'select', 'from', 'join', 'set', 'where',
'groupBy', 'having' and 'orderBy'.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$dqlPartName</code> - </li>
                <li><code>$dqlPart</code> - </li>
                <li><code>$append</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>This QueryBuilder instance.</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="addGroupBy"/>
            <h4><span class="label public">public</span>addGroupBy<span style="font-size:90%;">( <span class="param-type">string</span><strong> $groupBy</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Adds a grouping expression to the query.<pre>&lt;code&gt;
    $qb = $em-&gt;createQueryBuilder()
        -&gt;select('u')
        -&gt;from('User', 'u')
        -&gt;groupBy('u.lastLogin');
        -&gt;addGroupBy('u.createdAt')
&lt;/code&gt;</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$groupBy</code> - The grouping expression.</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>This QueryBuilder instance.</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="addOrderBy"/>
            <h4><span class="label public">public</span>addOrderBy<span style="font-size:90%;">( <span class="param-type">string</span><strong> $sort</strong>, <span class="param-type">string</span><strong> $order</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Adds an ordering to the query results.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$sort</code> - The ordering expression.</li>
                <li><code>$order</code> - The ordering direction.</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>This QueryBuilder instance.</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="addSelect"/>
            <h4><span class="label public">public</span>addSelect<span style="font-size:90%;">( <span class="param-type">mixed</span><strong> $select</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Adds an item that is to be returned in the query result.<pre>&lt;code&gt;
    $qb = $em-&gt;createQueryBuilder()
        -&gt;select('u')
        -&gt;addSelect('p')
        -&gt;from('User', 'u')
        -&gt;leftJoin('u.Phonenumbers', 'p');
&lt;/code&gt;</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$select</code> - The selection expression.</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>This QueryBuilder instance.</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="andHaving"/>
            <h4><span class="label public">public</span>andHaving<span style="font-size:90%;">( <span class="param-type">mixed</span><strong> $having</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Adds a restriction over the groups of the query, forming a logical conjunction with any existing having restrictions.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$having</code> - The restriction to append.</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>This QueryBuilder instance.</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="andWhere"/>
            <h4><span class="label public">public</span>andWhere<span style="font-size:90%;">( <span class="param-type">mixed</span><strong> $where</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Adds one or more restrictions to the query results, forming a logical conjunction with any previously specified restrictions.<pre>&lt;code&gt;
    $qb = $em-&gt;createQueryBuilder()
        -&gt;select('u')
        -&gt;from('User', 'u')
        -&gt;where('u.username LIKE ?')
        -&gt;andWhere('u.is_active = 1');
&lt;/code&gt;</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$where</code> - The query restrictions.</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>This QueryBuilder instance.</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="delete"/>
            <h4><span class="label public">public</span>delete<span style="font-size:90%;">( <span class="param-type">string</span><strong> $delete</strong>, <span class="param-type">string</span><strong> $alias</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Turns the query being built into a bulk delete query that ranges over a certain entity type.<pre>&lt;code&gt;
    $qb = $em-&gt;createQueryBuilder()
        -&gt;delete('User', 'u')
        -&gt;where('u.id = :user_id');
        -&gt;setParameter('user_id', 1);
&lt;/code&gt;</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$delete</code> - The class/type whose instances are subject to the deletion.</li>
                <li><code>$alias</code> - The class/type alias used in the constructed query.</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>This QueryBuilder instance.</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="distinct"/>
            <h4><span class="label public">public</span>distinct<span style="font-size:90%;">( <span class="param-type"/><strong> $flag</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Add a DISTINCT flag to this query.<pre>&lt;code&gt;
    $qb = $em-&gt;createQueryBuilder()
        -&gt;select('u')
        -&gt;distinct()
        -&gt;from('User', 'u');
&lt;/code&gt;</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code/> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="expr"/>
            <h4><span class="label public">public</span>expr<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets an ExpressionBuilder used for object-oriented construction of query expressions.<pre>This producer method is intended for convenient inline usage. Example:

&lt;code&gt;
    $qb = $em-&gt;createQueryBuilder()
        -&gt;select('u')
        -&gt;from('User', 'u')
        -&gt;where($qb-&gt;expr()-&gt;eq('u.id', 1));
&lt;/code&gt;

For more complex expression construction, consider storing the expression
builder object in a local variable.</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="from"/>
            <h4><span class="label public">public</span>from<span style="font-size:90%;">( <span class="param-type">string</span><strong> $from</strong>, <span class="param-type">string</span><strong> $alias</strong>, <span class="param-type">string</span><strong> $indexBy</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Create and add a query root corresponding to the entity identified by the given alias, forming a cartesian product with any existing query roots.<pre>&lt;code&gt;
    $qb = $em-&gt;createQueryBuilder()
        -&gt;select('u')
        -&gt;from('User', 'u')
&lt;/code&gt;</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$from</code> - The class name.</li>
                <li><code>$alias</code> - The alias of the class.</li>
                <li><code>$indexBy</code> - The index for the from.</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>This QueryBuilder instance.</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getDQL"/>
            <h4><span class="label public">public</span>getDQL<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Get the complete DQL string formed by the current specifications of this QueryBuilder.<pre>&lt;code&gt;
    $qb = $em-&gt;createQueryBuilder()
        -&gt;select('u')
        -&gt;from('User', 'u')
    echo $qb-&gt;getDql(); // SELECT u FROM User u
&lt;/code&gt;</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The DQL query string.</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getDQLPart"/>
            <h4><span class="label public">public</span>getDQLPart<span style="font-size:90%;">( <span class="param-type">string</span><strong> $queryPartName</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Get a query part by its name.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$queryPartName</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>$queryPart</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getDQLParts"/>
            <h4><span class="label public">public</span>getDQLParts<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Get all query parts.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>$dqlParts</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getEntityManager"/>
            <h4><span class="label public">public</span>getEntityManager<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Get the associated EntityManager for this query builder.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getFirstResult"/>
            <h4><span class="label public">public</span>getFirstResult<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the position of the first result the query object was set to retrieve (the "offset").<pre>Returns NULL if  was not applied to this QueryBuilder.
</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The position of the first result.</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getMaxResults"/>
            <h4><span class="label public">public</span>getMaxResults<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the maximum number of results the query object was set to retrieve (the "limit").<pre>Returns NULL if  was not applied to this query builder.
</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>Maximum number of results.</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getParameter"/>
            <h4><span class="label public">public</span>getParameter<span style="font-size:90%;">( <span class="param-type">mixed</span><strong> $key</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets a (previously set) query parameter of the query being constructed.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$key</code> - The key (index or name) of the bound parameter.</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The value of the bound parameter.</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getParameters"/>
            <h4><span class="label public">public</span>getParameters<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets all defined query parameters for the query being constructed.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The currently defined query parameters.</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getQuery"/>
            <h4><span class="label public">public</span>getQuery<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Constructs a Query instance from the current specifications of the builder.<pre>&lt;code&gt;
    $qb = $em-&gt;createQueryBuilder()
        -&gt;select('u')
        -&gt;from('User', 'u');
    $q = $qb-&gt;getQuery();
    $results = $q-&gt;execute();
&lt;/code&gt;</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getRootAlias"/>
            <h4><span class="label public">public</span>getRootAlias<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the FIRST root alias of the query. This is the first entity alias involved in the construction of the query.<pre>&lt;code&gt;
$qb = $em-&gt;createQueryBuilder()
    -&gt;select('u')
    -&gt;from('User', 'u');

echo $qb-&gt;getRootAlias(); // u
&lt;/code&gt;</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>$rootAlias</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getRootAliases"/>
            <h4><span class="label public">public</span>getRootAliases<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the root aliases of the query. This is the entity aliases involved in the construction of the query.<pre>&lt;code&gt;
    $qb = $em-&gt;createQueryBuilder()
        -&gt;select('u')
        -&gt;from('User', 'u');

    $qb-&gt;getRootAliases(); // array('u')
&lt;/code&gt;</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>$rootAliases</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getRootEntities"/>
            <h4><span class="label public">public</span>getRootEntities<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the root entities of the query. This is the entity aliases involved in the construction of the query.<pre>&lt;code&gt;
    $qb = $em-&gt;createQueryBuilder()
        -&gt;select('u')
        -&gt;from('User', 'u');

    $qb-&gt;getRootEntities(); // array('User')
&lt;/code&gt;</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>$rootEntities</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getState"/>
            <h4><span class="label public">public</span>getState<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Get the state of this query builder instance.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>Either QueryBuilder::STATE_DIRTY or QueryBuilder::STATE_CLEAN.</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getType"/>
            <h4><span class="label public">public</span>getType<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Get the type of the currently built query.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="groupBy"/>
            <h4><span class="label public">public</span>groupBy<span style="font-size:90%;">( <span class="param-type">string</span><strong> $groupBy</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Specifies a grouping over the results of the query.<pre>Replaces any previously specified groupings, if any.

&lt;code&gt;
    $qb = $em-&gt;createQueryBuilder()
        -&gt;select('u')
        -&gt;from('User', 'u')
        -&gt;groupBy('u.id');
&lt;/code&gt;</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$groupBy</code> - The grouping expression.</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>This QueryBuilder instance.</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="having"/>
            <h4><span class="label public">public</span>having<span style="font-size:90%;">( <span class="param-type">mixed</span><strong> $having</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Specifies a restriction over the groups of the query.<pre>Replaces any previous having restrictions, if any.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$having</code> - The restriction over the groups.</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>This QueryBuilder instance.</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="innerJoin"/>
            <h4><span class="label public">public</span>innerJoin<span style="font-size:90%;">( <span class="param-type">string</span><strong> $join</strong>, <span class="param-type">string</span><strong> $alias</strong>, <span class="param-type">string</span><strong> $conditionType</strong>, <span class="param-type">string</span><strong> $condition</strong>, <span class="param-type">string</span><strong> $indexBy</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Creates and adds a join over an entity association to the query.<pre>The entities in the joined association will be fetched as part of the query
result if the alias used for the joined association is placed in the select
expressions.

    [php]
    $qb = $em-&gt;createQueryBuilder()
        -&gt;select('u')
        -&gt;from('User', 'u')
        -&gt;innerJoin('u.Phonenumbers', 'p', Expr\Join::WITH, 'p.is_primary = 1');</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$join</code> - The relationship to join</li>
                <li><code>$alias</code> - The alias of the join</li>
                <li><code>$conditionType</code> - The condition type constant. Either ON or WITH.</li>
                <li><code>$condition</code> - The condition for the join</li>
                <li><code>$indexBy</code> - The index for the join</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>This QueryBuilder instance.</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="join"/>
            <h4><span class="label public">public</span>join<span style="font-size:90%;">( <span class="param-type">string</span><strong> $join</strong>, <span class="param-type">string</span><strong> $alias</strong>, <span class="param-type">string</span><strong> $conditionType</strong>, <span class="param-type">string</span><strong> $condition</strong>, <span class="param-type">string</span><strong> $indexBy</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Creates and adds a join over an entity association to the query.<pre>The entities in the joined association will be fetched as part of the query
result if the alias used for the joined association is placed in the select
expressions.

&lt;code&gt;
    $qb = $em-&gt;createQueryBuilder()
        -&gt;select('u')
        -&gt;from('User', 'u')
        -&gt;join('u.Phonenumbers', 'p', Expr\Join::WITH, 'p.is_primary = 1');
&lt;/code&gt;</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$join</code> - The relationship to join</li>
                <li><code>$alias</code> - The alias of the join</li>
                <li><code>$conditionType</code> - The condition type constant. Either ON or WITH.</li>
                <li><code>$condition</code> - The condition for the join</li>
                <li><code>$indexBy</code> - The index for the join</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>This QueryBuilder instance.</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="leftJoin"/>
            <h4><span class="label public">public</span>leftJoin<span style="font-size:90%;">( <span class="param-type">string</span><strong> $join</strong>, <span class="param-type">string</span><strong> $alias</strong>, <span class="param-type">string</span><strong> $conditionType</strong>, <span class="param-type">string</span><strong> $condition</strong>, <span class="param-type">string</span><strong> $indexBy</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Creates and adds a left join over an entity association to the query.<pre>The entities in the joined association will be fetched as part of the query
result if the alias used for the joined association is placed in the select
expressions.

&lt;code&gt;
    $qb = $em-&gt;createQueryBuilder()
        -&gt;select('u')
        -&gt;from('User', 'u')
        -&gt;leftJoin('u.Phonenumbers', 'p', Expr\Join::WITH, 'p.is_primary = 1');
&lt;/code&gt;</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$join</code> - The relationship to join</li>
                <li><code>$alias</code> - The alias of the join</li>
                <li><code>$conditionType</code> - The condition type constant. Either ON or WITH.</li>
                <li><code>$condition</code> - The condition for the join</li>
                <li><code>$indexBy</code> - The index for the join</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>This QueryBuilder instance.</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="orHaving"/>
            <h4><span class="label public">public</span>orHaving<span style="font-size:90%;">( <span class="param-type">mixed</span><strong> $having</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Adds a restriction over the groups of the query, forming a logical disjunction with any existing having restrictions.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$having</code> - The restriction to add.</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>This QueryBuilder instance.</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="orWhere"/>
            <h4><span class="label public">public</span>orWhere<span style="font-size:90%;">( <span class="param-type">mixed</span><strong> $where</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Adds one or more restrictions to the query results, forming a logical disjunction with any previously specified restrictions.<pre>&lt;code&gt;
    $qb = $em-&gt;createQueryBuilder()
        -&gt;select('u')
        -&gt;from('User', 'u')
        -&gt;where('u.id = 1')
        -&gt;orWhere('u.id = 2');
&lt;/code&gt;</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$where</code> - The WHERE statement</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>$qb</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="orderBy"/>
            <h4><span class="label public">public</span>orderBy<span style="font-size:90%;">( <span class="param-type">string</span><strong> $sort</strong>, <span class="param-type">string</span><strong> $order</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Specifies an ordering for the query results.<pre>Replaces any previously specified orderings, if any.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$sort</code> - The ordering expression.</li>
                <li><code>$order</code> - The ordering direction.</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>This QueryBuilder instance.</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="resetDQLPart"/>
            <h4><span class="label public">public</span>resetDQLPart<span style="font-size:90%;">( <span class="param-type">string</span><strong> $part</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Reset single DQL part</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$part</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="resetDQLParts"/>
            <h4><span class="label public">public</span>resetDQLParts<span style="font-size:90%;">( <span class="param-type">array</span><strong> $parts</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Reset DQL parts</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$parts</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="select"/>
            <h4><span class="label public">public</span>select<span style="font-size:90%;">( <span class="param-type">mixed</span><strong> $select</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Specifies an item that is to be returned in the query result.<pre>Replaces any previously specified selections, if any.

&lt;code&gt;
    $qb = $em-&gt;createQueryBuilder()
        -&gt;select('u', 'p')
        -&gt;from('User', 'u')
        -&gt;leftJoin('u.Phonenumbers', 'p');
&lt;/code&gt;</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$select</code> - The selection expressions.</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>This QueryBuilder instance.</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="set"/>
            <h4><span class="label public">public</span>set<span style="font-size:90%;">( <span class="param-type">string</span><strong> $key</strong>, <span class="param-type">string</span><strong> $value</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sets a new value for a field in a bulk update query.<pre>&lt;code&gt;
    $qb = $em-&gt;createQueryBuilder()
        -&gt;update('User', 'u')
        -&gt;set('u.password', md5('password'))
        -&gt;where('u.id = ?');
&lt;/code&gt;</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$key</code> - The key/field to set.</li>
                <li><code>$value</code> - The value, expression, placeholder, etc.</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>This QueryBuilder instance.</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setFirstResult"/>
            <h4><span class="label public">public</span>setFirstResult<span style="font-size:90%;">( <span class="param-type">integer</span><strong> $firstResult</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sets the position of the first result to retrieve (the "offset").</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$firstResult</code> - The first result to return.</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>This QueryBuilder instance.</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setMaxResults"/>
            <h4><span class="label public">public</span>setMaxResults<span style="font-size:90%;">( <span class="param-type">integer</span><strong> $maxResults</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sets the maximum number of results to retrieve (the "limit").</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$maxResults</code> - The maximum number of results to retrieve.</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>This QueryBuilder instance.</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setParameter"/>
            <h4><span class="label public">public</span>setParameter<span style="font-size:90%;">( <span class="param-type"><span title="string|integer">string|integer</span></span><strong> $key</strong>, <span class="param-type">mixed</span><strong> $value</strong>, <span class="param-type"><span title="string|null">string|null</span></span><strong> $type</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sets a query parameter for the query being constructed.<pre>&lt;code&gt;
    $qb = $em-&gt;createQueryBuilder()
        -&gt;select('u')
        -&gt;from('User', 'u')
        -&gt;where('u.id = :user_id')
        -&gt;setParameter('user_id', 1);
&lt;/code&gt;</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$key</code> - The parameter position or name.</li>
                <li><code>$value</code> - The parameter value.</li>
                <li><code>$type</code> - PDO::PARAM_* or \Doctrine\DBAL\Types\Type::* constant</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>This QueryBuilder instance.</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setParameters"/>
            <h4><span class="label public">public</span>setParameters<span style="font-size:90%;">( <span class="param-type"/><strong> $parameters</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sets a collection of query parameters for the query being constructed.<pre>&lt;code&gt;
    $qb = $em-&gt;createQueryBuilder()
        -&gt;select('u')
        -&gt;from('User', 'u')
        -&gt;where('u.id = :user_id1 OR u.id = :user_id2')
        -&gt;setParameters(new ArrayCollection(array(
            new Parameter('user_id1', 1),
            new Parameter('user_id2', 2)
);
&lt;/code&gt;</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$params</code> - The query parameters to set.</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>This QueryBuilder instance.</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="update"/>
            <h4><span class="label public">public</span>update<span style="font-size:90%;">( <span class="param-type">string</span><strong> $update</strong>, <span class="param-type">string</span><strong> $alias</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Turns the query being built into a bulk update query that ranges over a certain entity type.<pre>&lt;code&gt;
    $qb = $em-&gt;createQueryBuilder()
        -&gt;update('User', 'u')
        -&gt;set('u.password', md5('password'))
        -&gt;where('u.id = ?');
&lt;/code&gt;</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$update</code> - The class/type whose instances are subject to the update.</li>
                <li><code>$alias</code> - The class/type alias used in the constructed query.</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>This QueryBuilder instance.</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="where"/>
            <h4><span class="label public">public</span>where<span style="font-size:90%;">( <span class="param-type">mixed</span><strong> $predicates</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Specifies one or more restrictions to the query result.<pre>Replaces any previously specified restrictions, if any.

&lt;code&gt;
    $qb = $em-&gt;createQueryBuilder()
        -&gt;select('u')
        -&gt;from('User', 'u')
        -&gt;where('u.id = ?');

    // You can optionally programatically build and/or expressions
    $qb = $em-&gt;createQueryBuilder();

    $or = $qb-&gt;expr()-&gt;orx();
    $or-&gt;add($qb-&gt;expr()-&gt;eq('u.id', 1));
    $or-&gt;add($qb-&gt;expr()-&gt;eq('u.id', 2));

    $qb-&gt;update('User', 'u')
        -&gt;set('u.password', md5('password'))
        -&gt;where($or);
&lt;/code&gt;</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$predicates</code> - The restriction predicates.</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>This QueryBuilder instance.</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="_getDQLForDelete"/>
            <h4><span class="label private">private</span>_getDQLForDelete<span style="font-size:90%;">(  )</span></h4>
          </li>
          <li>
            <a name="_getDQLForSelect"/>
            <h4><span class="label private">private</span>_getDQLForSelect<span style="font-size:90%;">(  )</span></h4>
          </li>
          <li>
            <a name="_getDQLForUpdate"/>
            <h4><span class="label private">private</span>_getDQLForUpdate<span style="font-size:90%;">(  )</span></h4>
          </li>
          <li>
            <a name="_getReducedDQLQueryPart"/>
            <h4><span class="label private">private</span>_getReducedDQLQueryPart<span style="font-size:90%;">( <span class="param-type"/><strong> $queryPartName</strong>, <span class="param-type">Array</span><strong> $options</strong> )</span></h4>
          </li>
          <li>
            <a name="findRootAlias"/>
            <h4><span class="label private">private</span>findRootAlias<span style="font-size:90%;">( <span class="param-type">string</span><strong> $alias</strong>, <span class="param-type">string</span><strong> $parentAlias</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Finds the root entity alias of the joined entity.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$alias</code> - The alias of the new join entity</li>
                <li><code>$parentAlias</code> - The parent entity alias of the join relationship</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
        </ul>
        <div class="footer">Generated using phpDox 0.5-40-g758636e - Copyright (C) 2010 - 2013 by Arne Blankerts</div>
      </div>
    </div>
  </body>
</html>
