<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "html" "">
<html xmlns="http://www.w3.org/1999/xhtml" class="no-js" lang="en">
  <head>
    <meta charset="utf-8"/>
    <title>Symfony2 - Symfony\Bundle\FrameworkBundle\Command\ContainerAwareCommand - API Documentation</title>
    <link href="../css/normalize.css" rel="stylesheet" type="text/css" media="all"/>
    <link href="../css/styles.css" rel="stylesheet" type="text/css" media="all"/>
  </head>
  <body>
    <div class="wrapper clearfix">
      <div class="topbar clearfix">
        <h1>
          <a class="brand" href="../index.xhtml">Symfony2 - API Documentation</a>
        </h1>
        <ul class="nav">
          <li class="active">
            <a href="../index.xhtml">Overview</a>
          </li>
        </ul>
      </div>
      <div class="navigation">
        <h3>Members</h3>
        <ul>
          <li>
            <a href="#container">$container</a>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul>
          <li>
            <a href="#__construct">__construct</a>
          </li>
          <li>
            <a href="#addArgument">addArgument</a>
          </li>
          <li>
            <a href="#addOption">addOption</a>
          </li>
          <li>
            <a href="#asText">asText</a>
          </li>
          <li>
            <a href="#asXml">asXml</a>
          </li>
          <li>
            <a href="#configure">configure</a>
          </li>
          <li>
            <a href="#execute">execute</a>
          </li>
          <li>
            <a href="#getAliases">getAliases</a>
          </li>
          <li>
            <a href="#getApplication">getApplication</a>
          </li>
          <li>
            <a href="#getContainer">getContainer</a>
          </li>
          <li>
            <a href="#getDefinition">getDefinition</a>
          </li>
          <li>
            <a href="#getDescription">getDescription</a>
          </li>
          <li>
            <a href="#getHelp">getHelp</a>
          </li>
          <li>
            <a href="#getHelper">getHelper</a>
          </li>
          <li>
            <a href="#getHelperSet">getHelperSet</a>
          </li>
          <li>
            <a href="#getName">getName</a>
          </li>
          <li>
            <a href="#getNativeDefinition">getNativeDefinition</a>
          </li>
          <li>
            <a href="#getProcessedHelp">getProcessedHelp</a>
          </li>
          <li>
            <a href="#getSynopsis">getSynopsis</a>
          </li>
          <li>
            <a href="#ignoreValidationErrors">ignoreValidationErrors</a>
          </li>
          <li>
            <a href="#initialize">initialize</a>
          </li>
          <li>
            <a href="#interact">interact</a>
          </li>
          <li>
            <a href="#isEnabled">isEnabled</a>
          </li>
          <li>
            <a href="#mergeApplicationDefinition">mergeApplicationDefinition</a>
          </li>
          <li>
            <a href="#run">run</a>
          </li>
          <li>
            <a href="#setAliases">setAliases</a>
          </li>
          <li>
            <a href="#setApplication">setApplication</a>
          </li>
          <li>
            <a href="#setCode">setCode</a>
          </li>
          <li>
            <a href="#setContainer">setContainer</a>
          </li>
          <li>
            <a href="#setDefinition">setDefinition</a>
          </li>
          <li>
            <a href="#setDescription">setDescription</a>
          </li>
          <li>
            <a href="#setHelp">setHelp</a>
          </li>
          <li>
            <a href="#setHelperSet">setHelperSet</a>
          </li>
          <li>
            <a href="#setName">setName</a>
          </li>
        </ul>
      </div>
      <div class="content">
        <h2><span style="font-size:60%">Symfony\Bundle\FrameworkBundle\Command\</span>ContainerAwareCommand</h2>
        <div class="file-notice">
          <p>Command.</p>
        </div>
        <ul class="fileinfos">
          <li><b>Author: </b>Fabien Potencier &lt;fabien@symfony.com&gt;</li>
        </ul>
        <h3>Implements</h3>
        <ul class="varlist">
          <li>
            <a href="../interfaces/Symfony_Component_DependencyInjection_ContainerAwareInterface.xhtml">Symfony\Component\DependencyInjection\ContainerAwareInterface</a>
          </li>
        </ul>
        <h3>Members</h3>
        <ul class="varlist">
          <li>
            <a name="container"/>
            <h4><span class="label private">private</span>object 
                
                $container</h4>
            <ul class="varlist">
              <li/>
            </ul>
          </li>
        </ul>
        <h3>Constructor</h3>
        <ul class="varlist">
          <li>
            <a name="__construct"/>
            <h4><span class="label public">public</span>__construct<span style="font-size:90%;">( <span class="param-type">string</span><strong> $name</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Constructor.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - The name of the command</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\LogicException When the command name is empty</code>
                </li>
              </ul>
            </ul>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul class="varlist">
          <li>
            <a name="addArgument"/>
            <h4><span class="label public">public</span>addArgument<span style="font-size:90%;">( <span class="param-type">string</span><strong> $name</strong>, <span class="param-type">integer</span><strong> $mode</strong>, <span class="param-type">string</span><strong> $description</strong>, <span class="param-type">mixed</span><strong> $default</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Adds an argument.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - The argument name</li>
                <li><code>$mode</code> - The argument mode: InputArgument::REQUIRED or InputArgument::OPTIONAL</li>
                <li><code>$description</code> - A description text</li>
                <li><code>$default</code> - The default value (for InputArgument::OPTIONAL mode only)</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The current instance</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="addOption"/>
            <h4><span class="label public">public</span>addOption<span style="font-size:90%;">( <span class="param-type">string</span><strong> $name</strong>, <span class="param-type">string</span><strong> $shortcut</strong>, <span class="param-type">integer</span><strong> $mode</strong>, <span class="param-type">string</span><strong> $description</strong>, <span class="param-type">mixed</span><strong> $default</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Adds an option.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - The option name</li>
                <li><code>$shortcut</code> - The shortcut (can be null)</li>
                <li><code>$mode</code> - The option mode: One of the InputOption::VALUE_* constants</li>
                <li><code>$description</code> - A description text</li>
                <li><code>$default</code> - The default value (must be null for InputOption::VALUE_REQUIRED or InputOption::VALUE_NONE)</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The current instance</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="asText"/>
            <h4><span class="label public">public</span>asText<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns a text representation of the command.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>A string representing the command</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="asXml"/>
            <h4><span class="label public">public</span>asXml<span style="font-size:90%;">( <span class="param-type"><span title="Boolean">Boolean</span></span><strong> $asDom</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns an XML representation of the command.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$asDom</code> - Whether to return a DOM or an XML string</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>An XML string representing the command</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getAliases"/>
            <h4><span class="label public">public</span>getAliases<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the aliases for the command.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>An array of aliases for the command</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getApplication"/>
            <h4><span class="label public">public</span>getApplication<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the application instance for this command.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>An Application instance</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getDefinition"/>
            <h4><span class="label public">public</span>getDefinition<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the InputDefinition attached to this Command.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>An InputDefinition instance</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getDescription"/>
            <h4><span class="label public">public</span>getDescription<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the description for the command.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The description for the command</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getHelp"/>
            <h4><span class="label public">public</span>getHelp<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the help for the command.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The help for the command</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getHelper"/>
            <h4><span class="label public">public</span>getHelper<span style="font-size:90%;">( <span class="param-type">string</span><strong> $name</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets a helper instance by name.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - The helper name</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The helper value</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\InvalidArgumentException if the helper is not defined</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getHelperSet"/>
            <h4><span class="label public">public</span>getHelperSet<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the helper set.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>A HelperSet instance</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getName"/>
            <h4><span class="label public">public</span>getName<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the command name.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The command name</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getNativeDefinition"/>
            <h4><span class="label public">public</span>getNativeDefinition<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the InputDefinition to be used to create XML and Text representations of this Command.<pre>Can be overridden to provide the original command representation when it would otherwise
be changed by merging with the application InputDefinition.

This method is not part of public API and should not be used directly.</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>An InputDefinition instance</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getProcessedHelp"/>
            <h4><span class="label public">public</span>getProcessedHelp<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the processed help for the command replacing the %command.name% and %command.full_name% patterns with the real values dynamically.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The processed help for the command</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getSynopsis"/>
            <h4><span class="label public">public</span>getSynopsis<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the synopsis for the command.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The synopsis</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="ignoreValidationErrors"/>
            <h4><span class="label public">public</span>ignoreValidationErrors<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Ignores validation errors.<pre>This is mainly useful for the help command.</pre></li>
            </p>
          </li>
          <li>
            <a name="isEnabled"/>
            <h4><span class="label public">public</span>isEnabled<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Checks whether the command is enabled or not in the current environment<pre>Override this to check for x or y and return false if the command can not
run properly under the current conditions.</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="mergeApplicationDefinition"/>
            <h4><span class="label public">public</span>mergeApplicationDefinition<span style="font-size:90%;">( <span class="param-type"><span title="Boolean">Boolean</span></span><strong> $mergeArgs</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Merges the application definition with the command definition.<pre>This method is not part of public API and should not be used directly.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$mergeArgs</code> - Whether to merge or not the Application definition arguments to Command definition arguments</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="run"/>
            <h4><span class="label public">public</span>run<span style="font-size:90%;">( <span class="param-type"><a href="../interfaces/Symfony_Component_Console_Input_InputInterface.xhtml">Symfony\Component\Console\Input\InputInterface</a></span><strong> $input</strong>, <span class="param-type"><a href="../interfaces/Symfony_Component_Console_Output_OutputInterface.xhtml">Symfony\Component\Console\Output\OutputInterface</a></span><strong> $output</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Runs the command.<pre>The code to execute is either defined directly with the
setCode() method or by overriding the execute() method
in a sub-class.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$input</code> - An InputInterface instance</li>
                <li><code>$output</code> - An OutputInterface instance</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The command exit code</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\Exception</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setAliases"/>
            <h4><span class="label public">public</span>setAliases<span style="font-size:90%;">( <span class="param-type">array</span><strong> $aliases</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sets the aliases for the command.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$aliases</code> - An array of aliases for the command</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The current instance</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setApplication"/>
            <h4><span class="label public">public</span>setApplication<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_Console_Application.xhtml">Symfony\Component\Console\Application</a></span><strong> $application</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sets the application instance for this command.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$application</code> - An Application instance</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setCode"/>
            <h4><span class="label public">public</span>setCode<span style="font-size:90%;">( <span class="param-type"><span title="callable">callable</span></span><strong> $code</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sets the code to execute when running this command.<pre>If this method is used, it overrides the code defined
in the execute() method.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$code</code> - A callable(InputInterface $input, OutputInterface $output)</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The current instance</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\InvalidArgumentException</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setContainer"/>
            <h4><span class="label public">public</span>setContainer<span style="font-size:90%;">( <span class="param-type"><a href="../interfaces/Symfony_Component_DependencyInjection_ContainerInterface.xhtml">Symfony\Component\DependencyInjection\ContainerInterface</a></span><strong> $container</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>{@inheritdoc}</li>
            </p>
          </li>
          <li>
            <a name="setDefinition"/>
            <h4><span class="label public">public</span>setDefinition<span style="font-size:90%;">( <span class="param-type"><span title="array|InputDefinition">array|InputDefinition</span></span><strong> $definition</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sets an array of argument and option instances.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$definition</code> - An array of argument and option instances or a definition instance</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The current instance</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setDescription"/>
            <h4><span class="label public">public</span>setDescription<span style="font-size:90%;">( <span class="param-type">string</span><strong> $description</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sets the description for the command.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$description</code> - The description for the command</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The current instance</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setHelp"/>
            <h4><span class="label public">public</span>setHelp<span style="font-size:90%;">( <span class="param-type">string</span><strong> $help</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sets the help for the command.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$help</code> - The help for the command</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The current instance</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setHelperSet"/>
            <h4><span class="label public">public</span>setHelperSet<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_Console_Helper_HelperSet.xhtml">Symfony\Component\Console\Helper\HelperSet</a></span><strong> $helperSet</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sets the helper set.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$helperSet</code> - A HelperSet instance</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setName"/>
            <h4><span class="label public">public</span>setName<span style="font-size:90%;">( <span class="param-type">string</span><strong> $name</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sets the name of the command.<pre>This method can set both the namespace and the name if
you separate them by a colon (:)

    $command-&gt;setName('foo:bar');</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - The command name</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The current instance</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\InvalidArgumentException When command name given is empty</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="configure"/>
            <h4><span class="label protected">protected</span>configure<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Configures the current command.</li>
            </p>
          </li>
          <li>
            <a name="execute"/>
            <h4><span class="label protected">protected</span>execute<span style="font-size:90%;">( <span class="param-type"><a href="../interfaces/Symfony_Component_Console_Input_InputInterface.xhtml">Symfony\Component\Console\Input\InputInterface</a></span><strong> $input</strong>, <span class="param-type"><a href="../interfaces/Symfony_Component_Console_Output_OutputInterface.xhtml">Symfony\Component\Console\Output\OutputInterface</a></span><strong> $output</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Executes the current command.<pre>This method is not abstract because you can use this class
as a concrete class. In this case, instead of defining the
execute() method, you set the code to execute by passing
a Closure to the setCode() method.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$input</code> - An InputInterface instance</li>
                <li><code>$output</code> - An OutputInterface instance</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>null or 0 if everything went fine, or an error code</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\LogicException When this abstract method is not implemented</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getContainer"/>
            <h4><span class="label protected">protected</span>getContainer<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li/>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="initialize"/>
            <h4><span class="label protected">protected</span>initialize<span style="font-size:90%;">( <span class="param-type"><a href="../interfaces/Symfony_Component_Console_Input_InputInterface.xhtml">Symfony\Component\Console\Input\InputInterface</a></span><strong> $input</strong>, <span class="param-type"><a href="../interfaces/Symfony_Component_Console_Output_OutputInterface.xhtml">Symfony\Component\Console\Output\OutputInterface</a></span><strong> $output</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Initializes the command just after the input has been validated.<pre>This is mainly useful when a lot of commands extends one main command
where some things need to be initialized based on the input arguments and options.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$input</code> - An InputInterface instance</li>
                <li><code>$output</code> - An OutputInterface instance</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="interact"/>
            <h4><span class="label protected">protected</span>interact<span style="font-size:90%;">( <span class="param-type"><a href="../interfaces/Symfony_Component_Console_Input_InputInterface.xhtml">Symfony\Component\Console\Input\InputInterface</a></span><strong> $input</strong>, <span class="param-type"><a href="../interfaces/Symfony_Component_Console_Output_OutputInterface.xhtml">Symfony\Component\Console\Output\OutputInterface</a></span><strong> $output</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Interacts with the user.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$input</code> - An InputInterface instance</li>
                <li><code>$output</code> - An OutputInterface instance</li>
              </ul>
            </ul>
          </li>
        </ul>
        <div class="footer">Generated using phpDox 0.5-40-g758636e - Copyright (C) 2010 - 2013 by Arne Blankerts</div>
      </div>
    </div>
  </body>
</html>
