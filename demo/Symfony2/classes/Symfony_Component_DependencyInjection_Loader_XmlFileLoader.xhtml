<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "html" "">
<html xmlns="http://www.w3.org/1999/xhtml" class="no-js" lang="en">
  <head>
    <meta charset="utf-8"/>
    <title>Symfony2 - Symfony\Component\DependencyInjection\Loader\XmlFileLoader - API Documentation</title>
    <link href="../css/normalize.css" rel="stylesheet" type="text/css" media="all"/>
    <link href="../css/styles.css" rel="stylesheet" type="text/css" media="all"/>
  </head>
  <body>
    <div class="wrapper clearfix">
      <div class="topbar clearfix">
        <h1>
          <a class="brand" href="../index.xhtml">Symfony2 - API Documentation</a>
        </h1>
        <ul class="nav">
          <li class="active">
            <a href="../index.xhtml">Overview</a>
          </li>
        </ul>
      </div>
      <div class="navigation">
        <h3>Methods</h3>
        <ul>
          <li>
            <a href="#__construct">__construct</a>
          </li>
          <li>
            <a href="#convertDomElementToArray">convertDomElementToArray</a>
          </li>
          <li>
            <a href="#getLocator">getLocator</a>
          </li>
          <li>
            <a href="#getResolver">getResolver</a>
          </li>
          <li>
            <a href="#import">import</a>
          </li>
          <li>
            <a href="#import">import</a>
          </li>
          <li>
            <a href="#load">load</a>
          </li>
          <li>
            <a href="#loadFromExtensions">loadFromExtensions</a>
          </li>
          <li>
            <a href="#parseDefinition">parseDefinition</a>
          </li>
          <li>
            <a href="#parseDefinitions">parseDefinitions</a>
          </li>
          <li>
            <a href="#parseFile">parseFile</a>
          </li>
          <li>
            <a href="#parseImports">parseImports</a>
          </li>
          <li>
            <a href="#parseParameters">parseParameters</a>
          </li>
          <li>
            <a href="#processAnonymousServices">processAnonymousServices</a>
          </li>
          <li>
            <a href="#resolve">resolve</a>
          </li>
          <li>
            <a href="#setCurrentDir">setCurrentDir</a>
          </li>
          <li>
            <a href="#setResolver">setResolver</a>
          </li>
          <li>
            <a href="#supports">supports</a>
          </li>
          <li>
            <a href="#validateExtensions">validateExtensions</a>
          </li>
          <li>
            <a href="#validateSchema">validateSchema</a>
          </li>
        </ul>
      </div>
      <div class="content">
        <h2><span style="font-size:60%">Symfony\Component\DependencyInjection\Loader\</span>XmlFileLoader</h2>
        <div class="file-notice">
          <p>XmlFileLoader loads XML files service definitions.</p>
        </div>
        <ul class="fileinfos">
          <li><b>Author: </b>Fabien Potencier &lt;fabien@symfony.com&gt;</li>
        </ul>
        <h3>Members</h3>
        <ul class="varlist"/>
        <h3>Constructor</h3>
        <ul class="varlist">
          <li>
            <a name="__construct"/>
            <h4><span class="label public">public</span>__construct<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_DependencyInjection_ContainerBuilder.xhtml">Symfony\Component\DependencyInjection\ContainerBuilder</a></span><strong> $container</strong>, <span class="param-type"><a href="../interfaces/Symfony_Component_Config_FileLocatorInterface.xhtml">Symfony\Component\Config\FileLocatorInterface</a></span><strong> $locator</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Constructor.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$container</code> - A ContainerBuilder instance</li>
                <li><code>$locator</code> - A FileLocator instance</li>
              </ul>
            </ul>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul class="varlist">
          <li>
            <a name="convertDomElementToArray"/>
            <h4><span class="label true">true</span><span class="label public">public</span>convertDomElementToArray<span style="font-size:90%;">( <span class="param-type"><span title="DomElement">DomElement</span></span><strong> $element</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Converts a \DomElement object to a PHP array.<pre>The following rules applies during the conversion:

 * Each tag is converted to a key value or an array
   if there is more than one "value"

 * The content of a tag is set under a "value" key (&lt;foo&gt;bar&lt;/foo&gt;)
   if the tag also has some nested tags

 * The attributes are converted to keys (&lt;foo foo="bar"/&gt;)

 * The nested-tags are converted to keys (&lt;foo&gt;&lt;foo&gt;bar&lt;/foo&gt;&lt;/foo&gt;)</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$element</code> - A \DomElement instance</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>A PHP array</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getLocator"/>
            <h4><span class="label public">public</span>getLocator<span style="font-size:90%;">(  )</span></h4>
          </li>
          <li>
            <a name="getResolver"/>
            <h4><span class="label public">public</span>getResolver<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the loader resolver.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>A LoaderResolverInterface instance</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="import"/>
            <h4><span class="label public">public</span>import<span style="font-size:90%;">( <span class="param-type">mixed</span><strong> $resource</strong>, <span class="param-type">string</span><strong> $type</strong>, <span class="param-type"><span title="Boolean">Boolean</span></span><strong> $ignoreErrors</strong>, <span class="param-type">string</span><strong> $sourceResource</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Imports a resource.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$resource</code> - A Resource</li>
                <li><code>$type</code> - The resource type</li>
                <li><code>$ignoreErrors</code> - Whether to ignore import errors or not</li>
                <li><code>$sourceResource</code> - The original resource importing the new resource</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>FileLoaderLoadException</code>
                </li>
                <li>
                  <code>FileLoaderImportCircularReferenceException</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="import"/>
            <h4><span class="label public">public</span>import<span style="font-size:90%;">( <span class="param-type">mixed</span><strong> $resource</strong>, <span class="param-type">string</span><strong> $type</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Imports a resource.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$resource</code> - A Resource</li>
                <li><code>$type</code> - The resource type</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="load"/>
            <h4><span class="label public">public</span>load<span style="font-size:90%;">( <span class="param-type">mixed</span><strong> $file</strong>, <span class="param-type">string</span><strong> $type</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Loads an XML file.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$file</code> - The resource</li>
                <li><code>$type</code> - The resource type</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="resolve"/>
            <h4><span class="label public">public</span>resolve<span style="font-size:90%;">( <span class="param-type">mixed</span><strong> $resource</strong>, <span class="param-type">string</span><strong> $type</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Finds a loader able to load an imported resource.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$resource</code> - A Resource</li>
                <li><code>$type</code> - The resource type</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>A LoaderInterface instance</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>FileLoaderLoadException if no loader is found</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setCurrentDir"/>
            <h4><span class="label public">public</span>setCurrentDir<span style="font-size:90%;">( <span class="param-type"/><strong> $dir</strong> )</span></h4>
          </li>
          <li>
            <a name="setResolver"/>
            <h4><span class="label public">public</span>setResolver<span style="font-size:90%;">( <span class="param-type"><a href="../interfaces/Symfony_Component_Config_Loader_LoaderResolverInterface.xhtml">Symfony\Component\Config\Loader\LoaderResolverInterface</a></span><strong> $resolver</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sets the loader resolver.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$resolver</code> - A LoaderResolverInterface instance</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="supports"/>
            <h4><span class="label public">public</span>supports<span style="font-size:90%;">( <span class="param-type">mixed</span><strong> $resource</strong>, <span class="param-type">string</span><strong> $type</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns true if this class supports the given resource.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$resource</code> - A resource</li>
                <li><code>$type</code> - The resource type</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>true if this class supports the given resource, false otherwise</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="validateSchema"/>
            <h4><span class="label public">public</span>validateSchema<span style="font-size:90%;">( <span class="param-type"><span title="DOMDocument">DOMDocument</span></span><strong> $dom</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Validates a documents XML schema.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$dom</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>RuntimeException When extension references a non-existent XSD file</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="parseFile"/>
            <h4><span class="label protected">protected</span>parseFile<span style="font-size:90%;">( <span class="param-type">string</span><strong> $file</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Parses a XML file.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$file</code> - Path to a file</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>InvalidArgumentException When loading of XML file returns error</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="loadFromExtensions"/>
            <h4><span class="label private">private</span>loadFromExtensions<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_DependencyInjection_SimpleXMLElement.xhtml">Symfony\Component\DependencyInjection\SimpleXMLElement</a></span><strong> $xml</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Loads from an extension.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$xml</code> - </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="parseDefinition"/>
            <h4><span class="label private">private</span>parseDefinition<span style="font-size:90%;">( <span class="param-type">string</span><strong> $id</strong>, <span class="param-type"><a href="../classes/Symfony_Component_DependencyInjection_SimpleXMLElement.xhtml">Symfony\Component\DependencyInjection\SimpleXMLElement</a></span><strong> $service</strong>, <span class="param-type">string</span><strong> $file</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Parses an individual Definition</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$id</code> - </li>
                <li><code>$service</code> - </li>
                <li><code>$file</code> - </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="parseDefinitions"/>
            <h4><span class="label private">private</span>parseDefinitions<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_DependencyInjection_SimpleXMLElement.xhtml">Symfony\Component\DependencyInjection\SimpleXMLElement</a></span><strong> $xml</strong>, <span class="param-type">string</span><strong> $file</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Parses multiple definitions</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$xml</code> - </li>
                <li><code>$file</code> - </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="parseImports"/>
            <h4><span class="label private">private</span>parseImports<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_DependencyInjection_SimpleXMLElement.xhtml">Symfony\Component\DependencyInjection\SimpleXMLElement</a></span><strong> $xml</strong>, <span class="param-type">string</span><strong> $file</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Parses imports</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$xml</code> - </li>
                <li><code>$file</code> - </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="parseParameters"/>
            <h4><span class="label private">private</span>parseParameters<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_DependencyInjection_SimpleXMLElement.xhtml">Symfony\Component\DependencyInjection\SimpleXMLElement</a></span><strong> $xml</strong>, <span class="param-type">string</span><strong> $file</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Parses parameters</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$xml</code> - </li>
                <li><code>$file</code> - </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="processAnonymousServices"/>
            <h4><span class="label private">private</span>processAnonymousServices<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_DependencyInjection_SimpleXMLElement.xhtml">Symfony\Component\DependencyInjection\SimpleXMLElement</a></span><strong> $xml</strong>, <span class="param-type">string</span><strong> $file</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Processes anonymous services</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$xml</code> - </li>
                <li><code>$file</code> - </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="validateExtensions"/>
            <h4><span class="label private">private</span>validateExtensions<span style="font-size:90%;">( <span class="param-type"><span title="DOMDocument">DOMDocument</span></span><strong> $dom</strong>, <span class="param-type">string</span><strong> $file</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Validates an extension.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$dom</code> - </li>
                <li><code>$file</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>InvalidArgumentException When no extension is found corresponding to a tag</code>
                </li>
              </ul>
            </ul>
          </li>
        </ul>
        <div class="footer">Generated using phpDox 0.5-40-g758636e - Copyright (C) 2010 - 2013 by Arne Blankerts</div>
      </div>
    </div>
  </body>
</html>
