<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "html" "">
<html xmlns="http://www.w3.org/1999/xhtml" class="no-js" lang="en">
  <head>
    <meta charset="utf-8"/>
    <title>Symfony2 - Symfony\Component\PropertyAccess\PropertyAccessor - API Documentation</title>
    <link href="../css/normalize.css" rel="stylesheet" type="text/css" media="all"/>
    <link href="../css/styles.css" rel="stylesheet" type="text/css" media="all"/>
  </head>
  <body>
    <div class="wrapper clearfix">
      <div class="topbar clearfix">
        <h1>
          <a class="brand" href="../index.xhtml">Symfony2 - API Documentation</a>
        </h1>
        <ul class="nav">
          <li class="active">
            <a href="../index.xhtml">Overview</a>
          </li>
        </ul>
      </div>
      <div class="navigation">
        <h3>Constants</h3>
        <ul>
          <li>
            <a href="#VALUE">VALUE</a>
          </li>
          <li>
            <a href="#IS_REF">IS_REF</a>
          </li>
        </ul>
        <h3>Members</h3>
        <ul>
          <li>
            <a href="#magicCall">$magicCall</a>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul>
          <li>
            <a href="#__construct">__construct</a>
          </li>
          <li>
            <a href="#camelize">camelize</a>
          </li>
          <li>
            <a href="#findAdderAndRemover">findAdderAndRemover</a>
          </li>
          <li>
            <a href="#getValue">getValue</a>
          </li>
          <li>
            <a href="#isAccessible">isAccessible</a>
          </li>
          <li>
            <a href="#readIndex">readIndex</a>
          </li>
          <li>
            <a href="#readPropertiesUntil">readPropertiesUntil</a>
          </li>
          <li>
            <a href="#readProperty">readProperty</a>
          </li>
          <li>
            <a href="#setValue">setValue</a>
          </li>
          <li>
            <a href="#writeIndex">writeIndex</a>
          </li>
          <li>
            <a href="#writeProperty">writeProperty</a>
          </li>
        </ul>
      </div>
      <div class="content">
        <h2><span style="font-size:60%">Symfony\Component\PropertyAccess\</span>PropertyAccessor</h2>
        <div class="file-notice">
          <p>Default implementation of {@link PropertyAccessorInterface}.</p>
        </div>
        <ul class="fileinfos">
          <li><b>Author: </b>Bernhard Schussek &lt;bschussek@gmail.com&gt;</li>
        </ul>
        <h3>Implements</h3>
        <ul class="varlist">
          <li>
            <a href="../interfaces/Symfony_Component_PropertyAccess_PropertyAccessorInterface.xhtml">Symfony\Component\PropertyAccess\PropertyAccessorInterface</a>
          </li>
        </ul>
        <h3>Constants</h3>
        <ul class="varlist">
          <li><a name="VALUE"/>VALUE = 0<hr/></li>
          <li><a name="IS_REF"/>IS_REF = 1<hr/></li>
        </ul>
        <h3>Members</h3>
        <ul class="varlist">
          <li>
            <a name="magicCall"/>
            <h4><span class="label private">private</span>
                $magicCall</h4>
          </li>
        </ul>
        <h3>Constructor</h3>
        <ul class="varlist">
          <li>
            <a name="__construct"/>
            <h4><span class="label public">public</span>__construct<span style="font-size:90%;">( <span class="param-type"/><strong> $magicCall</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Should not be used by application code. Use {@link PropertyAccess::getPropertyAccessor()} instead.</li>
            </p>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul class="varlist">
          <li>
            <a name="getValue"/>
            <h4><span class="label public">public</span>getValue<span style="font-size:90%;">( <span class="param-type"/><strong> $objectOrArray</strong>, <span class="param-type"/><strong> $propertyPath</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>{@inheritdoc}</li>
            </p>
          </li>
          <li>
            <a name="setValue"/>
            <h4><span class="label public">public</span>setValue<span style="font-size:90%;">( <span class="param-type"/><strong> &amp;$objectOrArray</strong>, <span class="param-type"/><strong> $propertyPath</strong>, <span class="param-type"/><strong> $value</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>{@inheritdoc}</li>
            </p>
          </li>
          <li>
            <a name="camelize"/>
            <h4><span class="label private">private</span>camelize<span style="font-size:90%;">( <span class="param-type">string</span><strong> $string</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Camelizes a given string.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$string</code> - Some string</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The camelized version of the string</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="findAdderAndRemover"/>
            <h4><span class="label private">private</span>findAdderAndRemover<span style="font-size:90%;">( <span class="param-type"><a href="../classes/ReflectionClass.xhtml">ReflectionClass</a></span><strong> $reflClass</strong>, <span class="param-type">Array</span><strong> $singulars</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Searches for add and remove methods.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$reflClass</code> - The reflection class for the given object</li>
                <li><code>$singulars</code> - The singular form of the property name or null</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>An array containing the adder and remover when found, null otherwise</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>NoSuchPropertyException If the property does not exist</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="isAccessible"/>
            <h4><span class="label private">private</span>isAccessible<span style="font-size:90%;">( <span class="param-type"><a href="../classes/ReflectionClass.xhtml">ReflectionClass</a></span><strong> $class</strong>, <span class="param-type">string</span><strong> $methodName</strong>, <span class="param-type">integer</span><strong> $parameters</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns whether a method is public and has a specific number of required parameters.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$class</code> - The class of the method</li>
                <li><code>$methodName</code> - The method name</li>
                <li><code>$parameters</code> - The number of parameters</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>Whether the method is public and has $parameters</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="readIndex"/>
            <h4><span class="label private">private</span>readIndex<span style="font-size:90%;">( <span class="param-type"><span title="\ArrayAccess|array">ArrayAccess|array</span></span><strong> &amp;$array</strong>, <span class="param-type"><span title="string|integer">string|integer</span></span><strong> $index</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Reads a key from an array-like structure.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$array</code> - The array or \ArrayAccess object to read from</li>
                <li><code>$index</code> - The key to read</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The value of the key</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>NoSuchPropertyException If the array does not implement \ArrayAccess or it is not an array</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="readPropertiesUntil"/>
            <h4><span class="label private">private</span>readPropertiesUntil<span style="font-size:90%;">( <span class="param-type"><span title="object|array">object|array</span></span><strong> &amp;$objectOrArray</strong>, <span class="param-type"><a href="../interfaces/Symfony_Component_PropertyAccess_PropertyPathInterface.xhtml">Symfony\Component\PropertyAccess\PropertyPathInterface</a></span><strong> $propertyPath</strong>, <span class="param-type">integer</span><strong> $lastIndex</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Reads the path from an object up to a given path index.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$objectOrArray</code> - The object or array to read from</li>
                <li><code>$propertyPath</code> - The property path to read</li>
                <li><code>$lastIndex</code> - The index up to which should be read</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The values read in the path.</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>UnexpectedTypeException If a value within the path is neither object nor array.</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="readProperty"/>
            <h4><span class="label private">private</span>readProperty<span style="font-size:90%;">( <span class="param-type">invalid method call</span><strong> &amp;$object</strong>, <span class="param-type">string</span><strong> $property</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Reads the a property from an object or array.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$object</code> - The object to read from.</li>
                <li><code>$property</code> - The property to read.</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The value of the read property</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>NoSuchPropertyException If the property does not exist or is not</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="writeIndex"/>
            <h4><span class="label private">private</span>writeIndex<span style="font-size:90%;">( <span class="param-type"><span title="\ArrayAccess|array">ArrayAccess|array</span></span><strong> &amp;$array</strong>, <span class="param-type"><span title="string|integer">string|integer</span></span><strong> $index</strong>, <span class="param-type">mixed</span><strong> $value</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sets the value of the property at the given index in the path</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$array</code> - An array or \ArrayAccess object to write to</li>
                <li><code>$index</code> - The index to write at</li>
                <li><code>$value</code> - The value to write</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>NoSuchPropertyException If the array does not implement \ArrayAccess or it is not an array</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="writeProperty"/>
            <h4><span class="label private">private</span>writeProperty<span style="font-size:90%;">( <span class="param-type"><span title="object|array">object|array</span></span><strong> &amp;$object</strong>, <span class="param-type">string</span><strong> $property</strong>, <span class="param-type"><span title="string|null">string|null</span></span><strong> $singular</strong>, <span class="param-type">mixed</span><strong> $value</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sets the value of the property at the given index in the path</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$object</code> - The object or array to write to</li>
                <li><code>$property</code> - The property to write</li>
                <li><code>$singular</code> - The singular form of the property name or null</li>
                <li><code>$value</code> - The value to write</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>NoSuchPropertyException If the property does not exist or is not</code>
                </li>
              </ul>
            </ul>
          </li>
        </ul>
        <div class="footer">Generated using phpDox 0.5-40-g758636e - Copyright (C) 2010 - 2013 by Arne Blankerts</div>
      </div>
    </div>
  </body>
</html>
