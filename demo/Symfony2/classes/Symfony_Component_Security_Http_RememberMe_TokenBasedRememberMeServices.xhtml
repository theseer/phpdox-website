<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "html" "">
<html xmlns="http://www.w3.org/1999/xhtml" class="no-js" lang="en">
  <head>
    <meta charset="utf-8"/>
    <title>Symfony2 - Symfony\Component\Security\Http\RememberMe\TokenBasedRememberMeServices - API Documentation</title>
    <link href="../css/normalize.css" rel="stylesheet" type="text/css" media="all"/>
    <link href="../css/styles.css" rel="stylesheet" type="text/css" media="all"/>
  </head>
  <body>
    <div class="wrapper clearfix">
      <div class="topbar clearfix">
        <h1>
          <a class="brand" href="../index.xhtml">Symfony2 - API Documentation</a>
        </h1>
        <ul class="nav">
          <li class="active">
            <a href="../index.xhtml">Overview</a>
          </li>
        </ul>
      </div>
      <div class="navigation">
        <h3>Methods</h3>
        <ul>
          <li>
            <a href="#__construct">__construct</a>
          </li>
          <li>
            <a href="#autoLogin">autoLogin</a>
          </li>
          <li>
            <a href="#cancelCookie">cancelCookie</a>
          </li>
          <li>
            <a href="#compareHashes">compareHashes</a>
          </li>
          <li>
            <a href="#decodeCookie">decodeCookie</a>
          </li>
          <li>
            <a href="#encodeCookie">encodeCookie</a>
          </li>
          <li>
            <a href="#generateCookieHash">generateCookieHash</a>
          </li>
          <li>
            <a href="#generateCookieValue">generateCookieValue</a>
          </li>
          <li>
            <a href="#getKey">getKey</a>
          </li>
          <li>
            <a href="#getRememberMeParameter">getRememberMeParameter</a>
          </li>
          <li>
            <a href="#getUserProvider">getUserProvider</a>
          </li>
          <li>
            <a href="#isRememberMeRequested">isRememberMeRequested</a>
          </li>
          <li>
            <a href="#loginFail">loginFail</a>
          </li>
          <li>
            <a href="#loginSuccess">loginSuccess</a>
          </li>
          <li>
            <a href="#logout">logout</a>
          </li>
          <li>
            <a href="#onLoginFail">onLoginFail</a>
          </li>
          <li>
            <a href="#onLoginSuccess">onLoginSuccess</a>
          </li>
          <li>
            <a href="#onLoginSuccess">onLoginSuccess</a>
          </li>
          <li>
            <a href="#processAutoLoginCookie">processAutoLoginCookie</a>
          </li>
          <li>
            <a href="#processAutoLoginCookie">processAutoLoginCookie</a>
          </li>
        </ul>
      </div>
      <div class="content">
        <h2><span style="font-size:60%">Symfony\Component\Security\Http\RememberMe\</span>TokenBasedRememberMeServices</h2>
        <div class="file-notice">
          <p>Concrete implementation of the RememberMeServicesInterface providing remember-me capabilities without requiring a TokenProvider.</p>
        </div>
        <ul class="fileinfos">
          <li><b>Author: </b>Johannes M. Schmitt &lt;schmittjoh@gmail.com&gt;</li>
        </ul>
        <h3>Constants</h3>
        <ul class="varlist"/>
        <h3>Members</h3>
        <ul class="varlist"/>
        <h3>Constructor</h3>
        <ul class="varlist">
          <li>
            <a name="__construct"/>
            <h4><span class="label public">public</span>__construct<span style="font-size:90%;">( <span class="param-type">Array</span><strong> $userProviders</strong>, <span class="param-type">string</span><strong> $key</strong>, <span class="param-type">string</span><strong> $providerKey</strong>, <span class="param-type">Array</span><strong> $options</strong>, <span class="param-type"><a href="../interfaces/Psr_Log_LoggerInterface.xhtml">Psr\Log\LoggerInterface</a></span><strong> $logger</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Constructor</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$userProviders</code> - </li>
                <li><code>$key</code> - </li>
                <li><code>$providerKey</code> - </li>
                <li><code>$options</code> - </li>
                <li><code>$logger</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\InvalidArgumentException</code>
                </li>
              </ul>
            </ul>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul class="varlist">
          <li>
            <a name="autoLogin"/>
            <h4><span class="label true">true</span><span class="label public">public</span>autoLogin<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_HttpFoundation_Request.xhtml">Symfony\Component\HttpFoundation\Request</a></span><strong> $request</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Implementation of RememberMeServicesInterface. Detects whether a remember-me cookie was set, decodes it, and hands it to subclasses for further processing.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$request</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>CookieTheftException</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getKey"/>
            <h4><span class="label public">public</span>getKey<span style="font-size:90%;">(  )</span></h4>
          </li>
          <li>
            <a name="getRememberMeParameter"/>
            <h4><span class="label public">public</span>getRememberMeParameter<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the parameter that is used for checking whether remember-me services have been requested.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="loginFail"/>
            <h4><span class="label true">true</span><span class="label public">public</span>loginFail<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_HttpFoundation_Request.xhtml">Symfony\Component\HttpFoundation\Request</a></span><strong> $request</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Implementation for RememberMeServicesInterface. Deletes the cookie when an attempted authentication fails.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$request</code> - </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="loginSuccess"/>
            <h4><span class="label true">true</span><span class="label public">public</span>loginSuccess<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_HttpFoundation_Request.xhtml">Symfony\Component\HttpFoundation\Request</a></span><strong> $request</strong>, <span class="param-type"><a href="../classes/Symfony_Component_HttpFoundation_Response.xhtml">Symfony\Component\HttpFoundation\Response</a></span><strong> $response</strong>, <span class="param-type"><a href="../interfaces/Symfony_Component_Security_Core_Authentication_Token_TokenInterface.xhtml">Symfony\Component\Security\Core\Authentication\Token\TokenInterface</a></span><strong> $token</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Implementation for RememberMeServicesInterface. This is called when an authentication is successful.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$request</code> - </li>
                <li><code>$response</code> - </li>
                <li><code>$token</code> - The token that resulted in a successful authentication</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="logout"/>
            <h4><span class="label public">public</span>logout<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_HttpFoundation_Request.xhtml">Symfony\Component\HttpFoundation\Request</a></span><strong> $request</strong>, <span class="param-type"><a href="../classes/Symfony_Component_HttpFoundation_Response.xhtml">Symfony\Component\HttpFoundation\Response</a></span><strong> $response</strong>, <span class="param-type"><a href="../interfaces/Symfony_Component_Security_Core_Authentication_Token_TokenInterface.xhtml">Symfony\Component\Security\Core\Authentication\Token\TokenInterface</a></span><strong> $token</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Implementation for LogoutHandlerInterface. Deletes the cookie.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$request</code> - </li>
                <li><code>$response</code> - </li>
                <li><code>$token</code> - </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="cancelCookie"/>
            <h4><span class="label protected">protected</span>cancelCookie<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_HttpFoundation_Request.xhtml">Symfony\Component\HttpFoundation\Request</a></span><strong> $request</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Deletes the remember-me cookie</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$request</code> - </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="decodeCookie"/>
            <h4><span class="label protected">protected</span>decodeCookie<span style="font-size:90%;">( <span class="param-type">string</span><strong> $rawCookie</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Decodes the raw cookie value</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$rawCookie</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="encodeCookie"/>
            <h4><span class="label protected">protected</span>encodeCookie<span style="font-size:90%;">( <span class="param-type">Array</span><strong> $cookieParts</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Encodes the cookie parts</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$cookieParts</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="generateCookieHash"/>
            <h4><span class="label protected">protected</span>generateCookieHash<span style="font-size:90%;">( <span class="param-type">string</span><strong> $class</strong>, <span class="param-type">string</span><strong> $username</strong>, <span class="param-type">integer</span><strong> $expires</strong>, <span class="param-type">string</span><strong> $password</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Generates a hash for the cookie to ensure it is not being tempered with</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$class</code> - </li>
                <li><code>$username</code> - The username</li>
                <li><code>$expires</code> - The unixtime when the cookie expires</li>
                <li><code>$password</code> - The encoded password</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\RuntimeException when the private key is empty</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="generateCookieValue"/>
            <h4><span class="label protected">protected</span>generateCookieValue<span style="font-size:90%;">( <span class="param-type">string</span><strong> $class</strong>, <span class="param-type">string</span><strong> $username</strong>, <span class="param-type">integer</span><strong> $expires</strong>, <span class="param-type">string</span><strong> $password</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Generates the cookie value.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$class</code> - </li>
                <li><code>$username</code> - The username</li>
                <li><code>$expires</code> - The unixtime when the cookie expires</li>
                <li><code>$password</code> - The encoded password</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\RuntimeException if username contains invalid chars</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getUserProvider"/>
            <h4><span class="label true">true</span><span class="label protected">protected</span>getUserProvider<span style="font-size:90%;">( <span class="param-type"/><strong> $class</strong> )</span></h4>
          </li>
          <li>
            <a name="isRememberMeRequested"/>
            <h4><span class="label protected">protected</span>isRememberMeRequested<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_HttpFoundation_Request.xhtml">Symfony\Component\HttpFoundation\Request</a></span><strong> $request</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Checks whether remember-me capabilities where requested</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$request</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="onLoginFail"/>
            <h4><span class="label protected">protected</span>onLoginFail<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_HttpFoundation_Request.xhtml">Symfony\Component\HttpFoundation\Request</a></span><strong> $request</strong> )</span></h4>
          </li>
          <li>
            <a name="onLoginSuccess"/>
            <h4><span class="label protected">protected</span>onLoginSuccess<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_HttpFoundation_Request.xhtml">Symfony\Component\HttpFoundation\Request</a></span><strong> $request</strong>, <span class="param-type"><a href="../classes/Symfony_Component_HttpFoundation_Response.xhtml">Symfony\Component\HttpFoundation\Response</a></span><strong> $response</strong>, <span class="param-type"><a href="../interfaces/Symfony_Component_Security_Core_Authentication_Token_TokenInterface.xhtml">Symfony\Component\Security\Core\Authentication\Token\TokenInterface</a></span><strong> $token</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>{@inheritDoc}</li>
            </p>
          </li>
          <li>
            <a name="onLoginSuccess"/>
            <h4><span class="label true">true</span><span class="label protected">protected</span>onLoginSuccess<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_HttpFoundation_Request.xhtml">Symfony\Component\HttpFoundation\Request</a></span><strong> $request</strong>, <span class="param-type"><a href="../classes/Symfony_Component_HttpFoundation_Response.xhtml">Symfony\Component\HttpFoundation\Response</a></span><strong> $response</strong>, <span class="param-type"><a href="../interfaces/Symfony_Component_Security_Core_Authentication_Token_TokenInterface.xhtml">Symfony\Component\Security\Core\Authentication\Token\TokenInterface</a></span><strong> $token</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>This is called after a user has been logged in successfully, and has requested remember-me capabilities. The implementation usually sets a cookie and possibly stores a persistent record of it.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$request</code> - </li>
                <li><code>$response</code> - </li>
                <li><code>$token</code> - </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="processAutoLoginCookie"/>
            <h4><span class="label protected">protected</span>processAutoLoginCookie<span style="font-size:90%;">( <span class="param-type">Array</span><strong> $cookieParts</strong>, <span class="param-type"><a href="../classes/Symfony_Component_HttpFoundation_Request.xhtml">Symfony\Component\HttpFoundation\Request</a></span><strong> $request</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>{@inheritDoc}</li>
            </p>
          </li>
          <li>
            <a name="processAutoLoginCookie"/>
            <h4><span class="label true">true</span><span class="label protected">protected</span>processAutoLoginCookie<span style="font-size:90%;">( <span class="param-type">Array</span><strong> $cookieParts</strong>, <span class="param-type"><a href="../classes/Symfony_Component_HttpFoundation_Request.xhtml">Symfony\Component\HttpFoundation\Request</a></span><strong> $request</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Subclasses should validate the cookie and do any additional processing that is required. This is called from autoLogin().</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$cookieParts</code> - </li>
                <li><code>$request</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="compareHashes"/>
            <h4><span class="label private">private</span>compareHashes<span style="font-size:90%;">( <span class="param-type">string</span><strong> $hash1</strong>, <span class="param-type">string</span><strong> $hash2</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Compares two hashes using a constant-time algorithm to avoid (remote) timing attacks.<pre>This is the same implementation as used in the BasePasswordEncoder.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$hash1</code> - The first hash</li>
                <li><code>$hash2</code> - The second hash</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>true if the two hashes are the same, false otherwise</li>
              </ul>
            </ul>
          </li>
        </ul>
        <div class="footer">Generated using phpDox 0.5-40-g758636e - Copyright (C) 2010 - 2013 by Arne Blankerts</div>
      </div>
    </div>
  </body>
</html>
