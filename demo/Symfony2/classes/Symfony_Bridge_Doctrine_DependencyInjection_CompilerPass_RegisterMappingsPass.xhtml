<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "html" "">
<html xmlns="http://www.w3.org/1999/xhtml" class="no-js" lang="en">
  <head>
    <meta charset="utf-8"/>
    <title>Symfony2 - Symfony\Bridge\Doctrine\DependencyInjection\CompilerPass\RegisterMappingsPass - API Documentation</title>
    <link href="../css/normalize.css" rel="stylesheet" type="text/css" media="all"/>
    <link href="../css/styles.css" rel="stylesheet" type="text/css" media="all"/>
  </head>
  <body>
    <div class="wrapper clearfix">
      <div class="topbar clearfix">
        <h1>
          <a class="brand" href="../index.xhtml">Symfony2 - API Documentation</a>
        </h1>
        <ul class="nav">
          <li class="active">
            <a href="../index.xhtml">Overview</a>
          </li>
        </ul>
      </div>
      <div class="navigation">
        <h3>Members</h3>
        <ul>
          <li>
            <a href="#driver">$driver</a>
          </li>
          <li>
            <a href="#namespaces">$namespaces</a>
          </li>
          <li>
            <a href="#managerParameters">$managerParameters</a>
          </li>
          <li>
            <a href="#driverPattern">$driverPattern</a>
          </li>
          <li>
            <a href="#enabledParameter">$enabledParameter</a>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul>
          <li>
            <a href="#__construct">__construct</a>
          </li>
          <li>
            <a href="#enabled">enabled</a>
          </li>
          <li>
            <a href="#getChainDriverServiceName">getChainDriverServiceName</a>
          </li>
          <li>
            <a href="#getDriver">getDriver</a>
          </li>
          <li>
            <a href="#process">process</a>
          </li>
        </ul>
      </div>
      <div class="content">
        <h2><span style="font-size:60%">Symfony\Bridge\Doctrine\DependencyInjection\CompilerPass\</span>RegisterMappingsPass</h2>
        <div class="file-notice">
          <p>Base class for the doctrine bundles to provide a compiler pass class that helps to register doctrine mappings.</p>
          <p>
            <pre>The compiler pass is meant to register the mappings with the metadata
chain driver corresponding to one of the object managers.

For concrete implementations that are easy to use, see the
RegisterXyMappingsPass classes in the DoctrineBundle resp.
DoctrineMongodbBundle, DoctrineCouchdbBundle and DoctrinePhpcrBundle.</pre>
          </p>
        </div>
        <ul class="fileinfos">
          <li><b>Author: </b>David Buchmann &lt;david@liip.ch&gt;</li>
        </ul>
        <h3>Implements</h3>
        <ul class="varlist">
          <li>
            <a href="../interfaces/Symfony_Component_DependencyInjection_Compiler_CompilerPassInterface.xhtml">Symfony\Component\DependencyInjection\Compiler\CompilerPassInterface</a>
          </li>
        </ul>
        <h3>Members</h3>
        <ul class="varlist">
          <li>
            <a name="driver"/>
            <h4><span class="label protected">protected</span>object 
                
                $driver</h4>
            <ul class="varlist">
              <li>DI object for the driver to use, either a service definition for a private service or a reference for a public service.</li>
            </ul>
          </li>
          <li>
            <a name="namespaces"/>
            <h4><span class="label protected">protected</span>array 
                
                $namespaces</h4>
            <ul class="varlist">
              <li>List of namespaces handled by the driver</li>
            </ul>
          </li>
          <li>
            <a name="managerParameters"/>
            <h4><span class="label protected">protected</span>array 
                
                $managerParameters</h4>
            <ul class="varlist">
              <li>List of potential container parameters that hold the object manager name to register the mappings with the correct metadata driver, for example array('acme.manager', 'doctrine.default_entity_manager')</li>
            </ul>
          </li>
          <li>
            <a name="driverPattern"/>
            <h4><span class="label protected">protected</span>string 
                
                $driverPattern</h4>
            <ul class="varlist">
              <li>Naming pattern of the metadata chain driver service ids, for example 'doctrine.orm.%s_metadata_driver'</li>
            </ul>
          </li>
          <li>
            <a name="enabledParameter"/>
            <h4><span class="label protected">protected</span>string 
                
                $enabledParameter</h4>
            <ul class="varlist">
              <li>A name for a parameter in the container. If set, this compiler pass will only do anything if the parameter is present. (But regardless of the value of that parameter.</li>
            </ul>
          </li>
        </ul>
        <h3>Constructor</h3>
        <ul class="varlist">
          <li>
            <a name="__construct"/>
            <h4><span class="label public">public</span>__construct<span style="font-size:90%;">( <span class="param-type"><span title="Definition|Reference">Definition|Reference</span></span><strong> $driver</strong>, <span class="param-type">Array</span><strong> $namespaces</strong>, <span class="param-type">Array</span><strong> $managerParameters</strong>, <span class="param-type">string</span><strong> $driverPattern</strong>, <span class="param-type">string</span><strong> $enabledParameter</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li/>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$driver</code> - driver DI definition or reference</li>
                <li><code>$namespaces</code> - list of namespaces handled by $driver</li>
                <li><code>$managerParameters</code> - list of container parameters</li>
                <li><code>$driverPattern</code> - pattern to get the metadata driver service names</li>
                <li><code>$enabledParameter</code> - service container parameter that must be</li>
              </ul>
            </ul>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul class="varlist">
          <li>
            <a name="process"/>
            <h4><span class="label public">public</span>process<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_DependencyInjection_ContainerBuilder.xhtml">Symfony\Component\DependencyInjection\ContainerBuilder</a></span><strong> $container</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Register mappings with the metadata drivers.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$container</code> - </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="enabled"/>
            <h4><span class="label protected">protected</span>enabled<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_DependencyInjection_ContainerBuilder.xhtml">Symfony\Component\DependencyInjection\ContainerBuilder</a></span><strong> $container</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Determine whether this mapping should be activated or not. This allows to take this decision with the container builder available.<pre>This default implementation checks if the class has the enabledParameter
configured and if so if that parameter is present in the container.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$container</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>whether this compiler pass really should register the mappings</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getChainDriverServiceName"/>
            <h4><span class="label protected">protected</span>getChainDriverServiceName<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_DependencyInjection_ContainerBuilder.xhtml">Symfony\Component\DependencyInjection\ContainerBuilder</a></span><strong> $container</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Get the service name of the metadata chain driver that the mappings should be registered with. The default implementation loops over the managerParameters and applies the first non-empty parameter it finds to the driverPattern.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$container</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>a service definition name</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>ParameterNotFoundException if non of the managerParameters has a</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getDriver"/>
            <h4><span class="label protected">protected</span>getDriver<span style="font-size:90%;">( <span class="param-type"><a href="../classes/Symfony_Component_DependencyInjection_ContainerBuilder.xhtml">Symfony\Component\DependencyInjection\ContainerBuilder</a></span><strong> $container</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Create the service definition for the metadata driver.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$container</code> - passed on in case an extending class</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>the metadata driver to add to all chain drivers</li>
              </ul>
            </ul>
          </li>
        </ul>
        <div class="footer">Generated using phpDox 0.5-40-g758636e - Copyright (C) 2010 - 2013 by Arne Blankerts</div>
      </div>
    </div>
  </body>
</html>
