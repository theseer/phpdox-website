<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "html" "">
<html xmlns="http://www.w3.org/1999/xhtml" class="no-js" lang="en">
  <head>
    <meta charset="utf-8"/>
    <title>Symfony2 - Symfony\Component\Process\PhpProcess - API Documentation</title>
    <link href="../css/normalize.css" rel="stylesheet" type="text/css" media="all"/>
    <link href="../css/styles.css" rel="stylesheet" type="text/css" media="all"/>
  </head>
  <body>
    <div class="wrapper clearfix">
      <div class="topbar clearfix">
        <h1>
          <a class="brand" href="../index.xhtml">Symfony2 - API Documentation</a>
        </h1>
        <ul class="nav">
          <li class="active">
            <a href="../index.xhtml">Overview</a>
          </li>
        </ul>
      </div>
      <div class="navigation">
        <h3>Members</h3>
        <ul>
          <li>
            <a href="#executableFinder">$executableFinder</a>
          </li>
          <li>
            <a href="#exitCodes">$exitCodes</a>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul>
          <li>
            <a href="#__clone">__clone</a>
          </li>
          <li>
            <a href="#__construct">__construct</a>
          </li>
          <li>
            <a href="#addErrorOutput">addErrorOutput</a>
          </li>
          <li>
            <a href="#addOutput">addOutput</a>
          </li>
          <li>
            <a href="#buildCallback">buildCallback</a>
          </li>
          <li>
            <a href="#checkTimeout">checkTimeout</a>
          </li>
          <li>
            <a href="#getCommandLine">getCommandLine</a>
          </li>
          <li>
            <a href="#getEnhanceSigchildCompatibility">getEnhanceSigchildCompatibility</a>
          </li>
          <li>
            <a href="#getEnhanceWindowsCompatibility">getEnhanceWindowsCompatibility</a>
          </li>
          <li>
            <a href="#getEnv">getEnv</a>
          </li>
          <li>
            <a href="#getErrorOutput">getErrorOutput</a>
          </li>
          <li>
            <a href="#getExitCode">getExitCode</a>
          </li>
          <li>
            <a href="#getExitCodeText">getExitCodeText</a>
          </li>
          <li>
            <a href="#getIncrementalErrorOutput">getIncrementalErrorOutput</a>
          </li>
          <li>
            <a href="#getIncrementalOutput">getIncrementalOutput</a>
          </li>
          <li>
            <a href="#getOptions">getOptions</a>
          </li>
          <li>
            <a href="#getOutput">getOutput</a>
          </li>
          <li>
            <a href="#getPid">getPid</a>
          </li>
          <li>
            <a href="#getStatus">getStatus</a>
          </li>
          <li>
            <a href="#getStdin">getStdin</a>
          </li>
          <li>
            <a href="#getStopSignal">getStopSignal</a>
          </li>
          <li>
            <a href="#getTermSignal">getTermSignal</a>
          </li>
          <li>
            <a href="#getTimeout">getTimeout</a>
          </li>
          <li>
            <a href="#getWorkingDirectory">getWorkingDirectory</a>
          </li>
          <li>
            <a href="#hasBeenSignaled">hasBeenSignaled</a>
          </li>
          <li>
            <a href="#hasBeenStopped">hasBeenStopped</a>
          </li>
          <li>
            <a href="#isRunning">isRunning</a>
          </li>
          <li>
            <a href="#isSigchildEnabled">isSigchildEnabled</a>
          </li>
          <li>
            <a href="#isStarted">isStarted</a>
          </li>
          <li>
            <a href="#isSuccessful">isSuccessful</a>
          </li>
          <li>
            <a href="#isTerminated">isTerminated</a>
          </li>
          <li>
            <a href="#isTty">isTty</a>
          </li>
          <li>
            <a href="#restart">restart</a>
          </li>
          <li>
            <a href="#run">run</a>
          </li>
          <li>
            <a href="#setCommandLine">setCommandLine</a>
          </li>
          <li>
            <a href="#setEnhanceSigchildCompatibility">setEnhanceSigchildCompatibility</a>
          </li>
          <li>
            <a href="#setEnhanceWindowsCompatibility">setEnhanceWindowsCompatibility</a>
          </li>
          <li>
            <a href="#setEnv">setEnv</a>
          </li>
          <li>
            <a href="#setOptions">setOptions</a>
          </li>
          <li>
            <a href="#setPhpBinary">setPhpBinary</a>
          </li>
          <li>
            <a href="#setStdin">setStdin</a>
          </li>
          <li>
            <a href="#setTimeout">setTimeout</a>
          </li>
          <li>
            <a href="#setTty">setTty</a>
          </li>
          <li>
            <a href="#setWorkingDirectory">setWorkingDirectory</a>
          </li>
          <li>
            <a href="#signal">signal</a>
          </li>
          <li>
            <a href="#start">start</a>
          </li>
          <li>
            <a href="#start">start</a>
          </li>
          <li>
            <a href="#stop">stop</a>
          </li>
          <li>
            <a href="#updateErrorOutput">updateErrorOutput</a>
          </li>
          <li>
            <a href="#updateOutput">updateOutput</a>
          </li>
          <li>
            <a href="#updateStatus">updateStatus</a>
          </li>
          <li>
            <a href="#wait">wait</a>
          </li>
        </ul>
      </div>
      <div class="content">
        <h2><span style="font-size:60%">Symfony\Component\Process\</span>PhpProcess</h2>
        <div class="file-notice">
          <p>PhpProcess runs a PHP script in an independent process.</p>
          <p>
            <pre>$p = new PhpProcess('&lt;?php echo "foo"; ?&gt;');
$p-&gt;run();
print $p-&gt;getOutput()."\n";</pre>
          </p>
        </div>
        <ul class="fileinfos">
          <li><b>Author: </b>Fabien Potencier &lt;fabien@symfony.com&gt;</li>
        </ul>
        <h3>Constants</h3>
        <ul class="varlist"/>
        <h3>Members</h3>
        <ul class="varlist">
          <li>
            <a name="executableFinder"/>
            <h4><span class="label private">private</span>
                $executableFinder</h4>
          </li>
        </ul>
        <h3>Constructor</h3>
        <ul class="varlist">
          <li>
            <a name="__construct"/>
            <h4><span class="label public">public</span>__construct<span style="font-size:90%;">( <span class="param-type">string</span><strong> $script</strong>, <span class="param-type">string</span><strong> $cwd</strong>, <span class="param-type">Array</span><strong> $env</strong>, <span class="param-type">integer</span><strong> $timeout</strong>, <span class="param-type">Array</span><strong> $options</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Constructor.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$script</code> - The PHP script to run (as a string)</li>
                <li><code>$cwd</code> - The working directory</li>
                <li><code>$env</code> - The environment variables</li>
                <li><code>$timeout</code> - The timeout in seconds</li>
                <li><code>$options</code> - An array of options for proc_open</li>
              </ul>
            </ul>
          </li>
        </ul>
        <h3>Destructor</h3>
        <ul class="varlist">
          <li>
            <a name="__destruct"/>
            <h4><span class="label public">public</span>__destruct<span style="font-size:90%;">(  )</span></h4>
          </li>
        </ul>
        <h3>Methods</h3>
        <ul class="varlist">
          <li>
            <a name="__clone"/>
            <h4><span class="label public">public</span>__clone<span style="font-size:90%;">(  )</span></h4>
          </li>
          <li>
            <a name="addErrorOutput"/>
            <h4><span class="label public">public</span>addErrorOutput<span style="font-size:90%;">( <span class="param-type">string</span><strong> $line</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Adds a line to the STDERR stream.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$line</code> - The line to append</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="addOutput"/>
            <h4><span class="label public">public</span>addOutput<span style="font-size:90%;">( <span class="param-type">string</span><strong> $line</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Adds a line to the STDOUT stream.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$line</code> - The line to append</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="checkTimeout"/>
            <h4><span class="label public">public</span>checkTimeout<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Performs a check between the timeout definition and the time the process started.<pre>In case you run a background process (with the start method), you should
trigger this method regularly to ensure the process timeout</pre></li>
            </p>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>RuntimeException In case the timeout was reached</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getCommandLine"/>
            <h4><span class="label public">public</span>getCommandLine<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the command line to be executed.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The command to execute</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getEnhanceSigchildCompatibility"/>
            <h4><span class="label public">public</span>getEnhanceSigchildCompatibility<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns whether sigchild compatibility mode is activated or not.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getEnhanceWindowsCompatibility"/>
            <h4><span class="label public">public</span>getEnhanceWindowsCompatibility<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets whether or not Windows compatibility is enabled.<pre>This is true by default.</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getEnv"/>
            <h4><span class="label public">public</span>getEnv<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the environment variables.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The current environment variables</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getErrorOutput"/>
            <h4><span class="label public">public</span>getErrorOutput<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the current error output of the process (STDERR).</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The process error output</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getExitCode"/>
            <h4><span class="label public">public</span>getExitCode<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the exit code returned by the process.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The exit status code</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>RuntimeException In case --enable-sigchild is activated and the sigchild compatibility mode is disabled</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getExitCodeText"/>
            <h4><span class="label public">public</span>getExitCodeText<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns a string representation for the exit code returned by the process.<pre>This method relies on the Unix exit code status standardization
and might not be relevant for other operating systems.</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>A string representation for the exit status code</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getIncrementalErrorOutput"/>
            <h4><span class="label public">public</span>getIncrementalErrorOutput<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the errorOutput incrementally.<pre>In comparison with the getErrorOutput method which always return the
whole error output, this one returns the new error output since the last
call.</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The process error output since the last call</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getIncrementalOutput"/>
            <h4><span class="label public">public</span>getIncrementalOutput<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the output incrementally.<pre>In comparison with the getOutput method which always return the whole
output, this one returns the new output since the last call.</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The process output since the last call</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getOptions"/>
            <h4><span class="label public">public</span>getOptions<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the options for proc_open.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The current options</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getOutput"/>
            <h4><span class="label public">public</span>getOutput<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the current output of the process (STDOUT).</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The process output</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getPid"/>
            <h4><span class="label public">public</span>getPid<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the Pid (process identifier), if applicable.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The process id if running, null otherwise</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>RuntimeException In case --enable-sigchild is activated</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getStatus"/>
            <h4><span class="label public">public</span>getStatus<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the process status.<pre>The status is one of: ready, started, terminated.</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The current process status</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getStdin"/>
            <h4><span class="label public">public</span>getStdin<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the contents of STDIN.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The current contents</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getStopSignal"/>
            <h4><span class="label public">public</span>getStopSignal<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the number of the signal that caused the child process to stop its execution.<pre>It is only meaningful if hasBeenStopped() returns true.</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getTermSignal"/>
            <h4><span class="label public">public</span>getTermSignal<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the number of the signal that caused the child process to terminate its execution.<pre>It is only meaningful if hasBeenSignaled() returns true.</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>RuntimeException In case --enable-sigchild is activated</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getTimeout"/>
            <h4><span class="label public">public</span>getTimeout<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the process timeout.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The timeout in seconds or null if it's disabled</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getWorkingDirectory"/>
            <h4><span class="label public">public</span>getWorkingDirectory<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Gets the working directory.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The current working directory</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="hasBeenSignaled"/>
            <h4><span class="label public">public</span>hasBeenSignaled<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns true if the child process has been terminated by an uncaught signal.<pre>It always returns false on Windows.</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>RuntimeException In case --enable-sigchild is activated</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="hasBeenStopped"/>
            <h4><span class="label public">public</span>hasBeenStopped<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns true if the child process has been stopped by a signal.<pre>It always returns false on Windows.</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="isRunning"/>
            <h4><span class="label public">public</span>isRunning<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Checks if the process is currently running.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>true if the process is currently running, false otherwise</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="isStarted"/>
            <h4><span class="label public">public</span>isStarted<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Checks if the process has been started with no regard to the current state.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>true if status is ready, false otherwise</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="isSuccessful"/>
            <h4><span class="label public">public</span>isSuccessful<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Checks if the process ended successfully.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>true if the process ended successfully, false otherwise</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="isTerminated"/>
            <h4><span class="label public">public</span>isTerminated<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Checks if the process is terminated.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>true if process is terminated, false otherwise</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="isTty"/>
            <h4><span class="label public">public</span>isTty<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Checks if  the TTY mode is enabled.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>true if the TTY mode is enabled, false otherwise</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="restart"/>
            <h4><span class="label public">public</span>restart<span style="font-size:90%;">( <span class="param-type"><span title="callable">callable</span></span><strong> $callback</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Restarts the process.<pre>Be warned that the process is cloned before being started.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$callback</code> - A PHP callback to run whenever there is some</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The new process</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\RuntimeException When process can't be launch or is stopped</code>
                </li>
                <li>
                  <code>\RuntimeException When process is already running</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="run"/>
            <h4><span class="label public">public</span>run<span style="font-size:90%;">( <span class="param-type"><span title="callback|null">callback|null</span></span><strong> $callback</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Runs the process.<pre>The callback receives the type of output (out or err) and
some bytes from the output in real-time. It allows to have feedback
from the independent process during execution.

The STDOUT and STDERR are also available after the process is finished
via the getOutput() and getErrorOutput() methods.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$callback</code> - A PHP callback to run whenever there is some</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The exit status code</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>RuntimeException When process can't be launch or is stopped</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setCommandLine"/>
            <h4><span class="label public">public</span>setCommandLine<span style="font-size:90%;">( <span class="param-type">string</span><strong> $commandline</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sets the command line to be executed.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$commandline</code> - The command to execute</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The current Process instance</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setEnhanceSigchildCompatibility"/>
            <h4><span class="label public">public</span>setEnhanceSigchildCompatibility<span style="font-size:90%;">( <span class="param-type"><span title="Boolean">Boolean</span></span><strong> $enhance</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Activates sigchild compatibility mode.<pre>Sigchild compatibility mode is required to get the exit code and
determine the success of a process when PHP has been compiled with
the --enable-sigchild option</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$enhance</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The current Process instance</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setEnhanceWindowsCompatibility"/>
            <h4><span class="label public">public</span>setEnhanceWindowsCompatibility<span style="font-size:90%;">( <span class="param-type"><span title="Boolean">Boolean</span></span><strong> $enhance</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sets whether or not Windows compatibility is enabled.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$enhance</code> - </li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The current Process instance</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setEnv"/>
            <h4><span class="label public">public</span>setEnv<span style="font-size:90%;">( <span class="param-type">Array</span><strong> $env</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sets the environment variables.<pre>An environment variable value should be a string.
If it is an array, the variable is ignored.

That happens in PHP when 'argv' is registered into
the $_ENV array for instance.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$env</code> - The new environment variables</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The current Process instance</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setOptions"/>
            <h4><span class="label public">public</span>setOptions<span style="font-size:90%;">( <span class="param-type">Array</span><strong> $options</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sets the options for proc_open.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$options</code> - The new options</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The current Process instance</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setPhpBinary"/>
            <h4><span class="label public">public</span>setPhpBinary<span style="font-size:90%;">( <span class="param-type"/><strong> $php</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sets the path to the PHP binary to use.</li>
            </p>
          </li>
          <li>
            <a name="setStdin"/>
            <h4><span class="label public">public</span>setStdin<span style="font-size:90%;">( <span class="param-type">string</span><strong> $stdin</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sets the contents of STDIN.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$stdin</code> - The new contents</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The current Process instance</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setTimeout"/>
            <h4><span class="label public">public</span>setTimeout<span style="font-size:90%;">( <span class="param-type"><span title="float|null">float|null</span></span><strong> $timeout</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sets the process timeout.<pre>To disable the timeout, set this value to null.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$timeout</code> - The timeout in seconds</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The current Process instance</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>InvalidArgumentException if the timeout is negative</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setTty"/>
            <h4><span class="label public">public</span>setTty<span style="font-size:90%;">( <span class="param-type">boolean</span><strong> $tty</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Enables or disables the TTY mode.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$tty</code> - True to enabled and false to disable</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The current Process instance</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="setWorkingDirectory"/>
            <h4><span class="label public">public</span>setWorkingDirectory<span style="font-size:90%;">( <span class="param-type">string</span><strong> $cwd</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sets the current working directory.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$cwd</code> - The new working directory</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The current Process instance</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="signal"/>
            <h4><span class="label public">public</span>signal<span style="font-size:90%;">( <span class="param-type">integer</span><strong> $signal</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Sends a posix signal to the process.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$signal</code> - A valid posix signal (see http://www.php.net/manual/en/pcntl.constants.php)</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>LogicException   In case the process is not running</code>
                </li>
                <li>
                  <code>RuntimeException In case --enable-sigchild is activated</code>
                </li>
                <li>
                  <code>RuntimeException In case of failure</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="start"/>
            <h4><span class="label public">public</span>start<span style="font-size:90%;">( <span class="param-type"/><strong> $callback</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>{@inheritdoc}</li>
            </p>
          </li>
          <li>
            <a name="start"/>
            <h4><span class="label public">public</span>start<span style="font-size:90%;">( <span class="param-type"><span title="callback|null">callback|null</span></span><strong> $callback</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Starts the process and returns after sending the STDIN.<pre>This method blocks until all STDIN data is sent to the process then it
returns while the process runs in the background.

The termination of the process can be awaited with wait().

The callback receives the type of output (out or err) and some bytes from
the output in real-time while writing the standard input to the process.
It allows to have feedback from the independent process during execution.
If there is no callback passed, the wait() method can be called
with true as a second parameter then the callback will get all data occurred
in (and since) the start call.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$callback</code> - A PHP callback to run whenever there is some</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>RuntimeException When process can't be launch or is stopped</code>
                </li>
                <li>
                  <code>RuntimeException When process is already running</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="stop"/>
            <h4><span class="label public">public</span>stop<span style="font-size:90%;">( <span class="param-type">integer</span><strong> $timeout</strong>, <span class="param-type">integer</span><strong> $signal</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Stops the process.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$timeout</code> - The timeout in seconds</li>
                <li><code>$signal</code> - A posix signal to send in case the process has not stop at timeout, default is SIGKILL</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The exit-code of the process</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>RuntimeException if the process got signaled</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="wait"/>
            <h4><span class="label public">public</span>wait<span style="font-size:90%;">( <span class="param-type"><span title="callback|null">callback|null</span></span><strong> $callback</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Waits for the process to terminate.<pre>The callback receives the type of output (out or err) and some bytes
from the output in real-time while writing the standard input to the process.
It allows to have feedback from the independent process during execution.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$callback</code> - A valid PHP callback</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The exitcode of the process</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\RuntimeException When process timed out</code>
                </li>
                <li>
                  <code>\RuntimeException When process stopped after receiving signal</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="buildCallback"/>
            <h4><span class="label protected">protected</span>buildCallback<span style="font-size:90%;">( <span class="param-type"><span title="callback|null">callback|null</span></span><strong> $callback</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Builds up the callback used by wait().<pre>The callbacks adds all occurred output to the specific buffer and calls
the user callback (if present) with the received output.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$callback</code> - The user defined PHP callback</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>A PHP callable</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="isSigchildEnabled"/>
            <h4><span class="label protected">protected</span>isSigchildEnabled<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns whether PHP has been compiled with the '--enable-sigchild' option or not.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="updateErrorOutput"/>
            <h4><span class="label protected">protected</span>updateErrorOutput<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Updates the current error output of the process (STDERR).</li>
            </p>
          </li>
          <li>
            <a name="updateOutput"/>
            <h4><span class="label protected">protected</span>updateOutput<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Updates the current output of the process (STDOUT).</li>
            </p>
          </li>
          <li>
            <a name="updateStatus"/>
            <h4><span class="label protected">protected</span>updateStatus<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Updates the status of the process.</li>
            </p>
          </li>
        </ul>
        <div class="footer">Generated using phpDox 0.5-40-g758636e - Copyright (C) 2010 - 2013 by Arne Blankerts</div>
      </div>
    </div>
  </body>
</html>
