<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "html" "">
<html xmlns="http://www.w3.org/1999/xhtml" class="no-js" lang="en">
  <head>
    <meta charset="utf-8"/>
    <title>Symfony2 - Symfony\Component\Validator\ValidationVisitorInterface - API Documentation</title>
    <link href="../css/normalize.css" rel="stylesheet" type="text/css" media="all"/>
    <link href="../css/styles.css" rel="stylesheet" type="text/css" media="all"/>
  </head>
  <body>
    <div class="wrapper clearfix">
      <div class="topbar clearfix">
        <h1>
          <a class="brand" href="../index.xhtml">Symfony2 - API Documentation</a>
        </h1>
        <ul class="nav">
          <li class="active">
            <a href="../index.xhtml">Overview</a>
          </li>
        </ul>
      </div>
      <div class="navigation">
        <h3>Methods</h3>
        <ul>
          <li>
            <a href="#validate">validate</a>
          </li>
          <li>
            <a href="#visit">visit</a>
          </li>
        </ul>
      </div>
      <div class="content">
        <h2><span style="font-size:60%">Symfony\Component\Validator\</span>ValidationVisitorInterface</h2>
        <div class="file-notice">
          <p>Validates values against constraints defined in {@link MetadataInterface} instances.</p>
          <p>
            <pre>This interface is an implementation of the Visitor design pattern. A value
is validated by first passing it to the  method. That method
will determine the matching  for validating the
value. It then calls the  method of that
metadata. &lt;tt&gt;accept()&lt;/tt&gt; does two things:
&lt;ol&gt;
&lt;li&gt;It calls  to validate the value against the constraints of
the metadata.&lt;/li&gt;
&lt;li&gt;It calls &lt;tt&gt;accept()&lt;/tt&gt; on all nested metadata instances with the
corresponding values extracted from the current value. For example, if the
current metadata represents a class and the current value is an object of
that class, the metadata contains nested instances for each property of that
class. It forwards the call to these nested metadata with the values of the
corresponding properties in the original object.&lt;/li&gt;
&lt;/ol&gt;
</pre>
          </p>
        </div>
        <ul class="fileinfos">
          <li><b>Author: </b>Bernhard Schussek &lt;bschussek@gmail.com&gt;</li>
        </ul>
        <h3>Methods</h3>
        <ul class="varlist">
          <li>
            <a name="validate"/>
            <h4><span class="label public">public</span>validate<span style="font-size:90%;">( <span class="param-type">mixed</span><strong> $value</strong>, <span class="param-type">string</span><strong> $group</strong>, <span class="param-type">string</span><strong> $propertyPath</strong>, <span class="param-type"><span title="Boolean">Boolean</span></span><strong> $traverse</strong>, <span class="param-type"><span title="Boolean">Boolean</span></span><strong> $deep</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Validates a value.<pre>If the value is an array or a traversable object, you can set the
parameter &lt;tt&gt;$traverse&lt;/tt&gt; to &lt;tt&gt;true&lt;/tt&gt; in order to run through
the collection and validate each element. If these elements can be
collections again and you want to traverse them recursively, set the
parameter &lt;tt&gt;$deep&lt;/tt&gt; to &lt;tt&gt;true&lt;/tt&gt; as well.

If you set &lt;tt&gt;$traversable&lt;/tt&gt; to &lt;tt&gt;true&lt;/tt&gt;, the visitor will
nevertheless try to find metadata for the collection and validate its
constraints. If no such metadata is found, the visitor ignores that and
only iterates the collection.

If you don't set &lt;tt&gt;$traversable&lt;/tt&gt; to &lt;tt&gt;true&lt;/tt&gt; and the visitor
does not find metadata for the given value, it will fail with an
exception.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$value</code> - The value to validate.</li>
                <li><code>$group</code> - The validation group to validate.</li>
                <li><code>$propertyPath</code> - The current property path in the validation graph.</li>
                <li><code>$traverse</code> - Whether to traverse the value if it is traversable.</li>
                <li><code>$deep</code> - Whether to traverse nested traversable values recursively.</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>Exception\NoSuchMetadataException If no metadata can be found for</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="visit"/>
            <h4><span class="label public">public</span>visit<span style="font-size:90%;">( <span class="param-type"><a href="../interfaces/Symfony_Component_Validator_MetadataInterface.xhtml">Symfony\Component\Validator\MetadataInterface</a></span><strong> $metadata</strong>, <span class="param-type">mixed</span><strong> $value</strong>, <span class="param-type">string</span><strong> $group</strong>, <span class="param-type">string</span><strong> $propertyPath</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Validates a value against the constraints defined in some metadata.<pre>This method implements the Visitor design pattern. See also
{@link ValidationVisitorInterface}.</pre></li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$metadata</code> - The metadata holding the constraints.</li>
                <li><code>$value</code> - The value to validate.</li>
                <li><code>$group</code> - The validation group to validate.</li>
                <li><code>$propertyPath</code> - The current property path in the validation graph.</li>
              </ul>
            </ul>
          </li>
        </ul>
        <div class="footer">Generated using phpDox 0.5-40-g758636e - Copyright (C) 2010 - 2013 by Arne Blankerts</div>
      </div>
    </div>
  </body>
</html>
