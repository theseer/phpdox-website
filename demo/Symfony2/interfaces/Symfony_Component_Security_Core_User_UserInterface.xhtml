<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "html" "">
<html xmlns="http://www.w3.org/1999/xhtml" class="no-js" lang="en">
  <head>
    <meta charset="utf-8"/>
    <title>Symfony2 - Symfony\Component\Security\Core\User\UserInterface - API Documentation</title>
    <link href="../css/normalize.css" rel="stylesheet" type="text/css" media="all"/>
    <link href="../css/styles.css" rel="stylesheet" type="text/css" media="all"/>
  </head>
  <body>
    <div class="wrapper clearfix">
      <div class="topbar clearfix">
        <h1>
          <a class="brand" href="../index.xhtml">Symfony2 - API Documentation</a>
        </h1>
        <ul class="nav">
          <li class="active">
            <a href="../index.xhtml">Overview</a>
          </li>
        </ul>
      </div>
      <div class="navigation">
        <h3>Methods</h3>
        <ul>
          <li>
            <a href="#eraseCredentials">eraseCredentials</a>
          </li>
          <li>
            <a href="#getPassword">getPassword</a>
          </li>
          <li>
            <a href="#getRoles">getRoles</a>
          </li>
          <li>
            <a href="#getSalt">getSalt</a>
          </li>
          <li>
            <a href="#getUsername">getUsername</a>
          </li>
        </ul>
      </div>
      <div class="content">
        <h2><span style="font-size:60%">Symfony\Component\Security\Core\User\</span>UserInterface</h2>
        <div class="file-notice">
          <p>Represents the interface that all user classes must implement.</p>
          <p>
            <pre>This interface is useful because the authentication layer can deal with
the object through its lifecycle, using the object to get the encoded
password (for checking against a submitted password), assigning roles
and so on.

Regardless of how your user are loaded or where they come from (a database,
configuration, web service, etc), you will have a class that implements
this interface. Objects that implement this interface are created and
loaded by different objects that implement UserProviderInterface</pre>
          </p>
        </div>
        <ul class="fileinfos">
          <li><b>Author: </b>Fabien Potencier &lt;fabien@symfony.com&gt;</li>
        </ul>
        <h3>Methods</h3>
        <ul class="varlist">
          <li>
            <a name="eraseCredentials"/>
            <h4><span class="label public">public</span>eraseCredentials<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Removes sensitive data from the user.<pre>This is important if, at any given point, sensitive information like
the plain-text password is stored on this object.</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li/>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getPassword"/>
            <h4><span class="label public">public</span>getPassword<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the password used to authenticate the user.<pre>This should be the encoded password. On authentication, a plain-text
password will be salted, encoded, and then compared to this value.</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The password</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getRoles"/>
            <h4><span class="label public">public</span>getRoles<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the roles granted to the user.<pre>&lt;code&gt;
public function getRoles()
{
    return array('ROLE_USER');
}
&lt;/code&gt;

Alternatively, the roles might be stored on a ``roles`` property,
and populated in any number of different ways when the user object
is created.</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The user roles</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getSalt"/>
            <h4><span class="label public">public</span>getSalt<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the salt that was originally used to encode the password.<pre>This can return null if the password was not encoded using a salt.</pre></li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The salt</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="getUsername"/>
            <h4><span class="label public">public</span>getUsername<span style="font-size:90%;">(  )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns the username used to authenticate the user.</li>
            </p>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The username</li>
              </ul>
            </ul>
          </li>
        </ul>
        <div class="footer">Generated using phpDox 0.5-40-g758636e - Copyright (C) 2010 - 2013 by Arne Blankerts</div>
      </div>
    </div>
  </body>
</html>
