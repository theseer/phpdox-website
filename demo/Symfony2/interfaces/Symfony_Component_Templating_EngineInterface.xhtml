<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "html" "">
<html xmlns="http://www.w3.org/1999/xhtml" class="no-js" lang="en">
  <head>
    <meta charset="utf-8"/>
    <title>Symfony2 - Symfony\Component\Templating\EngineInterface - API Documentation</title>
    <link href="../css/normalize.css" rel="stylesheet" type="text/css" media="all"/>
    <link href="../css/styles.css" rel="stylesheet" type="text/css" media="all"/>
  </head>
  <body>
    <div class="wrapper clearfix">
      <div class="topbar clearfix">
        <h1>
          <a class="brand" href="../index.xhtml">Symfony2 - API Documentation</a>
        </h1>
        <ul class="nav">
          <li class="active">
            <a href="../index.xhtml">Overview</a>
          </li>
        </ul>
      </div>
      <div class="navigation">
        <h3>Methods</h3>
        <ul>
          <li>
            <a href="#exists">exists</a>
          </li>
          <li>
            <a href="#render">render</a>
          </li>
          <li>
            <a href="#supports">supports</a>
          </li>
        </ul>
      </div>
      <div class="content">
        <h2><span style="font-size:60%">Symfony\Component\Templating\</span>EngineInterface</h2>
        <div class="file-notice">
          <p>EngineInterface is the interface each engine must implement.</p>
          <p>
            <pre>All methods relies on a template name. A template name is a
"logical" name for the template, and as such it does not refer to
a path on the filesystem (in fact, the template can be stored
anywhere, like in a database).

The methods should accept any name. If the name is not an instance of
TemplateReferenceInterface, a TemplateNameParserInterface should be used to
convert the name to a TemplateReferenceInterface instance.

Each template loader use the logical template name to look for
the template.</pre>
          </p>
        </div>
        <ul class="fileinfos">
          <li><b>Author: </b>Fabien Potencier &lt;fabien@symfony.com&gt;</li>
        </ul>
        <h3>Methods</h3>
        <ul class="varlist">
          <li>
            <a name="exists"/>
            <h4><span class="label public">public</span>exists<span style="font-size:90%;">( <span class="param-type">mixed</span><strong> $name</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns true if the template exists.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - A template name or a TemplateReferenceInterface instance</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>true if the template exists, false otherwise</li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="render"/>
            <h4><span class="label public">public</span>render<span style="font-size:90%;">( <span class="param-type">mixed</span><strong> $name</strong>, <span class="param-type">Array</span><strong> $parameters</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Renders a template.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - A template name or a TemplateReferenceInterface instance</li>
                <li><code>$parameters</code> - An array of parameters to pass to the template</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>The evaluated template as a string</li>
              </ul>
            </ul>
            <ul>
              <h4 class="throws">Throws:</h4>
              <ul class="throws">
                <li>
                  <code>\RuntimeException if the template cannot be rendered</code>
                </li>
              </ul>
            </ul>
          </li>
          <li>
            <a name="supports"/>
            <h4><span class="label public">public</span>supports<span style="font-size:90%;">( <span class="param-type">mixed</span><strong> $name</strong> )</span></h4>
            <p style="font-size:110%; padding-top:5px;">
              <li>Returns true if this class is able to render the given template.</li>
            </p>
            <ul>
              <h4 class="param">Parameters:</h4>
              <ul class="param">
                <li><code>$name</code> - A template name or a TemplateReferenceInterface instance</li>
              </ul>
            </ul>
            <ul>
              <h4 class="return">Returns:</h4>
              <ul class="return">
                <li>true if this class supports the given template, false otherwise</li>
              </ul>
            </ul>
          </li>
        </ul>
        <div class="footer">Generated using phpDox 0.5-40-g758636e - Copyright (C) 2010 - 2013 by Arne Blankerts</div>
      </div>
    </div>
  </body>
</html>
